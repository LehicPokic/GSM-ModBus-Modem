
GSM-Modbus-Modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003340  08003340  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003340  08003340  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003340  08003340  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  20000060  080033a8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001294  080033a8  00021294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000117bb  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029aa  00000000  00000000  00031887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7e  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c19  00000000  00000000  00035ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cdc  00000000  00000000  0004eadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091f71  00000000  00000000  000607bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000455c  00000000  00000000  000f272c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f6c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080032a0 	.word	0x080032a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080032a0 	.word	0x080032a0

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fabd 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f835 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8cd 	bl	800032c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f877 	bl	8000284 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000196:	f000 f89f 	bl	80002d8 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <main+0x68>)
 800019c:	f107 041c 	add.w	r4, r7, #28
 80001a0:	461d      	mov	r5, r3
 80001a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ae:	f107 031c 	add.w	r3, r7, #28
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fdb3 	bl	8001d20 <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a0b      	ldr	r2, [pc, #44]	; (80001ec <main+0x6c>)
 80001be:	6013      	str	r3, [r2, #0]

  /* definition and creation of modbusMastertas */
  osThreadDef(modbusMastertas, modbusMaster, osPriorityIdle, 0, 128);
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <main+0x70>)
 80001c2:	463c      	mov	r4, r7
 80001c4:	461d      	mov	r5, r3
 80001c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  modbusMastertasHandle = osThreadCreate(osThread(modbusMastertas), NULL);
 80001d2:	463b      	mov	r3, r7
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fda2 	bl	8001d20 <osThreadCreate>
 80001dc:	4603      	mov	r3, r0
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <main+0x74>)
 80001e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001e2:	f001 fd96 	bl	8001d12 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x66>
 80001e8:	080032c4 	.word	0x080032c4
 80001ec:	200003ac 	.word	0x200003ac
 80001f0:	080032f0 	.word	0x080032f0
 80001f4:	200003b0 	.word	0x200003b0

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 ff72 	bl	80030f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021a:	2301      	movs	r3, #1
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800021e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022c:	2302      	movs	r3, #2
 800022e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000236:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fcf5 	bl	8000c30 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800024c:	f000 f8da 	bl	8000404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f000 ff62 	bl	8001134 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000276:	f000 f8c5 	bl	8000404 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 800028a:	4a12      	ldr	r2, [pc, #72]	; (80002d4 <MX_USART1_UART_Init+0x50>)
 800028c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 8000290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002aa:	220c      	movs	r2, #12
 80002ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002b6:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <MX_USART1_UART_Init+0x4c>)
 80002be:	f001 fb41 	bl	8001944 <HAL_UART_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80002c8:	f000 f89c 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000031c 	.word	0x2000031c
 80002d4:	40013800 	.word	0x40013800

080002d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002dc:	4b11      	ldr	r3, [pc, #68]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	; (8000328 <MX_USART2_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_USART2_UART_Init+0x4c>)
 8000310:	f001 fb18 	bl	8001944 <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f873 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000364 	.word	0x20000364
 8000328:	40004400 	.word	0x40004400

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a13      	ldr	r2, [pc, #76]	; (8000384 <MX_GPIO_Init+0x58>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0310 	and.w	r3, r3, #16
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a0d      	ldr	r2, [pc, #52]	; (8000384 <MX_GPIO_Init+0x58>)
 8000350:	f043 0320 	orr.w	r3, r3, #32
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0320 	and.w	r3, r3, #32
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_GPIO_Init+0x58>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a07      	ldr	r2, [pc, #28]	; (8000384 <MX_GPIO_Init+0x58>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <MX_GPIO_Init+0x58>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0304 	and.w	r3, r3, #4
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f001 fd11 	bl	8001db8 <osDelay>
 8000396:	e7fb      	b.n	8000390 <StartDefaultTask+0x8>

08000398 <modbusMaster>:
/* USER CODE END Header_modbusMaster */

uint8_t buffer[8];

void modbusMaster(void const * argument)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 8; i++){
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	e00d      	b.n	80003c2 <modbusMaster+0x2a>
		HAL_UART_Transmit(&huart1, &buffer[i], 1, 30);
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <modbusMaster+0x40>)
 80003aa:	1899      	adds	r1, r3, r2
 80003ac:	231e      	movs	r3, #30
 80003ae:	2201      	movs	r2, #1
 80003b0:	480a      	ldr	r0, [pc, #40]	; (80003dc <modbusMaster+0x44>)
 80003b2:	f001 fb17 	bl	80019e4 <HAL_UART_Transmit>
		osDelay(1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f001 fcfe 	bl	8001db8 <osDelay>
	for (int i = 0; i < 8; i++){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	3301      	adds	r3, #1
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	ddee      	ble.n	80003a6 <modbusMaster+0xe>
	}
	osDelay(4);
 80003c8:	2004      	movs	r0, #4
 80003ca:	f001 fcf5 	bl	8001db8 <osDelay>
   /* USER CODE END modbusMaster */
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200003b4 	.word	0x200003b4
 80003dc:	2000031c 	.word	0x2000031c

080003e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d101      	bne.n	80003f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003f2:	f000 f99d 	bl	8000730 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40012c00 	.word	0x40012c00

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000408:	b672      	cpsid	i
}
 800040a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040c:	e7fe      	b.n	800040c <Error_Handler+0x8>
	...

08000410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <HAL_MspInit+0x68>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	4a17      	ldr	r2, [pc, #92]	; (8000478 <HAL_MspInit+0x68>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6193      	str	r3, [r2, #24]
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_MspInit+0x68>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
 800042c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_MspInit+0x68>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	4a11      	ldr	r2, [pc, #68]	; (8000478 <HAL_MspInit+0x68>)
 8000434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000438:	61d3      	str	r3, [r2, #28]
 800043a:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <HAL_MspInit+0x68>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	210f      	movs	r1, #15
 800044a:	f06f 0001 	mvn.w	r0, #1
 800044e:	f000 fa40 	bl	80008d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <HAL_MspInit+0x6c>)
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <HAL_MspInit+0x6c>)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40010000 	.word	0x40010000

08000480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a37      	ldr	r2, [pc, #220]	; (8000578 <HAL_UART_MspInit+0xf8>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d132      	bne.n	8000506 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004a0:	4b36      	ldr	r3, [pc, #216]	; (800057c <HAL_UART_MspInit+0xfc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a35      	ldr	r2, [pc, #212]	; (800057c <HAL_UART_MspInit+0xfc>)
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b33      	ldr	r3, [pc, #204]	; (800057c <HAL_UART_MspInit+0xfc>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b30      	ldr	r3, [pc, #192]	; (800057c <HAL_UART_MspInit+0xfc>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a2f      	ldr	r2, [pc, #188]	; (800057c <HAL_UART_MspInit+0xfc>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2d      	ldr	r3, [pc, #180]	; (800057c <HAL_UART_MspInit+0xfc>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 80004d0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80004d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0318 	add.w	r3, r7, #24
 80004e2:	4619      	mov	r1, r3
 80004e4:	4826      	ldr	r0, [pc, #152]	; (8000580 <HAL_UART_MspInit+0x100>)
 80004e6:	f000 fa1f 	bl	8000928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	4619      	mov	r1, r3
 80004fe:	4820      	ldr	r0, [pc, #128]	; (8000580 <HAL_UART_MspInit+0x100>)
 8000500:	f000 fa12 	bl	8000928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000504:	e034      	b.n	8000570 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <HAL_UART_MspInit+0x104>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d12f      	bne.n	8000570 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <HAL_UART_MspInit+0xfc>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	4a19      	ldr	r2, [pc, #100]	; (800057c <HAL_UART_MspInit+0xfc>)
 8000516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051a:	61d3      	str	r3, [r2, #28]
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <HAL_UART_MspInit+0xfc>)
 800051e:	69db      	ldr	r3, [r3, #28]
 8000520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <HAL_UART_MspInit+0xfc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a13      	ldr	r2, [pc, #76]	; (800057c <HAL_UART_MspInit+0xfc>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_UART_MspInit+0xfc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000540:	2304      	movs	r3, #4
 8000542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2303      	movs	r3, #3
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0318 	add.w	r3, r7, #24
 8000550:	4619      	mov	r1, r3
 8000552:	480b      	ldr	r0, [pc, #44]	; (8000580 <HAL_UART_MspInit+0x100>)
 8000554:	f000 f9e8 	bl	8000928 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000558:	2308      	movs	r3, #8
 800055a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0318 	add.w	r3, r7, #24
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <HAL_UART_MspInit+0x100>)
 800056c:	f000 f9dc 	bl	8000928 <HAL_GPIO_Init>
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40013800 	.word	0x40013800
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800
 8000584:	40004400 	.word	0x40004400

08000588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000590:	2300      	movs	r3, #0
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000594:	2300      	movs	r3, #0
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000598:	2300      	movs	r3, #0
 800059a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <HAL_InitTick+0xd0>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a2d      	ldr	r2, [pc, #180]	; (8000658 <HAL_InitTick+0xd0>)
 80005a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <HAL_InitTick+0xd0>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005b6:	f107 020c 	add.w	r2, r7, #12
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 ff27 	bl	8001414 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005c6:	f000 ff11 	bl	80013ec <HAL_RCC_GetPCLK2Freq>
 80005ca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ce:	4a23      	ldr	r2, [pc, #140]	; (800065c <HAL_InitTick+0xd4>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	0c9b      	lsrs	r3, r3, #18
 80005d6:	3b01      	subs	r3, #1
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_InitTick+0xd8>)
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <HAL_InitTick+0xdc>)
 80005de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <HAL_InitTick+0xd8>)
 80005e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005e8:	4a1d      	ldr	r2, [pc, #116]	; (8000660 <HAL_InitTick+0xd8>)
 80005ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <HAL_InitTick+0xd8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <HAL_InitTick+0xd8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <HAL_InitTick+0xd8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000600:	4817      	ldr	r0, [pc, #92]	; (8000660 <HAL_InitTick+0xd8>)
 8000602:	f000 ff55 	bl	80014b0 <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800060c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000610:	2b00      	cmp	r3, #0
 8000612:	d11b      	bne.n	800064c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <HAL_InitTick+0xd8>)
 8000616:	f000 ffa3 	bl	8001560 <HAL_TIM_Base_Start_IT>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000624:	2b00      	cmp	r3, #0
 8000626:	d111      	bne.n	800064c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000628:	2019      	movs	r0, #25
 800062a:	f000 f96e 	bl	800090a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d808      	bhi.n	8000646 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	2019      	movs	r0, #25
 800063a:	f000 f94a 	bl	80008d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_InitTick+0xe0>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e002      	b.n	800064c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800064c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000650:	4618      	mov	r0, r3
 8000652:	3730      	adds	r7, #48	; 0x30
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	431bde83 	.word	0x431bde83
 8000660:	200003bc 	.word	0x200003bc
 8000664:	40012c00 	.word	0x40012c00
 8000668:	20000004 	.word	0x20000004

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
	...

08000698 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <TIM1_UP_IRQHandler+0x10>)
 800069e:	f000 ffb1 	bl	8001604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200003bc 	.word	0x200003bc

080006ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b8:	f7ff fff8 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006be:	490c      	ldr	r1, [pc, #48]	; (80006f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006d4:	4c09      	ldr	r4, [pc, #36]	; (80006fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e2:	f002 fd63 	bl	80031ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fd4b 	bl	8000180 <main>
  bx lr
 80006ea:	4770      	bx	lr
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006f4:	08003348 	.word	0x08003348
  ldr r2, =_sbss
 80006f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006fc:	20001294 	.word	0x20001294

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_Init+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <HAL_Init+0x28>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f8d1 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071a:	200f      	movs	r0, #15
 800071c:	f7ff ff34 	bl	8000588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000720:	f7ff fe76 	bl	8000410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	20000404 	.word	0x20000404

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	20000404 	.word	0x20000404

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	; (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <__NVIC_EnableIRQ+0x34>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	; (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	; (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	; 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff4f 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff64 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ffb2 	bl	8000858 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff81 	bl	8000804 <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff57 	bl	80007cc <__NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b08b      	sub	sp, #44	; 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093a:	e169      	b.n	8000c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800093c:	2201      	movs	r2, #1
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	429a      	cmp	r2, r3
 8000956:	f040 8158 	bne.w	8000c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a9a      	ldr	r2, [pc, #616]	; (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d05e      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000964:	4a98      	ldr	r2, [pc, #608]	; (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d875      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800096a:	4a98      	ldr	r2, [pc, #608]	; (8000bcc <HAL_GPIO_Init+0x2a4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d058      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000970:	4a96      	ldr	r2, [pc, #600]	; (8000bcc <HAL_GPIO_Init+0x2a4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d86f      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000976:	4a96      	ldr	r2, [pc, #600]	; (8000bd0 <HAL_GPIO_Init+0x2a8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d052      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 800097c:	4a94      	ldr	r2, [pc, #592]	; (8000bd0 <HAL_GPIO_Init+0x2a8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d869      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000982:	4a94      	ldr	r2, [pc, #592]	; (8000bd4 <HAL_GPIO_Init+0x2ac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d04c      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000988:	4a92      	ldr	r2, [pc, #584]	; (8000bd4 <HAL_GPIO_Init+0x2ac>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d863      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800098e:	4a92      	ldr	r2, [pc, #584]	; (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d046      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000994:	4a90      	ldr	r2, [pc, #576]	; (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d85d      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d82a      	bhi.n	80009f4 <HAL_GPIO_Init+0xcc>
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d859      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <HAL_GPIO_Init+0x80>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	080009fd 	.word	0x080009fd
 80009b0:	08000a0f 	.word	0x08000a0f
 80009b4:	08000a51 	.word	0x08000a51
 80009b8:	08000a57 	.word	0x08000a57
 80009bc:	08000a57 	.word	0x08000a57
 80009c0:	08000a57 	.word	0x08000a57
 80009c4:	08000a57 	.word	0x08000a57
 80009c8:	08000a57 	.word	0x08000a57
 80009cc:	08000a57 	.word	0x08000a57
 80009d0:	08000a57 	.word	0x08000a57
 80009d4:	08000a57 	.word	0x08000a57
 80009d8:	08000a57 	.word	0x08000a57
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a57 	.word	0x08000a57
 80009e4:	08000a57 	.word	0x08000a57
 80009e8:	08000a57 	.word	0x08000a57
 80009ec:	08000a05 	.word	0x08000a05
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	4a79      	ldr	r2, [pc, #484]	; (8000bdc <HAL_GPIO_Init+0x2b4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d013      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009fa:	e02c      	b.n	8000a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e029      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e024      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	3308      	adds	r3, #8
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e01f      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e01a      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d102      	bne.n	8000a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e013      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	611a      	str	r2, [r3, #16]
          break;
 8000a42:	e009      	b.n	8000a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	615a      	str	r2, [r3, #20]
          break;
 8000a4e:	e003      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          break;
 8000a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2bff      	cmp	r3, #255	; 0xff
 8000a5c:	d801      	bhi.n	8000a62 <HAL_GPIO_Init+0x13a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	e001      	b.n	8000a66 <HAL_GPIO_Init+0x13e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2bff      	cmp	r3, #255	; 0xff
 8000a6c:	d802      	bhi.n	8000a74 <HAL_GPIO_Init+0x14c>
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x152>
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	3b08      	subs	r3, #8
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	210f      	movs	r1, #15
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	6a39      	ldr	r1, [r7, #32]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	431a      	orrs	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80b1 	beq.w	8000c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac0:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <HAL_GPIO_Init+0x2c0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d013      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a3f      	ldr	r2, [pc, #252]	; (8000bec <HAL_GPIO_Init+0x2c4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d00d      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d007      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a3d      	ldr	r2, [pc, #244]	; (8000bf4 <HAL_GPIO_Init+0x2cc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d101      	bne.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b26:	492f      	ldr	r1, [pc, #188]	; (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	492c      	ldr	r1, [pc, #176]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4928      	ldr	r1, [pc, #160]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	4922      	ldr	r1, [pc, #136]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	491e      	ldr	r1, [pc, #120]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4918      	ldr	r1, [pc, #96]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4914      	ldr	r1, [pc, #80]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
 8000bc4:	e021      	b.n	8000c0a <HAL_GPIO_Init+0x2e2>
 8000bc6:	bf00      	nop
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10310000 	.word	0x10310000
 8000bd0:	10220000 	.word	0x10220000
 8000bd4:	10210000 	.word	0x10210000
 8000bd8:	10120000 	.word	0x10120000
 8000bdc:	10110000 	.word	0x10110000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000
 8000be8:	40010800 	.word	0x40010800
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	40011400 	.word	0x40011400
 8000bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_GPIO_Init+0x304>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4909      	ldr	r1, [pc, #36]	; (8000c2c <HAL_GPIO_Init+0x304>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f47f ae8e 	bne.w	800093c <HAL_GPIO_Init+0x14>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	372c      	adds	r7, #44	; 0x2c
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e272      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8087 	beq.w	8000d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c50:	4b92      	ldr	r3, [pc, #584]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d00c      	beq.n	8000c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c5c:	4b8f      	ldr	r3, [pc, #572]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d112      	bne.n	8000c8e <HAL_RCC_OscConfig+0x5e>
 8000c68:	4b8c      	ldr	r3, [pc, #560]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c74:	d10b      	bne.n	8000c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c76:	4b89      	ldr	r3, [pc, #548]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d06c      	beq.n	8000d5c <HAL_RCC_OscConfig+0x12c>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d168      	bne.n	8000d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e24c      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c96:	d106      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x76>
 8000c98:	4b80      	ldr	r3, [pc, #512]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a7f      	ldr	r2, [pc, #508]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e02e      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x98>
 8000cae:	4b7b      	ldr	r3, [pc, #492]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a7a      	ldr	r2, [pc, #488]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b78      	ldr	r3, [pc, #480]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a77      	ldr	r2, [pc, #476]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e01d      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0xbc>
 8000cd2:	4b72      	ldr	r3, [pc, #456]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a71      	ldr	r2, [pc, #452]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a6e      	ldr	r2, [pc, #440]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e00b      	b.n	8000d04 <HAL_RCC_OscConfig+0xd4>
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a6a      	ldr	r2, [pc, #424]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a67      	ldr	r2, [pc, #412]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fd22 	bl	8000754 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fd1e 	bl	8000754 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e200      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	4b5d      	ldr	r3, [pc, #372]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0xe4>
 8000d32:	e014      	b.n	8000d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fd0e 	bl	8000754 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fd0a 	bl	8000754 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e1ec      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b53      	ldr	r3, [pc, #332]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x10c>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d063      	beq.n	8000e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00b      	beq.n	8000d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d76:	4b49      	ldr	r3, [pc, #292]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	d11c      	bne.n	8000dbc <HAL_RCC_OscConfig+0x18c>
 8000d82:	4b46      	ldr	r3, [pc, #280]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d116      	bne.n	8000dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	4b43      	ldr	r3, [pc, #268]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d005      	beq.n	8000da6 <HAL_RCC_OscConfig+0x176>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d001      	beq.n	8000da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e1c0      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da6:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	4939      	ldr	r1, [pc, #228]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dba:	e03a      	b.n	8000e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d020      	beq.n	8000e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_RCC_OscConfig+0x270>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff fcc3 	bl	8000754 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd2:	f7ff fcbf 	bl	8000754 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e1a1      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f0      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df0:	4b2a      	ldr	r3, [pc, #168]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4927      	ldr	r1, [pc, #156]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	600b      	str	r3, [r1, #0]
 8000e04:	e015      	b.n	8000e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <HAL_RCC_OscConfig+0x270>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fca2 	bl	8000754 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fc9e 	bl	8000754 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e180      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d03a      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d019      	beq.n	8000e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_RCC_OscConfig+0x274>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fc82 	bl	8000754 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e54:	f7ff fc7e 	bl	8000754 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e160      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fafe 	bl	8001474 <RCC_Delay>
 8000e78:	e01c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_RCC_OscConfig+0x274>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e80:	f7ff fc68 	bl	8000754 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e86:	e00f      	b.n	8000ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc64 	bl	8000754 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d908      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e146      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	42420000 	.word	0x42420000
 8000ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1e9      	bne.n	8000e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80a6 	beq.w	800100e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec6:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d10d      	bne.n	8000eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a87      	ldr	r2, [pc, #540]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eea:	2301      	movs	r3, #1
 8000eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eee:	4b82      	ldr	r3, [pc, #520]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d118      	bne.n	8000f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efa:	4b7f      	ldr	r3, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a7e      	ldr	r2, [pc, #504]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fc25 	bl	8000754 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0e:	f7ff fc21 	bl	8000754 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b64      	cmp	r3, #100	; 0x64
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e103      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f20:	4b75      	ldr	r3, [pc, #468]	; (80010f8 <HAL_RCC_OscConfig+0x4c8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x312>
 8000f34:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4a6e      	ldr	r2, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6213      	str	r3, [r2, #32]
 8000f40:	e02d      	b.n	8000f9e <HAL_RCC_OscConfig+0x36e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x334>
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	4a69      	ldr	r2, [pc, #420]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6213      	str	r3, [r2, #32]
 8000f56:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	4a66      	ldr	r2, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f023 0304 	bic.w	r3, r3, #4
 8000f60:	6213      	str	r3, [r2, #32]
 8000f62:	e01c      	b.n	8000f9e <HAL_RCC_OscConfig+0x36e>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d10c      	bne.n	8000f86 <HAL_RCC_OscConfig+0x356>
 8000f6c:	4b61      	ldr	r3, [pc, #388]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	4a60      	ldr	r2, [pc, #384]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	f043 0304 	orr.w	r3, r3, #4
 8000f76:	6213      	str	r3, [r2, #32]
 8000f78:	4b5e      	ldr	r3, [pc, #376]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a5d      	ldr	r2, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	e00b      	b.n	8000f9e <HAL_RCC_OscConfig+0x36e>
 8000f86:	4b5b      	ldr	r3, [pc, #364]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	4a5a      	ldr	r2, [pc, #360]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6213      	str	r3, [r2, #32]
 8000f92:	4b58      	ldr	r3, [pc, #352]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a57      	ldr	r2, [pc, #348]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 0304 	bic.w	r3, r3, #4
 8000f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d015      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fbd5 	bl	8000754 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fbd1 	bl	8000754 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e0b1      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc4:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0ee      	beq.n	8000fae <HAL_RCC_OscConfig+0x37e>
 8000fd0:	e014      	b.n	8000ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd2:	f7ff fbbf 	bl	8000754 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	e00a      	b.n	8000ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fda:	f7ff fbbb 	bl	8000754 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e09b      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ee      	bne.n	8000fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ffc:	7dfb      	ldrb	r3, [r7, #23]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d105      	bne.n	800100e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a3b      	ldr	r2, [pc, #236]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8087 	beq.w	8001126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b08      	cmp	r3, #8
 8001022:	d061      	beq.n	80010e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d146      	bne.n	80010ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102c:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_RCC_OscConfig+0x4cc>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fb8f 	bl	8000754 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fb8b 	bl	8000754 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e06d      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001060:	d108      	bne.n	8001074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	4921      	ldr	r1, [pc, #132]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a19      	ldr	r1, [r3, #32]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	430b      	orrs	r3, r1
 8001086:	491b      	ldr	r1, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_RCC_OscConfig+0x4cc>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fb5f 	bl	8000754 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff fb5b 	bl	8000754 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e03d      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x46a>
 80010b8:	e035      	b.n	8001126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_RCC_OscConfig+0x4cc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fb48 	bl	8000754 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff fb44 	bl	8000754 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e026      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x498>
 80010e6:	e01e      	b.n	8001126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e019      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40007000 	.word	0x40007000
 80010fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_OscConfig+0x500>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	429a      	cmp	r2, r3
 8001112:	d106      	bne.n	8001122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111e:	429a      	cmp	r2, r3
 8001120:	d001      	beq.n	8001126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0d0      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4b6a      	ldr	r3, [pc, #424]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d910      	bls.n	8001178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 0207 	bic.w	r2, r3, #7
 800115e:	4965      	ldr	r1, [pc, #404]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	4b63      	ldr	r3, [pc, #396]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d001      	beq.n	8001178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0b8      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d005      	beq.n	800119c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001190:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800119a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4a52      	ldr	r2, [pc, #328]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b4:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	494d      	ldr	r1, [pc, #308]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d040      	beq.n	8001254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d107      	bne.n	80011ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d115      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e07f      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e073      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e06b      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f023 0203 	bic.w	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4936      	ldr	r1, [pc, #216]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001224:	f7ff fa96 	bl	8000754 <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	e00a      	b.n	8001242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122c:	f7ff fa92 	bl	8000754 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e053      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 020c 	and.w	r2, r3, #12
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	d1eb      	bne.n	800122c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d210      	bcs.n	8001284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 0207 	bic.w	r2, r3, #7
 800126a:	4922      	ldr	r1, [pc, #136]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e032      	b.n	80012ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001290:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	4916      	ldr	r1, [pc, #88]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d009      	beq.n	80012c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	490e      	ldr	r1, [pc, #56]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c2:	f000 f821 	bl	8001308 <HAL_RCC_GetSysClockFreq>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	490a      	ldr	r1, [pc, #40]	; (80012fc <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1d0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f950 	bl	8000588 <HAL_InitTick>

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40022000 	.word	0x40022000
 80012f8:	40021000 	.word	0x40021000
 80012fc:	08003314 	.word	0x08003314
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <HAL_RCC_GetSysClockFreq+0x94>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b04      	cmp	r3, #4
 8001330:	d002      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x30>
 8001332:	2b08      	cmp	r3, #8
 8001334:	d003      	beq.n	800133e <HAL_RCC_GetSysClockFreq+0x36>
 8001336:	e027      	b.n	8001388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800133a:	613b      	str	r3, [r7, #16]
      break;
 800133c:	e027      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	0c9b      	lsrs	r3, r3, #18
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001348:	5cd3      	ldrb	r3, [r2, r3]
 800134a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_RCC_GetSysClockFreq+0x94>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	0c5b      	lsrs	r3, r3, #17
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800136a:	fb03 f202 	mul.w	r2, r3, r2
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e004      	b.n	8001382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	613b      	str	r3, [r7, #16]
      break;
 8001386:	e002      	b.n	800138e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800138a:	613b      	str	r3, [r7, #16]
      break;
 800138c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800138e:	693b      	ldr	r3, [r7, #16]
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	007a1200 	.word	0x007a1200
 80013a4:	0800332c 	.word	0x0800332c
 80013a8:	0800333c 	.word	0x0800333c
 80013ac:	003d0900 	.word	0x003d0900

080013b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b4:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000000 	.word	0x20000000

080013c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c8:	f7ff fff2 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013cc:	4602      	mov	r2, r0
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	4903      	ldr	r1, [pc, #12]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013da:	5ccb      	ldrb	r3, [r1, r3]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	08003324 	.word	0x08003324

080013ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	0adb      	lsrs	r3, r3, #11
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4903      	ldr	r1, [pc, #12]	; (8001410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	08003324 	.word	0x08003324

08001414 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	220f      	movs	r2, #15
 8001422:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_RCC_GetClockConfig+0x58>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_RCC_GetClockConfig+0x58>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_GetClockConfig+0x58>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_RCC_GetClockConfig+0x58>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_GetClockConfig+0x5c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0207 	and.w	r2, r3, #7
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000
 8001470:	40022000 	.word	0x40022000

08001474 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <RCC_Delay+0x34>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <RCC_Delay+0x38>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	0a5b      	lsrs	r3, r3, #9
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	fb02 f303 	mul.w	r3, r2, r3
 800148e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001490:	bf00      	nop
  }
  while (Delay --);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	60fa      	str	r2, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <RCC_Delay+0x1c>
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000
 80014ac:	10624dd3 	.word	0x10624dd3

080014b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e041      	b.n	8001546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f839 	bl	800154e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2202      	movs	r2, #2
 80014e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3304      	adds	r3, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f000 f9b4 	bl	800185c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d001      	beq.n	8001578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e03a      	b.n	80015ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_TIM_Base_Start_IT+0x98>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00e      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x58>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a2:	d009      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x58>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_TIM_Base_Start_IT+0x9c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d004      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x58>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <HAL_TIM_Base_Start_IT+0xa0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d111      	bne.n	80015dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d010      	beq.n	80015ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015da:	e007      	b.n	80015ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40012c00 	.word	0x40012c00
 80015fc:	40000400 	.word	0x40000400
 8001600:	40000800 	.word	0x40000800

08001604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d122      	bne.n	8001660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b02      	cmp	r3, #2
 8001626:	d11b      	bne.n	8001660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f06f 0202 	mvn.w	r2, #2
 8001630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f8ed 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 800164c:	e005      	b.n	800165a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8e0 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f8ef 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b04      	cmp	r3, #4
 800166c:	d122      	bne.n	80016b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b04      	cmp	r3, #4
 800167a:	d11b      	bne.n	80016b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 0204 	mvn.w	r2, #4
 8001684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2202      	movs	r2, #2
 800168a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8c3 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 80016a0:	e005      	b.n	80016ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f8b6 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f8c5 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d122      	bne.n	8001708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d11b      	bne.n	8001708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0208 	mvn.w	r2, #8
 80016d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2204      	movs	r2, #4
 80016de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f899 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 80016f4:	e005      	b.n	8001702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f88c 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f89b 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	2b10      	cmp	r3, #16
 8001714:	d122      	bne.n	800175c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	2b10      	cmp	r3, #16
 8001722:	d11b      	bne.n	800175c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0210 	mvn.w	r2, #16
 800172c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2208      	movs	r2, #8
 8001732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f86f 	bl	8001826 <HAL_TIM_IC_CaptureCallback>
 8001748:	e005      	b.n	8001756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f862 	bl	8001814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 f871 	bl	8001838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10e      	bne.n	8001788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d107      	bne.n	8001788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0201 	mvn.w	r2, #1
 8001780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fe2c 	bl	80003e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	2b80      	cmp	r3, #128	; 0x80
 8001794:	d10e      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a0:	2b80      	cmp	r3, #128	; 0x80
 80017a2:	d107      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80017ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f8bf 	bl	8001932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017be:	2b40      	cmp	r3, #64	; 0x40
 80017c0:	d10e      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017cc:	2b40      	cmp	r3, #64	; 0x40
 80017ce:	d107      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f835 	bl	800184a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d10e      	bne.n	800180c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0320 	and.w	r3, r3, #32
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	d107      	bne.n	800180c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0220 	mvn.w	r2, #32
 8001804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f88a 	bl	8001920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a29      	ldr	r2, [pc, #164]	; (8001914 <TIM_Base_SetConfig+0xb8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00b      	beq.n	800188c <TIM_Base_SetConfig+0x30>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800187a:	d007      	beq.n	800188c <TIM_Base_SetConfig+0x30>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a26      	ldr	r2, [pc, #152]	; (8001918 <TIM_Base_SetConfig+0xbc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d003      	beq.n	800188c <TIM_Base_SetConfig+0x30>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a25      	ldr	r2, [pc, #148]	; (800191c <TIM_Base_SetConfig+0xc0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <TIM_Base_SetConfig+0xb8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00b      	beq.n	80018be <TIM_Base_SetConfig+0x62>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ac:	d007      	beq.n	80018be <TIM_Base_SetConfig+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <TIM_Base_SetConfig+0xbc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d003      	beq.n	80018be <TIM_Base_SetConfig+0x62>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <TIM_Base_SetConfig+0xc0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <TIM_Base_SetConfig+0xb8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d103      	bne.n	8001904 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	615a      	str	r2, [r3, #20]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40000400 	.word	0x40000400
 800191c:	40000800 	.word	0x40000800

08001920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e042      	b.n	80019dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d106      	bne.n	8001970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fd88 	bl	8000480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2224      	movs	r2, #36	; 0x24
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f91d 	bl	8001bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800199c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695a      	ldr	r2, [r3, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d16d      	bne.n	8001ae0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_UART_Transmit+0x2c>
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e066      	b.n	8001ae2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2221      	movs	r2, #33	; 0x21
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a22:	f7fe fe97 	bl	8000754 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	88fa      	ldrh	r2, [r7, #6]
 8001a2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3c:	d108      	bne.n	8001a50 <HAL_UART_Transmit+0x6c>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	e003      	b.n	8001a58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a58:	e02a      	b.n	8001ab0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2200      	movs	r2, #0
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f840 	bl	8001aea <UART_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e036      	b.n	8001ae2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10b      	bne.n	8001a92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	e007      	b.n	8001aa2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1cf      	bne.n	8001a5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f810 	bl	8001aea <UART_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e006      	b.n	8001ae2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b090      	sub	sp, #64	; 0x40
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001afa:	e050      	b.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b02:	d04c      	beq.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	f7fe fe23 	bl	8000754 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d241      	bcs.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	330c      	adds	r3, #12
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b24:	e853 3f00 	ldrex	r3, [r3]
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	330c      	adds	r3, #12
 8001b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b42:	e841 2300 	strex	r3, r2, [r1]
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e5      	bne.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3314      	adds	r3, #20
 8001b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	e853 3f00 	ldrex	r3, [r3]
 8001b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b6e:	623a      	str	r2, [r7, #32]
 8001b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b72:	69f9      	ldr	r1, [r7, #28]
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	e841 2300 	strex	r3, r2, [r1]
 8001b7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e5      	bne.n	8001b4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e00f      	b.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	bf0c      	ite	eq
 8001bae:	2301      	moveq	r3, #1
 8001bb0:	2300      	movne	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d09f      	beq.n	8001afc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3740      	adds	r7, #64	; 0x40
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c02:	f023 030c 	bic.w	r3, r3, #12
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <UART_SetConfig+0x114>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d103      	bne.n	8001c38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c30:	f7ff fbdc 	bl	80013ec <HAL_RCC_GetPCLK2Freq>
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	e002      	b.n	8001c3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c38:	f7ff fbc4 	bl	80013c4 <HAL_RCC_GetPCLK1Freq>
 8001c3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009a      	lsls	r2, r3, #2
 8001c48:	441a      	add	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <UART_SetConfig+0x118>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	0119      	lsls	r1, r3, #4
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	009a      	lsls	r2, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <UART_SetConfig+0x118>)
 8001c76:	fba3 0302 	umull	r0, r3, r3, r2
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2064      	movs	r0, #100	; 0x64
 8001c7e:	fb00 f303 	mul.w	r3, r0, r3
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	3332      	adds	r3, #50	; 0x32
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <UART_SetConfig+0x118>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	4419      	add	r1, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	441a      	add	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <UART_SetConfig+0x118>)
 8001cae:	fba3 0302 	umull	r0, r3, r3, r2
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	fb00 f303 	mul.w	r3, r0, r3
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	011b      	lsls	r3, r3, #4
 8001cbe:	3332      	adds	r3, #50	; 0x32
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <UART_SetConfig+0x118>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	440a      	add	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	51eb851f 	.word	0x51eb851f

08001ce4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf6:	2b84      	cmp	r3, #132	; 0x84
 8001cf8:	d005      	beq.n	8001d06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001cfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	3303      	adds	r3, #3
 8001d04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001d16:	f000 fae7 	bl	80022e8 <vTaskStartScheduler>
  
  return osOK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d020      	beq.n	8001d74 <osThreadCreate+0x54>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d01c      	beq.n	8001d74 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685c      	ldr	r4, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691e      	ldr	r6, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ffc9 	bl	8001ce4 <makeFreeRtosPriority>
 8001d52:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d5c:	9202      	str	r2, [sp, #8]
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	9100      	str	r1, [sp, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	4632      	mov	r2, r6
 8001d66:	4629      	mov	r1, r5
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f000 f8e8 	bl	8001f3e <xTaskCreateStatic>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e01c      	b.n	8001dae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685c      	ldr	r4, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d80:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ffab 	bl	8001ce4 <makeFreeRtosPriority>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	9200      	str	r2, [sp, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f000 f929 	bl	8001ff6 <xTaskCreate>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001db8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <osDelay+0x16>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	e000      	b.n	8001dd0 <osDelay+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fa55 	bl	8002280 <vTaskDelay>
  
  return osOK;
 8001dd6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f103 0208 	add.w	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 0208 	add.w	r2, r3, #8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f103 0208 	add.w	r2, r3, #8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e92:	d103      	bne.n	8001e9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	e00c      	b.n	8001eb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3308      	adds	r3, #8
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e002      	b.n	8001eaa <vListInsert+0x2e>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d2f6      	bcs.n	8001ea4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6892      	ldr	r2, [r2, #8]
 8001f02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6852      	ldr	r2, [r2, #4]
 8001f0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d103      	bne.n	8001f20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b08e      	sub	sp, #56	; 0x38
 8001f42:	af04      	add	r7, sp, #16
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10a      	bne.n	8001f68 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f64:	bf00      	nop
 8001f66:	e7fe      	b.n	8001f66 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10a      	bne.n	8001f84 <xTaskCreateStatic+0x46>
	__asm volatile
 8001f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	61fb      	str	r3, [r7, #28]
}
 8001f80:	bf00      	nop
 8001f82:	e7fe      	b.n	8001f82 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001f84:	23a0      	movs	r3, #160	; 0xa0
 8001f86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f8c:	d00a      	beq.n	8001fa4 <xTaskCreateStatic+0x66>
	__asm volatile
 8001f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	61bb      	str	r3, [r7, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	e7fe      	b.n	8001fa2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01e      	beq.n	8001fe8 <xTaskCreateStatic+0xaa>
 8001faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9303      	str	r3, [sp, #12]
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f850 	bl	8002080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fe2:	f000 f8e3 	bl	80021ac <prvAddNewTaskToReadyList>
 8001fe6:	e001      	b.n	8001fec <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001fec:	697b      	ldr	r3, [r7, #20]
	}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b08c      	sub	sp, #48	; 0x30
 8001ffa:	af04      	add	r7, sp, #16
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fe98 	bl	8002d40 <pvPortMalloc>
 8002010:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002018:	20a0      	movs	r0, #160	; 0xa0
 800201a:	f000 fe91 	bl	8002d40 <pvPortMalloc>
 800201e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
 800202c:	e005      	b.n	800203a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800202e:	6978      	ldr	r0, [r7, #20]
 8002030:	f000 ff4a 	bl	8002ec8 <vPortFree>
 8002034:	e001      	b.n	800203a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d017      	beq.n	8002070 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	2300      	movs	r3, #0
 800204c:	9303      	str	r3, [sp, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f80e 	bl	8002080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002064:	69f8      	ldr	r0, [r7, #28]
 8002066:	f000 f8a1 	bl	80021ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	e002      	b.n	8002076 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
 8002074:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002076:	69bb      	ldr	r3, [r7, #24]
	}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002098:	3b01      	subs	r3, #1
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	f023 0307 	bic.w	r3, r3, #7
 80020a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	617b      	str	r3, [r7, #20]
}
 80020c4:	bf00      	nop
 80020c6:	e7fe      	b.n	80020c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	e012      	b.n	80020f4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	4413      	add	r3, r2
 80020d4:	7819      	ldrb	r1, [r3, #0]
 80020d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	4413      	add	r3, r2
 80020dc:	3334      	adds	r3, #52	; 0x34
 80020de:	460a      	mov	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3301      	adds	r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	d9e9      	bls.n	80020ce <prvInitialiseNewTask+0x4e>
 80020fa:	e000      	b.n	80020fe <prvInitialiseNewTask+0x7e>
		{
			break;
 80020fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	2b06      	cmp	r3, #6
 800210a:	d901      	bls.n	8002110 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800210c:	2306      	movs	r3, #6
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	2200      	movs	r2, #0
 8002120:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	3304      	adds	r3, #4
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe79 	bl	8001e1e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	3318      	adds	r3, #24
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fe74 	bl	8001e1e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800213a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800213c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213e:	f1c3 0207 	rsb	r2, r3, #7
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800214c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214e:	2200      	movs	r2, #0
 8002150:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002156:	2200      	movs	r2, #0
 8002158:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800215c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215e:	334c      	adds	r3, #76	; 0x4c
 8002160:	224c      	movs	r2, #76	; 0x4c
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f000 ffc3 	bl	80030f0 <memset>
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <prvInitialiseNewTask+0x120>)
 800216e:	651a      	str	r2, [r3, #80]	; 0x50
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <prvInitialiseNewTask+0x124>)
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <prvInitialiseNewTask+0x128>)
 800217a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	68f9      	ldr	r1, [r7, #12]
 8002180:	69b8      	ldr	r0, [r7, #24]
 8002182:	f000 fc29 	bl	80029d8 <pxPortInitialiseStack>
 8002186:	4602      	mov	r2, r0
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002196:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20001154 	.word	0x20001154
 80021a4:	200011bc 	.word	0x200011bc
 80021a8:	20001224 	.word	0x20001224

080021ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80021b4:	f000 fd02 	bl	8002bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <prvAddNewTaskToReadyList+0xb8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a29      	ldr	r2, [pc, #164]	; (8002264 <prvAddNewTaskToReadyList+0xb8>)
 80021c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <prvAddNewTaskToReadyList+0xbc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80021ca:	4a27      	ldr	r2, [pc, #156]	; (8002268 <prvAddNewTaskToReadyList+0xbc>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <prvAddNewTaskToReadyList+0xb8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d110      	bne.n	80021fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80021d8:	f000 fad2 	bl	8002780 <prvInitialiseTaskLists>
 80021dc:	e00d      	b.n	80021fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <prvAddNewTaskToReadyList+0xc0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <prvAddNewTaskToReadyList+0xbc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d802      	bhi.n	80021fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80021f4:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <prvAddNewTaskToReadyList+0xbc>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <prvAddNewTaskToReadyList+0xc4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <prvAddNewTaskToReadyList+0xc4>)
 8002202:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	2201      	movs	r2, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <prvAddNewTaskToReadyList+0xc8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <prvAddNewTaskToReadyList+0xc8>)
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <prvAddNewTaskToReadyList+0xcc>)
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4610      	mov	r0, r2
 800222e:	f7ff fe02 	bl	8001e36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002232:	f000 fcf3 	bl	8002c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <prvAddNewTaskToReadyList+0xc0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00e      	beq.n	800225c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <prvAddNewTaskToReadyList+0xbc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	429a      	cmp	r2, r3
 800224a:	d207      	bcs.n	800225c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <prvAddNewTaskToReadyList+0xd0>)
 800224e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000508 	.word	0x20000508
 8002268:	20000408 	.word	0x20000408
 800226c:	20000514 	.word	0x20000514
 8002270:	20000524 	.word	0x20000524
 8002274:	20000510 	.word	0x20000510
 8002278:	2000040c 	.word	0x2000040c
 800227c:	e000ed04 	.word	0xe000ed04

08002280 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d017      	beq.n	80022c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <vTaskDelay+0x60>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <vTaskDelay+0x30>
	__asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	60bb      	str	r3, [r7, #8]
}
 80022ac:	bf00      	nop
 80022ae:	e7fe      	b.n	80022ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80022b0:	f000 f884 	bl	80023bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80022b4:	2100      	movs	r1, #0
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fb28 	bl	800290c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80022bc:	f000 f88c 	bl	80023d8 <xTaskResumeAll>
 80022c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d107      	bne.n	80022d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <vTaskDelay+0x64>)
 80022ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000530 	.word	0x20000530
 80022e4:	e000ed04 	.word	0xe000ed04

080022e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80022f6:	463a      	mov	r2, r7
 80022f8:	1d39      	adds	r1, r7, #4
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff26 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	460a      	mov	r2, r1
 8002316:	4921      	ldr	r1, [pc, #132]	; (800239c <vTaskStartScheduler+0xb4>)
 8002318:	4821      	ldr	r0, [pc, #132]	; (80023a0 <vTaskStartScheduler+0xb8>)
 800231a:	f7ff fe10 	bl	8001f3e <xTaskCreateStatic>
 800231e:	4603      	mov	r3, r0
 8002320:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <vTaskStartScheduler+0xbc>)
 8002322:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <vTaskStartScheduler+0xbc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e001      	b.n	8002336 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d11b      	bne.n	8002374 <vTaskStartScheduler+0x8c>
	__asm volatile
 800233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002340:	f383 8811 	msr	BASEPRI, r3
 8002344:	f3bf 8f6f 	isb	sy
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	613b      	str	r3, [r7, #16]
}
 800234e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <vTaskStartScheduler+0xc0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	334c      	adds	r3, #76	; 0x4c
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <vTaskStartScheduler+0xc4>)
 8002358:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <vTaskStartScheduler+0xc8>)
 800235c:	f04f 32ff 	mov.w	r2, #4294967295
 8002360:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <vTaskStartScheduler+0xcc>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <vTaskStartScheduler+0xd0>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800236e:	f000 fbb3 	bl	8002ad8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002372:	e00e      	b.n	8002392 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d10a      	bne.n	8002392 <vTaskStartScheduler+0xaa>
	__asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	60fb      	str	r3, [r7, #12]
}
 800238e:	bf00      	nop
 8002390:	e7fe      	b.n	8002390 <vTaskStartScheduler+0xa8>
}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800330c 	.word	0x0800330c
 80023a0:	08002751 	.word	0x08002751
 80023a4:	2000052c 	.word	0x2000052c
 80023a8:	20000408 	.word	0x20000408
 80023ac:	2000005c 	.word	0x2000005c
 80023b0:	20000528 	.word	0x20000528
 80023b4:	20000514 	.word	0x20000514
 80023b8:	2000050c 	.word	0x2000050c

080023bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <vTaskSuspendAll+0x18>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <vTaskSuspendAll+0x18>)
 80023c8:	6013      	str	r3, [r2, #0]
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000530 	.word	0x20000530

080023d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <xTaskResumeAll+0x114>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <xTaskResumeAll+0x2c>
	__asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	603b      	str	r3, [r7, #0]
}
 8002400:	bf00      	nop
 8002402:	e7fe      	b.n	8002402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002404:	f000 fbda 	bl	8002bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <xTaskResumeAll+0x114>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <xTaskResumeAll+0x114>)
 8002410:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <xTaskResumeAll+0x114>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d161      	bne.n	80024de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <xTaskResumeAll+0x118>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d05d      	beq.n	80024de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002422:	e02e      	b.n	8002482 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002424:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <xTaskResumeAll+0x11c>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3318      	adds	r3, #24
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fd5b 	bl	8001eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3304      	adds	r3, #4
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fd56 	bl	8001eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2201      	movs	r2, #1
 8002446:	409a      	lsls	r2, r3
 8002448:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <xTaskResumeAll+0x120>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <xTaskResumeAll+0x120>)
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4a27      	ldr	r2, [pc, #156]	; (80024fc <xTaskResumeAll+0x124>)
 8002460:	441a      	add	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f7ff fce4 	bl	8001e36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <xTaskResumeAll+0x128>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <xTaskResumeAll+0x12c>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002482:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <xTaskResumeAll+0x11c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1cc      	bne.n	8002424 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002490:	f000 fa18 	bl	80028c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <xTaskResumeAll+0x130>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d010      	beq.n	80024c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80024a0:	f000 f836 	bl	8002510 <xTaskIncrementTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <xTaskResumeAll+0x12c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f1      	bne.n	80024a0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <xTaskResumeAll+0x130>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <xTaskResumeAll+0x12c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <xTaskResumeAll+0x134>)
 80024d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80024de:	f000 fb9d 	bl	8002c1c <vPortExitCritical>

	return xAlreadyYielded;
 80024e2:	68bb      	ldr	r3, [r7, #8]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000530 	.word	0x20000530
 80024f0:	20000508 	.word	0x20000508
 80024f4:	200004c8 	.word	0x200004c8
 80024f8:	20000510 	.word	0x20000510
 80024fc:	2000040c 	.word	0x2000040c
 8002500:	20000408 	.word	0x20000408
 8002504:	2000051c 	.word	0x2000051c
 8002508:	20000518 	.word	0x20000518
 800250c:	e000ed04 	.word	0xe000ed04

08002510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800251a:	4b51      	ldr	r3, [pc, #324]	; (8002660 <xTaskIncrementTick+0x150>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 808d 	bne.w	800263e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <xTaskIncrementTick+0x154>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800252c:	4a4d      	ldr	r2, [pc, #308]	; (8002664 <xTaskIncrementTick+0x154>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d120      	bne.n	800257a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002538:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <xTaskIncrementTick+0x158>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <xTaskIncrementTick+0x48>
	__asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	603b      	str	r3, [r7, #0]
}
 8002554:	bf00      	nop
 8002556:	e7fe      	b.n	8002556 <xTaskIncrementTick+0x46>
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <xTaskIncrementTick+0x158>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b43      	ldr	r3, [pc, #268]	; (800266c <xTaskIncrementTick+0x15c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a41      	ldr	r2, [pc, #260]	; (8002668 <xTaskIncrementTick+0x158>)
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4a41      	ldr	r2, [pc, #260]	; (800266c <xTaskIncrementTick+0x15c>)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <xTaskIncrementTick+0x160>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <xTaskIncrementTick+0x160>)
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	f000 f9a5 	bl	80028c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <xTaskIncrementTick+0x164>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d34d      	bcc.n	8002620 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002584:	4b38      	ldr	r3, [pc, #224]	; (8002668 <xTaskIncrementTick+0x158>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <xTaskIncrementTick+0x82>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <xTaskIncrementTick+0x84>
 8002592:	2300      	movs	r3, #0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002598:	4b36      	ldr	r3, [pc, #216]	; (8002674 <xTaskIncrementTick+0x164>)
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	601a      	str	r2, [r3, #0]
					break;
 80025a0:	e03e      	b.n	8002620 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <xTaskIncrementTick+0x158>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d203      	bcs.n	80025c2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80025ba:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <xTaskIncrementTick+0x164>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6013      	str	r3, [r2, #0]
						break;
 80025c0:	e02e      	b.n	8002620 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc90 	bl	8001eec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3318      	adds	r3, #24
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fc87 	bl	8001eec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	2201      	movs	r2, #1
 80025e4:	409a      	lsls	r2, r3
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <xTaskIncrementTick+0x168>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <xTaskIncrementTick+0x168>)
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <xTaskIncrementTick+0x16c>)
 80025fe:	441a      	add	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3304      	adds	r3, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7ff fc15 	bl	8001e36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <xTaskIncrementTick+0x170>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	429a      	cmp	r2, r3
 8002618:	d3b4      	bcc.n	8002584 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800261a:	2301      	movs	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800261e:	e7b1      	b.n	8002584 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <xTaskIncrementTick+0x170>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002626:	4915      	ldr	r1, [pc, #84]	; (800267c <xTaskIncrementTick+0x16c>)
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d907      	bls.n	8002648 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002638:	2301      	movs	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	e004      	b.n	8002648 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <xTaskIncrementTick+0x174>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <xTaskIncrementTick+0x174>)
 8002646:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <xTaskIncrementTick+0x178>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002650:	2301      	movs	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002654:	697b      	ldr	r3, [r7, #20]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000530 	.word	0x20000530
 8002664:	2000050c 	.word	0x2000050c
 8002668:	200004c0 	.word	0x200004c0
 800266c:	200004c4 	.word	0x200004c4
 8002670:	20000520 	.word	0x20000520
 8002674:	20000528 	.word	0x20000528
 8002678:	20000510 	.word	0x20000510
 800267c:	2000040c 	.word	0x2000040c
 8002680:	20000408 	.word	0x20000408
 8002684:	20000518 	.word	0x20000518
 8002688:	2000051c 	.word	0x2000051c

0800268c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <vTaskSwitchContext+0xac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800269a:	4b28      	ldr	r3, [pc, #160]	; (800273c <vTaskSwitchContext+0xb0>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80026a0:	e044      	b.n	800272c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80026a2:	4b26      	ldr	r3, [pc, #152]	; (800273c <vTaskSwitchContext+0xb0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <vTaskSwitchContext+0xb4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	f1c3 031f 	rsb	r3, r3, #31
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	4921      	ldr	r1, [pc, #132]	; (8002744 <vTaskSwitchContext+0xb8>)
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	607b      	str	r3, [r7, #4]
}
 80026e4:	bf00      	nop
 80026e6:	e7fe      	b.n	80026e6 <vTaskSwitchContext+0x5a>
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <vTaskSwitchContext+0xb8>)
 80026f4:	4413      	add	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	3308      	adds	r3, #8
 800270a:	429a      	cmp	r2, r3
 800270c:	d104      	bne.n	8002718 <vTaskSwitchContext+0x8c>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <vTaskSwitchContext+0xbc>)
 8002720:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <vTaskSwitchContext+0xbc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	334c      	adds	r3, #76	; 0x4c
 8002728:	4a08      	ldr	r2, [pc, #32]	; (800274c <vTaskSwitchContext+0xc0>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000530 	.word	0x20000530
 800273c:	2000051c 	.word	0x2000051c
 8002740:	20000510 	.word	0x20000510
 8002744:	2000040c 	.word	0x2000040c
 8002748:	20000408 	.word	0x20000408
 800274c:	2000005c 	.word	0x2000005c

08002750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002758:	f000 f852 	bl	8002800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <prvIdleTask+0x28>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d9f9      	bls.n	8002758 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <prvIdleTask+0x2c>)
 8002766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002774:	e7f0      	b.n	8002758 <prvIdleTask+0x8>
 8002776:	bf00      	nop
 8002778:	2000040c 	.word	0x2000040c
 800277c:	e000ed04 	.word	0xe000ed04

08002780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	e00c      	b.n	80027a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <prvInitialiseTaskLists+0x60>)
 8002798:	4413      	add	r3, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fb20 	bl	8001de0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3301      	adds	r3, #1
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b06      	cmp	r3, #6
 80027aa:	d9ef      	bls.n	800278c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <prvInitialiseTaskLists+0x64>)
 80027ae:	f7ff fb17 	bl	8001de0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <prvInitialiseTaskLists+0x68>)
 80027b4:	f7ff fb14 	bl	8001de0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <prvInitialiseTaskLists+0x6c>)
 80027ba:	f7ff fb11 	bl	8001de0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80027be:	480c      	ldr	r0, [pc, #48]	; (80027f0 <prvInitialiseTaskLists+0x70>)
 80027c0:	f7ff fb0e 	bl	8001de0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80027c4:	480b      	ldr	r0, [pc, #44]	; (80027f4 <prvInitialiseTaskLists+0x74>)
 80027c6:	f7ff fb0b 	bl	8001de0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <prvInitialiseTaskLists+0x78>)
 80027cc:	4a05      	ldr	r2, [pc, #20]	; (80027e4 <prvInitialiseTaskLists+0x64>)
 80027ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <prvInitialiseTaskLists+0x7c>)
 80027d2:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <prvInitialiseTaskLists+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000040c 	.word	0x2000040c
 80027e4:	20000498 	.word	0x20000498
 80027e8:	200004ac 	.word	0x200004ac
 80027ec:	200004c8 	.word	0x200004c8
 80027f0:	200004dc 	.word	0x200004dc
 80027f4:	200004f4 	.word	0x200004f4
 80027f8:	200004c0 	.word	0x200004c0
 80027fc:	200004c4 	.word	0x200004c4

08002800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002806:	e019      	b.n	800283c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002808:	f000 f9d8 	bl	8002bbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <prvCheckTasksWaitingTermination+0x50>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fb67 	bl	8001eec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <prvCheckTasksWaitingTermination+0x54>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3b01      	subs	r3, #1
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <prvCheckTasksWaitingTermination+0x54>)
 8002826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <prvCheckTasksWaitingTermination+0x58>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3b01      	subs	r3, #1
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <prvCheckTasksWaitingTermination+0x58>)
 8002830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002832:	f000 f9f3 	bl	8002c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f810 	bl	800285c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <prvCheckTasksWaitingTermination+0x58>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e1      	bne.n	8002808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200004dc 	.word	0x200004dc
 8002854:	20000508 	.word	0x20000508
 8002858:	200004f0 	.word	0x200004f0

0800285c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	334c      	adds	r3, #76	; 0x4c
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fc49 	bl	8003100 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fb23 	bl	8002ec8 <vPortFree>
				vPortFree( pxTCB );
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fb20 	bl	8002ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002888:	e018      	b.n	80028bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002890:	2b01      	cmp	r3, #1
 8002892:	d103      	bne.n	800289c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fb17 	bl	8002ec8 <vPortFree>
	}
 800289a:	e00f      	b.n	80028bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d00a      	beq.n	80028bc <prvDeleteTCB+0x60>
	__asm volatile
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	60fb      	str	r3, [r7, #12]
}
 80028b8:	bf00      	nop
 80028ba:	e7fe      	b.n	80028ba <prvDeleteTCB+0x5e>
	}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <prvResetNextTaskUnblockTime+0x40>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <prvResetNextTaskUnblockTime+0x14>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <prvResetNextTaskUnblockTime+0x16>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <prvResetNextTaskUnblockTime+0x44>)
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80028e6:	e008      	b.n	80028fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <prvResetNextTaskUnblockTime+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <prvResetNextTaskUnblockTime+0x44>)
 80028f8:	6013      	str	r3, [r2, #0]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	200004c0 	.word	0x200004c0
 8002908:	20000528 	.word	0x20000528

0800290c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002916:	4b29      	ldr	r3, [pc, #164]	; (80029bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fae2 	bl	8001eec <uxListRemove>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	2201      	movs	r2, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4013      	ands	r3, r2
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002944:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d10a      	bne.n	8002964 <prvAddCurrentTaskToDelayedList+0x58>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3304      	adds	r3, #4
 800295a:	4619      	mov	r1, r3
 800295c:	481a      	ldr	r0, [pc, #104]	; (80029c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800295e:	f7ff fa6a 	bl	8001e36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002962:	e026      	b.n	80029b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800296c:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d209      	bcs.n	8002990 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800297c:	4b13      	ldr	r3, [pc, #76]	; (80029cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3304      	adds	r3, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4610      	mov	r0, r2
 800298a:	f7ff fa77 	bl	8001e7c <vListInsert>
}
 800298e:	e010      	b.n	80029b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3304      	adds	r3, #4
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7ff fa6d 	bl	8001e7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d202      	bcs.n	80029b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80029ac:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	2000050c 	.word	0x2000050c
 80029c0:	20000408 	.word	0x20000408
 80029c4:	20000510 	.word	0x20000510
 80029c8:	200004f4 	.word	0x200004f4
 80029cc:	200004c4 	.word	0x200004c4
 80029d0:	200004c0 	.word	0x200004c0
 80029d4:	20000528 	.word	0x20000528

080029d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b04      	subs	r3, #4
 80029e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b04      	subs	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b04      	subs	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <pxPortInitialiseStack+0x54>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3b14      	subs	r3, #20
 8002a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b20      	subs	r3, #32
 8002a1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a20:	68fb      	ldr	r3, [r7, #12]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	08002a31 	.word	0x08002a31

08002a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <prvTaskExitError+0x54>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d00a      	beq.n	8002a5a <prvTaskExitError+0x2a>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	60fb      	str	r3, [r7, #12]
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <prvTaskExitError+0x28>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60bb      	str	r3, [r7, #8]
}
 8002a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002a6e:	bf00      	nop
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0fc      	beq.n	8002a70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2000000c 	.word	0x2000000c
	...

08002a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <pxCurrentTCBConst2>)
 8002a92:	6819      	ldr	r1, [r3, #0]
 8002a94:	6808      	ldr	r0, [r1, #0]
 8002a96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a9a:	f380 8809 	msr	PSP, r0
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f04f 0000 	mov.w	r0, #0
 8002aa6:	f380 8811 	msr	BASEPRI, r0
 8002aaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8002aae:	4770      	bx	lr

08002ab0 <pxCurrentTCBConst2>:
 8002ab0:	20000408 	.word	0x20000408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop

08002ab8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002ab8:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <prvPortStartFirstTask+0x1c>)
 8002aba:	6800      	ldr	r0, [r0, #0]
 8002abc:	6800      	ldr	r0, [r0, #0]
 8002abe:	f380 8808 	msr	MSP, r0
 8002ac2:	b662      	cpsie	i
 8002ac4:	b661      	cpsie	f
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	df00      	svc	0
 8002ad0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002ad2:	bf00      	nop
 8002ad4:	e000ed08 	.word	0xe000ed08

08002ad8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <xPortStartScheduler+0xd0>)
 8002ae0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	22ff      	movs	r2, #255	; 0xff
 8002aee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4b2a      	ldr	r3, [pc, #168]	; (8002bac <xPortStartScheduler+0xd4>)
 8002b04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b08:	2207      	movs	r2, #7
 8002b0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b0c:	e009      	b.n	8002b22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b80      	cmp	r3, #128	; 0x80
 8002b2c:	d0ef      	beq.n	8002b0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00a      	beq.n	8002b50 <xPortStartScheduler+0x78>
	__asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	60bb      	str	r3, [r7, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <xPortStartScheduler+0xd8>)
 8002b64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <xPortStartScheduler+0xdc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <xPortStartScheduler+0xdc>)
 8002b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <xPortStartScheduler+0xdc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <xPortStartScheduler+0xdc>)
 8002b80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002b86:	f000 f8b9 	bl	8002cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <xPortStartScheduler+0xe0>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002b90:	f7ff ff92 	bl	8002ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002b94:	f7ff fd7a 	bl	800268c <vTaskSwitchContext>
	prvTaskExitError();
 8002b98:	f7ff ff4a 	bl	8002a30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e400 	.word	0xe000e400
 8002bac:	20000534 	.word	0x20000534
 8002bb0:	20000538 	.word	0x20000538
 8002bb4:	e000ed20 	.word	0xe000ed20
 8002bb8:	2000000c 	.word	0x2000000c

08002bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	607b      	str	r3, [r7, #4]
}
 8002bd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <vPortEnterCritical+0x58>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <vPortEnterCritical+0x58>)
 8002bde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <vPortEnterCritical+0x58>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d10f      	bne.n	8002c08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <vPortEnterCritical+0x5c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <vPortEnterCritical+0x4c>
	__asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	603b      	str	r3, [r7, #0]
}
 8002c04:	bf00      	nop
 8002c06:	e7fe      	b.n	8002c06 <vPortEnterCritical+0x4a>
	}
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000000c 	.word	0x2000000c
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <vPortExitCritical+0x4c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <vPortExitCritical+0x24>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	607b      	str	r3, [r7, #4]
}
 8002c3c:	bf00      	nop
 8002c3e:	e7fe      	b.n	8002c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <vPortExitCritical+0x4c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <vPortExitCritical+0x4c>)
 8002c48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <vPortExitCritical+0x4c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <vPortExitCritical+0x42>
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	00000000 	.word	0x00000000

08002c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002c70:	f3ef 8009 	mrs	r0, PSP
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <pxCurrentTCBConst>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c80:	6010      	str	r0, [r2, #0]
 8002c82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002c86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c8a:	f380 8811 	msr	BASEPRI, r0
 8002c8e:	f7ff fcfd 	bl	800268c <vTaskSwitchContext>
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f380 8811 	msr	BASEPRI, r0
 8002c9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	6808      	ldr	r0, [r1, #0]
 8002ca2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ca6:	f380 8809 	msr	PSP, r0
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	4770      	bx	lr

08002cb0 <pxCurrentTCBConst>:
 8002cb0:	20000408 	.word	0x20000408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop

08002cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	607b      	str	r3, [r7, #4]
}
 8002cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002cd2:	f7ff fc1d 	bl	8002510 <xTaskIncrementTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <SysTick_Handler+0x40>)
 8002cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f383 8811 	msr	BASEPRI, r3
}
 8002cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <vPortSetupTimerInterrupt+0x30>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <vPortSetupTimerInterrupt+0x34>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <vPortSetupTimerInterrupt+0x38>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <vPortSetupTimerInterrupt+0x3c>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <vPortSetupTimerInterrupt+0x40>)
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d1e:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <vPortSetupTimerInterrupt+0x30>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	e000e010 	.word	0xe000e010
 8002d30:	e000e018 	.word	0xe000e018
 8002d34:	20000000 	.word	0x20000000
 8002d38:	10624dd3 	.word	0x10624dd3
 8002d3c:	e000e014 	.word	0xe000e014

08002d40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002d4c:	f7ff fb36 	bl	80023bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002d50:	4b58      	ldr	r3, [pc, #352]	; (8002eb4 <pvPortMalloc+0x174>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002d58:	f000 f910 	bl	8002f7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002d5c:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <pvPortMalloc+0x178>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 808e 	bne.w	8002e86 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01d      	beq.n	8002dac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002d70:	2208      	movs	r2, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f023 0307 	bic.w	r3, r3, #7
 8002d88:	3308      	adds	r3, #8
 8002d8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <pvPortMalloc+0x6c>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	617b      	str	r3, [r7, #20]
}
 8002da8:	bf00      	nop
 8002daa:	e7fe      	b.n	8002daa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d069      	beq.n	8002e86 <pvPortMalloc+0x146>
 8002db2:	4b42      	ldr	r3, [pc, #264]	; (8002ebc <pvPortMalloc+0x17c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d864      	bhi.n	8002e86 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002dbc:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <pvPortMalloc+0x180>)
 8002dbe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <pvPortMalloc+0x180>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dc6:	e004      	b.n	8002dd2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d903      	bls.n	8002de4 <pvPortMalloc+0xa4>
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f1      	bne.n	8002dc8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <pvPortMalloc+0x174>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d04b      	beq.n	8002e86 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2208      	movs	r2, #8
 8002df4:	4413      	add	r3, r2
 8002df6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	2308      	movs	r3, #8
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d91f      	bls.n	8002e50 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <pvPortMalloc+0xf8>
	__asm volatile
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	613b      	str	r3, [r7, #16]
}
 8002e34:	bf00      	nop
 8002e36:	e7fe      	b.n	8002e36 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002e4a:	69b8      	ldr	r0, [r7, #24]
 8002e4c:	f000 f8f8 	bl	8003040 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <pvPortMalloc+0x17c>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <pvPortMalloc+0x17c>)
 8002e5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <pvPortMalloc+0x17c>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <pvPortMalloc+0x184>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d203      	bcs.n	8002e72 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <pvPortMalloc+0x17c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <pvPortMalloc+0x184>)
 8002e70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <pvPortMalloc+0x178>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e86:	f7ff faa7 	bl	80023d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <pvPortMalloc+0x16a>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <pvPortMalloc+0x168>
	return pvReturn;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20001144 	.word	0x20001144
 8002eb8:	20001150 	.word	0x20001150
 8002ebc:	20001148 	.word	0x20001148
 8002ec0:	2000113c 	.word	0x2000113c
 8002ec4:	2000114c 	.word	0x2000114c

08002ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d048      	beq.n	8002f6c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002eda:	2308      	movs	r3, #8
 8002edc:	425b      	negs	r3, r3
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <vPortFree+0xac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <vPortFree+0x44>
	__asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60fb      	str	r3, [r7, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	e7fe      	b.n	8002f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <vPortFree+0x62>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60bb      	str	r3, [r7, #8]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <vPortFree+0xac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d019      	beq.n	8002f6c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d115      	bne.n	8002f6c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <vPortFree+0xac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002f50:	f7ff fa34 	bl	80023bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <vPortFree+0xb0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <vPortFree+0xb0>)
 8002f60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f62:	6938      	ldr	r0, [r7, #16]
 8002f64:	f000 f86c 	bl	8003040 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002f68:	f7ff fa36 	bl	80023d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002f6c:	bf00      	nop
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20001150 	.word	0x20001150
 8002f78:	20001148 	.word	0x20001148

08002f7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f88:	4b27      	ldr	r3, [pc, #156]	; (8003028 <prvHeapInit+0xac>)
 8002f8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3307      	adds	r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0307 	bic.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <prvHeapInit+0xac>)
 8002fac:	4413      	add	r3, r2
 8002fae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002fb4:	4a1d      	ldr	r2, [pc, #116]	; (800302c <prvHeapInit+0xb0>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <prvHeapInit+0xb0>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002fc8:	2208      	movs	r2, #8
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0307 	bic.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <prvHeapInit+0xb4>)
 8002fdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <prvHeapInit+0xb4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <prvHeapInit+0xb4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	1ad2      	subs	r2, r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <prvHeapInit+0xb4>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <prvHeapInit+0xb8>)
 800300a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <prvHeapInit+0xbc>)
 8003012:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <prvHeapInit+0xc0>)
 8003016:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	2000053c 	.word	0x2000053c
 800302c:	2000113c 	.word	0x2000113c
 8003030:	20001144 	.word	0x20001144
 8003034:	2000114c 	.word	0x2000114c
 8003038:	20001148 	.word	0x20001148
 800303c:	20001150 	.word	0x20001150

08003040 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <prvInsertBlockIntoFreeList+0xa8>)
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e002      	b.n	8003054 <prvInsertBlockIntoFreeList+0x14>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	429a      	cmp	r2, r3
 800305c:	d8f7      	bhi.n	800304e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	4413      	add	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d108      	bne.n	8003082 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	441a      	add	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	441a      	add	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d118      	bne.n	80030c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <prvInsertBlockIntoFreeList+0xac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d00d      	beq.n	80030be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e008      	b.n	80030d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <prvInsertBlockIntoFreeList+0xac>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e003      	b.n	80030d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d002      	beq.n	80030de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	2000113c 	.word	0x2000113c
 80030ec:	20001144 	.word	0x20001144

080030f0 <memset>:
 80030f0:	4603      	mov	r3, r0
 80030f2:	4402      	add	r2, r0
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d100      	bne.n	80030fa <memset+0xa>
 80030f8:	4770      	bx	lr
 80030fa:	f803 1b01 	strb.w	r1, [r3], #1
 80030fe:	e7f9      	b.n	80030f4 <memset+0x4>

08003100 <_reclaim_reent>:
 8003100:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <_reclaim_reent+0xa8>)
 8003102:	b570      	push	{r4, r5, r6, lr}
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4604      	mov	r4, r0
 8003108:	4283      	cmp	r3, r0
 800310a:	d04b      	beq.n	80031a4 <_reclaim_reent+0xa4>
 800310c:	69c3      	ldr	r3, [r0, #28]
 800310e:	b143      	cbz	r3, 8003122 <_reclaim_reent+0x22>
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d144      	bne.n	80031a0 <_reclaim_reent+0xa0>
 8003116:	69e3      	ldr	r3, [r4, #28]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	b111      	cbz	r1, 8003122 <_reclaim_reent+0x22>
 800311c:	4620      	mov	r0, r4
 800311e:	f000 f86b 	bl	80031f8 <_free_r>
 8003122:	6961      	ldr	r1, [r4, #20]
 8003124:	b111      	cbz	r1, 800312c <_reclaim_reent+0x2c>
 8003126:	4620      	mov	r0, r4
 8003128:	f000 f866 	bl	80031f8 <_free_r>
 800312c:	69e1      	ldr	r1, [r4, #28]
 800312e:	b111      	cbz	r1, 8003136 <_reclaim_reent+0x36>
 8003130:	4620      	mov	r0, r4
 8003132:	f000 f861 	bl	80031f8 <_free_r>
 8003136:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003138:	b111      	cbz	r1, 8003140 <_reclaim_reent+0x40>
 800313a:	4620      	mov	r0, r4
 800313c:	f000 f85c 	bl	80031f8 <_free_r>
 8003140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003142:	b111      	cbz	r1, 800314a <_reclaim_reent+0x4a>
 8003144:	4620      	mov	r0, r4
 8003146:	f000 f857 	bl	80031f8 <_free_r>
 800314a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800314c:	b111      	cbz	r1, 8003154 <_reclaim_reent+0x54>
 800314e:	4620      	mov	r0, r4
 8003150:	f000 f852 	bl	80031f8 <_free_r>
 8003154:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003156:	b111      	cbz	r1, 800315e <_reclaim_reent+0x5e>
 8003158:	4620      	mov	r0, r4
 800315a:	f000 f84d 	bl	80031f8 <_free_r>
 800315e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003160:	b111      	cbz	r1, 8003168 <_reclaim_reent+0x68>
 8003162:	4620      	mov	r0, r4
 8003164:	f000 f848 	bl	80031f8 <_free_r>
 8003168:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800316a:	b111      	cbz	r1, 8003172 <_reclaim_reent+0x72>
 800316c:	4620      	mov	r0, r4
 800316e:	f000 f843 	bl	80031f8 <_free_r>
 8003172:	6a23      	ldr	r3, [r4, #32]
 8003174:	b1b3      	cbz	r3, 80031a4 <_reclaim_reent+0xa4>
 8003176:	4620      	mov	r0, r4
 8003178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800317c:	4718      	bx	r3
 800317e:	5949      	ldr	r1, [r1, r5]
 8003180:	b941      	cbnz	r1, 8003194 <_reclaim_reent+0x94>
 8003182:	3504      	adds	r5, #4
 8003184:	69e3      	ldr	r3, [r4, #28]
 8003186:	2d80      	cmp	r5, #128	; 0x80
 8003188:	68d9      	ldr	r1, [r3, #12]
 800318a:	d1f8      	bne.n	800317e <_reclaim_reent+0x7e>
 800318c:	4620      	mov	r0, r4
 800318e:	f000 f833 	bl	80031f8 <_free_r>
 8003192:	e7c0      	b.n	8003116 <_reclaim_reent+0x16>
 8003194:	680e      	ldr	r6, [r1, #0]
 8003196:	4620      	mov	r0, r4
 8003198:	f000 f82e 	bl	80031f8 <_free_r>
 800319c:	4631      	mov	r1, r6
 800319e:	e7ef      	b.n	8003180 <_reclaim_reent+0x80>
 80031a0:	2500      	movs	r5, #0
 80031a2:	e7ef      	b.n	8003184 <_reclaim_reent+0x84>
 80031a4:	bd70      	pop	{r4, r5, r6, pc}
 80031a6:	bf00      	nop
 80031a8:	2000005c 	.word	0x2000005c

080031ac <__libc_init_array>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	2600      	movs	r6, #0
 80031b0:	4d0c      	ldr	r5, [pc, #48]	; (80031e4 <__libc_init_array+0x38>)
 80031b2:	4c0d      	ldr	r4, [pc, #52]	; (80031e8 <__libc_init_array+0x3c>)
 80031b4:	1b64      	subs	r4, r4, r5
 80031b6:	10a4      	asrs	r4, r4, #2
 80031b8:	42a6      	cmp	r6, r4
 80031ba:	d109      	bne.n	80031d0 <__libc_init_array+0x24>
 80031bc:	f000 f870 	bl	80032a0 <_init>
 80031c0:	2600      	movs	r6, #0
 80031c2:	4d0a      	ldr	r5, [pc, #40]	; (80031ec <__libc_init_array+0x40>)
 80031c4:	4c0a      	ldr	r4, [pc, #40]	; (80031f0 <__libc_init_array+0x44>)
 80031c6:	1b64      	subs	r4, r4, r5
 80031c8:	10a4      	asrs	r4, r4, #2
 80031ca:	42a6      	cmp	r6, r4
 80031cc:	d105      	bne.n	80031da <__libc_init_array+0x2e>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d4:	4798      	blx	r3
 80031d6:	3601      	adds	r6, #1
 80031d8:	e7ee      	b.n	80031b8 <__libc_init_array+0xc>
 80031da:	f855 3b04 	ldr.w	r3, [r5], #4
 80031de:	4798      	blx	r3
 80031e0:	3601      	adds	r6, #1
 80031e2:	e7f2      	b.n	80031ca <__libc_init_array+0x1e>
 80031e4:	08003340 	.word	0x08003340
 80031e8:	08003340 	.word	0x08003340
 80031ec:	08003340 	.word	0x08003340
 80031f0:	08003344 	.word	0x08003344

080031f4 <__retarget_lock_acquire_recursive>:
 80031f4:	4770      	bx	lr

080031f6 <__retarget_lock_release_recursive>:
 80031f6:	4770      	bx	lr

080031f8 <_free_r>:
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4605      	mov	r5, r0
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d040      	beq.n	8003282 <_free_r+0x8a>
 8003200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003204:	1f0c      	subs	r4, r1, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	bfb8      	it	lt
 800320a:	18e4      	addlt	r4, r4, r3
 800320c:	f000 f83c 	bl	8003288 <__malloc_lock>
 8003210:	4a1c      	ldr	r2, [pc, #112]	; (8003284 <_free_r+0x8c>)
 8003212:	6813      	ldr	r3, [r2, #0]
 8003214:	b933      	cbnz	r3, 8003224 <_free_r+0x2c>
 8003216:	6063      	str	r3, [r4, #4]
 8003218:	6014      	str	r4, [r2, #0]
 800321a:	4628      	mov	r0, r5
 800321c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003220:	f000 b838 	b.w	8003294 <__malloc_unlock>
 8003224:	42a3      	cmp	r3, r4
 8003226:	d908      	bls.n	800323a <_free_r+0x42>
 8003228:	6820      	ldr	r0, [r4, #0]
 800322a:	1821      	adds	r1, r4, r0
 800322c:	428b      	cmp	r3, r1
 800322e:	bf01      	itttt	eq
 8003230:	6819      	ldreq	r1, [r3, #0]
 8003232:	685b      	ldreq	r3, [r3, #4]
 8003234:	1809      	addeq	r1, r1, r0
 8003236:	6021      	streq	r1, [r4, #0]
 8003238:	e7ed      	b.n	8003216 <_free_r+0x1e>
 800323a:	461a      	mov	r2, r3
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	b10b      	cbz	r3, 8003244 <_free_r+0x4c>
 8003240:	42a3      	cmp	r3, r4
 8003242:	d9fa      	bls.n	800323a <_free_r+0x42>
 8003244:	6811      	ldr	r1, [r2, #0]
 8003246:	1850      	adds	r0, r2, r1
 8003248:	42a0      	cmp	r0, r4
 800324a:	d10b      	bne.n	8003264 <_free_r+0x6c>
 800324c:	6820      	ldr	r0, [r4, #0]
 800324e:	4401      	add	r1, r0
 8003250:	1850      	adds	r0, r2, r1
 8003252:	4283      	cmp	r3, r0
 8003254:	6011      	str	r1, [r2, #0]
 8003256:	d1e0      	bne.n	800321a <_free_r+0x22>
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4408      	add	r0, r1
 800325e:	6010      	str	r0, [r2, #0]
 8003260:	6053      	str	r3, [r2, #4]
 8003262:	e7da      	b.n	800321a <_free_r+0x22>
 8003264:	d902      	bls.n	800326c <_free_r+0x74>
 8003266:	230c      	movs	r3, #12
 8003268:	602b      	str	r3, [r5, #0]
 800326a:	e7d6      	b.n	800321a <_free_r+0x22>
 800326c:	6820      	ldr	r0, [r4, #0]
 800326e:	1821      	adds	r1, r4, r0
 8003270:	428b      	cmp	r3, r1
 8003272:	bf01      	itttt	eq
 8003274:	6819      	ldreq	r1, [r3, #0]
 8003276:	685b      	ldreq	r3, [r3, #4]
 8003278:	1809      	addeq	r1, r1, r0
 800327a:	6021      	streq	r1, [r4, #0]
 800327c:	6063      	str	r3, [r4, #4]
 800327e:	6054      	str	r4, [r2, #4]
 8003280:	e7cb      	b.n	800321a <_free_r+0x22>
 8003282:	bd38      	pop	{r3, r4, r5, pc}
 8003284:	20001290 	.word	0x20001290

08003288 <__malloc_lock>:
 8003288:	4801      	ldr	r0, [pc, #4]	; (8003290 <__malloc_lock+0x8>)
 800328a:	f7ff bfb3 	b.w	80031f4 <__retarget_lock_acquire_recursive>
 800328e:	bf00      	nop
 8003290:	2000128c 	.word	0x2000128c

08003294 <__malloc_unlock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_unlock+0x8>)
 8003296:	f7ff bfae 	b.w	80031f6 <__retarget_lock_release_recursive>
 800329a:	bf00      	nop
 800329c:	2000128c 	.word	0x2000128c

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
