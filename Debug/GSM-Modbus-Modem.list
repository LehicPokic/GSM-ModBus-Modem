
GSM-Modbus-Modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800354c  0800354c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800354c  0800354c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800354c  0800354c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000060  080035b4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000129c  080035b4  0002129c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011979  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c5  00000000  00000000  00031a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  00034410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c88  00000000  00000000  00035428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c3d  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d66  00000000  00000000  0004eced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091fe1  00000000  00000000  00060a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000457c  00000000  00000000  000f2a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f6fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08003480 	.word	0x08003480

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08003480 	.word	0x08003480

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	2000011c 	.word	0x2000011c

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb63 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f84d 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8e5 	bl	800035c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f88f 	bl	80002b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000196:	f000 f8b7 	bl	8000308 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <main+0x90>)
 800019c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001a0:	461d      	mov	r5, r3
 80001a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fea1 	bl	8001efc <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a15      	ldr	r2, [pc, #84]	; (8000214 <main+0x94>)
 80001be:	6013      	str	r3, [r2, #0]

  /* definition and creation of modbusMastertas */
  osThreadDef(modbusMastertas, modbusMasterSend, osPriorityIdle, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x98>)
 80001c2:	f107 0420 	add.w	r4, r7, #32
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  modbusMastertasHandle = osThreadCreate(osThread(modbusMastertas), NULL);
 80001d4:	f107 0320 	add.w	r3, r7, #32
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fe8e 	bl	8001efc <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a0e      	ldr	r2, [pc, #56]	; (800021c <main+0x9c>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of modbusMaster */
  osThreadDef(modbusMaster, modbusMasterReception, osPriorityIdle, 0, 128);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <main+0xa0>)
 80001e8:	1d3c      	adds	r4, r7, #4
 80001ea:	461d      	mov	r5, r3
 80001ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  modbusMasterHandle = osThreadCreate(osThread(modbusMaster), NULL);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fe7d 	bl	8001efc <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0xa4>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000208:	f001 fe71 	bl	8001eee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x8c>
 800020e:	bf00      	nop
 8000210:	080034a4 	.word	0x080034a4
 8000214:	200003ac 	.word	0x200003ac
 8000218:	080034d0 	.word	0x080034d0
 800021c:	200003b0 	.word	0x200003b0
 8000220:	080034fc 	.word	0x080034fc
 8000224:	200003b4 	.word	0x200003b4

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 f84a 	bl	80032d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fdcb 	bl	8000e0c <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f968 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 f838 	bl	8001310 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f953 	bl	8000550 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	; 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART1_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002e4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ee:	f001 fc17 	bl	8001b20 <HAL_UART_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80002f8:	f000 f92a 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	2000031c 	.word	0x2000031c
 8000304:	40013800 	.word	0x40013800

08000308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_USART2_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000340:	f001 fbee 	bl	8001b20 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f901 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000364 	.word	0x20000364
 8000358:	40004400 	.word	0x40004400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <MX_GPIO_Init+0x90>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_GPIO_Init+0x90>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <MX_GPIO_Init+0x90>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_GPIO_Init+0x90>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_GPIO_Init+0x90>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a11      	ldr	r2, [pc, #68]	; (80003ec <MX_GPIO_Init+0x90>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_GPIO_Init+0x90>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	480c      	ldr	r0, [pc, #48]	; (80003f0 <MX_GPIO_Init+0x94>)
 80003c0:	f000 fcf3 	bl	8000daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4804      	ldr	r0, [pc, #16]	; (80003f0 <MX_GPIO_Init+0x94>)
 80003de:	f000 fb49 	bl	8000a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40011000 	.word	0x40011000

080003f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003fc:	2001      	movs	r0, #1
 80003fe:	f001 fdc9 	bl	8001f94 <osDelay>
 8000402:	e7fb      	b.n	80003fc <StartDefaultTask+0x8>

08000404 <modbusMasterSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_modbusMasterSend */
void modbusMasterSend(void const * argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN modbusMasterSend */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000412:	4821      	ldr	r0, [pc, #132]	; (8000498 <modbusMasterSend+0x94>)
 8000414:	f000 fcc9 	bl	8000daa <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0){
 8000418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800041c:	481f      	ldr	r0, [pc, #124]	; (800049c <modbusMasterSend+0x98>)
 800041e:	f000 fcad 	bl	8000d7c <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d133      	bne.n	8000490 <modbusMasterSend+0x8c>
 8000428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800042c:	481b      	ldr	r0, [pc, #108]	; (800049c <modbusMasterSend+0x98>)
 800042e:	f000 fca5 	bl	8000d7c <HAL_GPIO_ReadPin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d12b      	bne.n	8000490 <modbusMasterSend+0x8c>
		for (int i = 0; i < 8; i++){
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	e00d      	b.n	800045a <modbusMasterSend+0x56>
			HAL_UART_Transmit(&huart1, &buffer[i], 1, 30);
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <modbusMasterSend+0x9c>)
 8000442:	1899      	adds	r1, r3, r2
 8000444:	231e      	movs	r3, #30
 8000446:	2201      	movs	r2, #1
 8000448:	4816      	ldr	r0, [pc, #88]	; (80004a4 <modbusMasterSend+0xa0>)
 800044a:	f001 fbb9 	bl	8001bc0 <HAL_UART_Transmit>
			osDelay(1);
 800044e:	2001      	movs	r0, #1
 8000450:	f001 fda0 	bl	8001f94 <osDelay>
		for (int i = 0; i < 8; i++){
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3301      	adds	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2b07      	cmp	r3, #7
 800045e:	ddee      	ble.n	800043e <modbusMasterSend+0x3a>
		}
		osDelay(4);
 8000460:	2004      	movs	r0, #4
 8000462:	f001 fd97 	bl	8001f94 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <modbusMasterSend+0x98>)
 800046e:	f000 fc9c 	bl	8000daa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000478:	4808      	ldr	r0, [pc, #32]	; (800049c <modbusMasterSend+0x98>)
 800047a:	f000 fc96 	bl	8000daa <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800047e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <modbusMasterSend+0x94>)
 8000484:	f000 fca9 	bl	8000dda <HAL_GPIO_TogglePin>
		osDelay(500);
 8000488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800048c:	f001 fd82 	bl	8001f94 <osDelay>
	}

  /* USER CODE END modbusMasterSend */
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40011000 	.word	0x40011000
 800049c:	40010800 	.word	0x40010800
 80004a0:	200003b8 	.word	0x200003b8
 80004a4:	2000031c 	.word	0x2000031c

080004a8 <modbusMasterReception>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_modbusMasterReception */
void modbusMasterReception(void const * argument)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN modbusMasterReception */
  /* Infinite loop */
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 0){
 80004b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b4:	481a      	ldr	r0, [pc, #104]	; (8000520 <modbusMasterReception+0x78>)
 80004b6:	f000 fc61 	bl	8000d7c <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d12a      	bne.n	8000516 <modbusMasterReception+0x6e>
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	4816      	ldr	r0, [pc, #88]	; (8000520 <modbusMasterReception+0x78>)
 80004c6:	f000 fc59 	bl	8000d7c <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d122      	bne.n	8000516 <modbusMasterReception+0x6e>
		for (int i = 0; i < 8; i++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e00d      	b.n	80004f2 <modbusMasterReception+0x4a>
			HAL_UART_Transmit(&huart1, &buffer[i], 1, 30);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	4a12      	ldr	r2, [pc, #72]	; (8000524 <modbusMasterReception+0x7c>)
 80004da:	1899      	adds	r1, r3, r2
 80004dc:	231e      	movs	r3, #30
 80004de:	2201      	movs	r2, #1
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <modbusMasterReception+0x80>)
 80004e2:	f001 fb6d 	bl	8001bc0 <HAL_UART_Transmit>
			osDelay(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 fd54 	bl	8001f94 <osDelay>
		for (int i = 0; i < 8; i++){
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b07      	cmp	r3, #7
 80004f6:	ddee      	ble.n	80004d6 <modbusMasterReception+0x2e>
		}
		osDelay(4);
 80004f8:	2004      	movs	r0, #4
 80004fa:	f001 fd4b 	bl	8001f94 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000504:	4806      	ldr	r0, [pc, #24]	; (8000520 <modbusMasterReception+0x78>)
 8000506:	f000 fc50 	bl	8000daa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <modbusMasterReception+0x78>)
 8000512:	f000 fc4a 	bl	8000daa <HAL_GPIO_WritePin>
	}
  /* USER CODE END modbusMasterReception */
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010800 	.word	0x40010800
 8000524:	200003b8 	.word	0x200003b8
 8000528:	2000031c 	.word	0x2000031c

0800052c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d101      	bne.n	8000542 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800053e:	f000 f99d 	bl	800087c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40012c00 	.word	0x40012c00

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_MspInit+0x68>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <HAL_MspInit+0x68>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_MspInit+0x68>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_MspInit+0x68>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <HAL_MspInit+0x68>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x68>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	210f      	movs	r1, #15
 8000596:	f06f 0001 	mvn.w	r0, #1
 800059a:	f000 fa40 	bl	8000a1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_MspInit+0x6c>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_MspInit+0x6c>)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010000 	.word	0x40010000

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0318 	add.w	r3, r7, #24
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a37      	ldr	r2, [pc, #220]	; (80006c4 <HAL_UART_MspInit+0xf8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d132      	bne.n	8000652 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ec:	4b36      	ldr	r3, [pc, #216]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a35      	ldr	r2, [pc, #212]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 800061c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000626:	2303      	movs	r3, #3
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 0318 	add.w	r3, r7, #24
 800062e:	4619      	mov	r1, r3
 8000630:	4826      	ldr	r0, [pc, #152]	; (80006cc <HAL_UART_MspInit+0x100>)
 8000632:	f000 fa1f 	bl	8000a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000636:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800063a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	4619      	mov	r1, r3
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <HAL_UART_MspInit+0x100>)
 800064c:	f000 fa12 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000650:	e034      	b.n	80006bc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a1e      	ldr	r2, [pc, #120]	; (80006d0 <HAL_UART_MspInit+0x104>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d12f      	bne.n	80006bc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 8000662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000666:	61d3      	str	r3, [r2, #28]
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_UART_MspInit+0xfc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800068c:	2304      	movs	r3, #4
 800068e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4619      	mov	r1, r3
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <HAL_UART_MspInit+0x100>)
 80006a0:	f000 f9e8 	bl	8000a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006a4:	2308      	movs	r3, #8
 80006a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_UART_MspInit+0x100>)
 80006b8:	f000 f9dc 	bl	8000a74 <HAL_GPIO_Init>
}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40013800 	.word	0x40013800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800
 80006d0:	40004400 	.word	0x40004400

080006d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006ea:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <HAL_InitTick+0xd0>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a2d      	ldr	r2, [pc, #180]	; (80007a4 <HAL_InitTick+0xd0>)
 80006f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <HAL_InitTick+0xd0>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000702:	f107 020c 	add.w	r2, r7, #12
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 ff6f 	bl	80015f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000712:	f000 ff59 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8000716:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <HAL_InitTick+0xd4>)
 800071c:	fba2 2303 	umull	r2, r3, r2, r3
 8000720:	0c9b      	lsrs	r3, r3, #18
 8000722:	3b01      	subs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <HAL_InitTick+0xd8>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <HAL_InitTick+0xdc>)
 800072a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <HAL_InitTick+0xd8>)
 800072e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000732:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000734:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <HAL_InitTick+0xd8>)
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <HAL_InitTick+0xd8>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <HAL_InitTick+0xd8>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_InitTick+0xd8>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800074c:	4817      	ldr	r0, [pc, #92]	; (80007ac <HAL_InitTick+0xd8>)
 800074e:	f000 ff9d 	bl	800168c <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800075c:	2b00      	cmp	r3, #0
 800075e:	d11b      	bne.n	8000798 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000760:	4812      	ldr	r0, [pc, #72]	; (80007ac <HAL_InitTick+0xd8>)
 8000762:	f000 ffeb 	bl	800173c <HAL_TIM_Base_Start_IT>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800076c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000770:	2b00      	cmp	r3, #0
 8000772:	d111      	bne.n	8000798 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000774:	2019      	movs	r0, #25
 8000776:	f000 f96e 	bl	8000a56 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d808      	bhi.n	8000792 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2019      	movs	r0, #25
 8000786:	f000 f94a 	bl	8000a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_InitTick+0xe0>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	e002      	b.n	8000798 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800079c:	4618      	mov	r0, r3
 800079e:	3730      	adds	r7, #48	; 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	431bde83 	.word	0x431bde83
 80007ac:	200003c4 	.word	0x200003c4
 80007b0:	40012c00 	.word	0x40012c00
 80007b4:	20000004 	.word	0x20000004

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
	...

080007e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <TIM1_UP_IRQHandler+0x10>)
 80007ea:	f000 fff9 	bl	80017e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200003c4 	.word	0x200003c4

080007f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000804:	f7ff fff8 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800080a:	490c      	ldr	r1, [pc, #48]	; (800083c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <LoopFillZerobss+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a09      	ldr	r2, [pc, #36]	; (8000844 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000820:	4c09      	ldr	r4, [pc, #36]	; (8000848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082e:	f002 fdad 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000832:	f7ff fca5 	bl	8000180 <main>
  bx lr
 8000836:	4770      	bx	lr
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000840:	08003554 	.word	0x08003554
  ldr r2, =_sbss
 8000844:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000848:	2000129c 	.word	0x2000129c

0800084c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_2_IRQHandler>
	...

08000850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_Init+0x28>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <HAL_Init+0x28>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f8d1 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000866:	200f      	movs	r0, #15
 8000868:	f7ff ff34 	bl	80006d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800086c:	f7ff fe76 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40022000 	.word	0x40022000

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x1c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x20>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a03      	ldr	r2, [pc, #12]	; (800089c <HAL_IncTick+0x20>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	20000008 	.word	0x20000008
 800089c:	2000040c 	.word	0x2000040c

080008a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b02      	ldr	r3, [pc, #8]	; (80008b0 <HAL_GetTick+0x10>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	2000040c 	.word	0x2000040c

080008b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <__NVIC_SetPriorityGrouping+0x44>)
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	60d3      	str	r3, [r2, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <__NVIC_GetPriorityGrouping+0x18>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	0a1b      	lsrs	r3, r3, #8
 8000906:	f003 0307 	and.w	r3, r3, #7
}
 800090a:	4618      	mov	r0, r3
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4906      	ldr	r1, [pc, #24]	; (800094c <__NVIC_EnableIRQ+0x34>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff4f 	bl	80008b4 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff64 	bl	80008fc <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ffb2 	bl	80009a4 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff81 	bl	8000950 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff57 	bl	8000918 <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b08b      	sub	sp, #44	; 0x2c
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a86:	e169      	b.n	8000d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	f040 8158 	bne.w	8000d56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	4a9a      	ldr	r2, [pc, #616]	; (8000d14 <HAL_GPIO_Init+0x2a0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d05e      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ab0:	4a98      	ldr	r2, [pc, #608]	; (8000d14 <HAL_GPIO_Init+0x2a0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d875      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ab6:	4a98      	ldr	r2, [pc, #608]	; (8000d18 <HAL_GPIO_Init+0x2a4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d058      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000abc:	4a96      	ldr	r2, [pc, #600]	; (8000d18 <HAL_GPIO_Init+0x2a4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d86f      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ac2:	4a96      	ldr	r2, [pc, #600]	; (8000d1c <HAL_GPIO_Init+0x2a8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d052      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ac8:	4a94      	ldr	r2, [pc, #592]	; (8000d1c <HAL_GPIO_Init+0x2a8>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d869      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ace:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <HAL_GPIO_Init+0x2ac>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d04c      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ad4:	4a92      	ldr	r2, [pc, #584]	; (8000d20 <HAL_GPIO_Init+0x2ac>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d863      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ada:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_GPIO_Init+0x2b0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d046      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
 8000ae0:	4a90      	ldr	r2, [pc, #576]	; (8000d24 <HAL_GPIO_Init+0x2b0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d85d      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000ae6:	2b12      	cmp	r3, #18
 8000ae8:	d82a      	bhi.n	8000b40 <HAL_GPIO_Init+0xcc>
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d859      	bhi.n	8000ba2 <HAL_GPIO_Init+0x12e>
 8000aee:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <HAL_GPIO_Init+0x80>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b6f 	.word	0x08000b6f
 8000af8:	08000b49 	.word	0x08000b49
 8000afc:	08000b5b 	.word	0x08000b5b
 8000b00:	08000b9d 	.word	0x08000b9d
 8000b04:	08000ba3 	.word	0x08000ba3
 8000b08:	08000ba3 	.word	0x08000ba3
 8000b0c:	08000ba3 	.word	0x08000ba3
 8000b10:	08000ba3 	.word	0x08000ba3
 8000b14:	08000ba3 	.word	0x08000ba3
 8000b18:	08000ba3 	.word	0x08000ba3
 8000b1c:	08000ba3 	.word	0x08000ba3
 8000b20:	08000ba3 	.word	0x08000ba3
 8000b24:	08000ba3 	.word	0x08000ba3
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000ba3 	.word	0x08000ba3
 8000b30:	08000ba3 	.word	0x08000ba3
 8000b34:	08000ba3 	.word	0x08000ba3
 8000b38:	08000b51 	.word	0x08000b51
 8000b3c:	08000b65 	.word	0x08000b65
 8000b40:	4a79      	ldr	r2, [pc, #484]	; (8000d28 <HAL_GPIO_Init+0x2b4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d013      	beq.n	8000b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b46:	e02c      	b.n	8000ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e029      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	3304      	adds	r3, #4
 8000b56:	623b      	str	r3, [r7, #32]
          break;
 8000b58:	e024      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	3308      	adds	r3, #8
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e01f      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	330c      	adds	r3, #12
 8000b6a:	623b      	str	r3, [r7, #32]
          break;
 8000b6c:	e01a      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b76:	2304      	movs	r3, #4
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e013      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d105      	bne.n	8000b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b84:	2308      	movs	r3, #8
 8000b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	611a      	str	r2, [r3, #16]
          break;
 8000b8e:	e009      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b90:	2308      	movs	r3, #8
 8000b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69fa      	ldr	r2, [r7, #28]
 8000b98:	615a      	str	r2, [r3, #20]
          break;
 8000b9a:	e003      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
          break;
 8000ba0:	e000      	b.n	8000ba4 <HAL_GPIO_Init+0x130>
          break;
 8000ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2bff      	cmp	r3, #255	; 0xff
 8000ba8:	d801      	bhi.n	8000bae <HAL_GPIO_Init+0x13a>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	e001      	b.n	8000bb2 <HAL_GPIO_Init+0x13e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2bff      	cmp	r3, #255	; 0xff
 8000bb8:	d802      	bhi.n	8000bc0 <HAL_GPIO_Init+0x14c>
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x152>
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	3b08      	subs	r3, #8
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	210f      	movs	r1, #15
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	6a39      	ldr	r1, [r7, #32]
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	431a      	orrs	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80b1 	beq.w	8000d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf4:	4b4d      	ldr	r3, [pc, #308]	; (8000d2c <HAL_GPIO_Init+0x2b8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_GPIO_Init+0x2b8>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b4a      	ldr	r3, [pc, #296]	; (8000d2c <HAL_GPIO_Init+0x2b8>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c0c:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2bc>)
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	3302      	adds	r3, #2
 8000c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a40      	ldr	r2, [pc, #256]	; (8000d34 <HAL_GPIO_Init+0x2c0>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d013      	beq.n	8000c60 <HAL_GPIO_Init+0x1ec>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3f      	ldr	r2, [pc, #252]	; (8000d38 <HAL_GPIO_Init+0x2c4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d00d      	beq.n	8000c5c <HAL_GPIO_Init+0x1e8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a3e      	ldr	r2, [pc, #248]	; (8000d3c <HAL_GPIO_Init+0x2c8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d007      	beq.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <HAL_GPIO_Init+0x2cc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d101      	bne.n	8000c54 <HAL_GPIO_Init+0x1e0>
 8000c50:	2303      	movs	r3, #3
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c54:	2304      	movs	r3, #4
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c60:	2300      	movs	r3, #0
 8000c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c72:	492f      	ldr	r1, [pc, #188]	; (8000d30 <HAL_GPIO_Init+0x2bc>)
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	492c      	ldr	r1, [pc, #176]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	608b      	str	r3, [r1, #8]
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	4928      	ldr	r1, [pc, #160]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d006      	beq.n	8000cc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	4922      	ldr	r1, [pc, #136]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	60cb      	str	r3, [r1, #12]
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	491e      	ldr	r1, [pc, #120]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d006      	beq.n	8000cea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	604b      	str	r3, [r1, #4]
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4914      	ldr	r1, [pc, #80]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d021      	beq.n	8000d48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	490e      	ldr	r1, [pc, #56]	; (8000d44 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	600b      	str	r3, [r1, #0]
 8000d10:	e021      	b.n	8000d56 <HAL_GPIO_Init+0x2e2>
 8000d12:	bf00      	nop
 8000d14:	10320000 	.word	0x10320000
 8000d18:	10310000 	.word	0x10310000
 8000d1c:	10220000 	.word	0x10220000
 8000d20:	10210000 	.word	0x10210000
 8000d24:	10120000 	.word	0x10120000
 8000d28:	10110000 	.word	0x10110000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010000 	.word	0x40010000
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40010c00 	.word	0x40010c00
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	40011400 	.word	0x40011400
 8000d44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_GPIO_Init+0x304>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	4909      	ldr	r1, [pc, #36]	; (8000d78 <HAL_GPIO_Init+0x304>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	3301      	adds	r3, #1
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	fa22 f303 	lsr.w	r3, r2, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f47f ae8e 	bne.w	8000a88 <HAL_GPIO_Init+0x14>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	372c      	adds	r7, #44	; 0x2c
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e001      	b.n	8000d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	807b      	strh	r3, [r7, #2]
 8000db6:	4613      	mov	r3, r2
 8000db8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dba:	787b      	ldrb	r3, [r7, #1]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc6:	e003      	b.n	8000dd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	041a      	lsls	r2, r3, #16
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	611a      	str	r2, [r3, #16]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dec:	887a      	ldrh	r2, [r7, #2]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4013      	ands	r3, r2
 8000df2:	041a      	lsls	r2, r3, #16
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	400b      	ands	r3, r1
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	611a      	str	r2, [r3, #16]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e272      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8087 	beq.w	8000f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e2c:	4b92      	ldr	r3, [pc, #584]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 030c 	and.w	r3, r3, #12
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	d00c      	beq.n	8000e52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e38:	4b8f      	ldr	r3, [pc, #572]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 030c 	and.w	r3, r3, #12
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d112      	bne.n	8000e6a <HAL_RCC_OscConfig+0x5e>
 8000e44:	4b8c      	ldr	r3, [pc, #560]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e50:	d10b      	bne.n	8000e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	4b89      	ldr	r3, [pc, #548]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d06c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x12c>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d168      	bne.n	8000f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e24c      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e72:	d106      	bne.n	8000e82 <HAL_RCC_OscConfig+0x76>
 8000e74:	4b80      	ldr	r3, [pc, #512]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a7f      	ldr	r2, [pc, #508]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e02e      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x98>
 8000e8a:	4b7b      	ldr	r3, [pc, #492]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a7a      	ldr	r2, [pc, #488]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b78      	ldr	r3, [pc, #480]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a77      	ldr	r2, [pc, #476]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e01d      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0xbc>
 8000eae:	4b72      	ldr	r3, [pc, #456]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a71      	ldr	r2, [pc, #452]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6e      	ldr	r2, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_RCC_OscConfig+0xd4>
 8000ec8:	4b6b      	ldr	r3, [pc, #428]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a6a      	ldr	r2, [pc, #424]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b68      	ldr	r3, [pc, #416]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a67      	ldr	r2, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ede:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d013      	beq.n	8000f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fcda 	bl	80008a0 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eee:	e008      	b.n	8000f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef0:	f7ff fcd6 	bl	80008a0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d901      	bls.n	8000f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e200      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f02:	4b5d      	ldr	r3, [pc, #372]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xe4>
 8000f0e:	e014      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fcc6 	bl	80008a0 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fcc2 	bl	80008a0 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	; 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e1ec      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2a:	4b53      	ldr	r3, [pc, #332]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x10c>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d063      	beq.n	800100e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f46:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d11c      	bne.n	8000f98 <HAL_RCC_OscConfig+0x18c>
 8000f5e:	4b46      	ldr	r3, [pc, #280]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d116      	bne.n	8000f98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	4b43      	ldr	r3, [pc, #268]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <HAL_RCC_OscConfig+0x176>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d001      	beq.n	8000f82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e1c0      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4939      	ldr	r1, [pc, #228]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	e03a      	b.n	800100e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d020      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x270>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fc7b 	bl	80008a0 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc77 	bl	80008a0 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e1a1      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4927      	ldr	r1, [pc, #156]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e015      	b.n	800100e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_RCC_OscConfig+0x270>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc5a 	bl	80008a0 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc56 	bl	80008a0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e180      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001002:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d03a      	beq.n	8001090 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d019      	beq.n	8001056 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_RCC_OscConfig+0x274>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001028:	f7ff fc3a 	bl	80008a0 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff fc36 	bl	80008a0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e160      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_RCC_OscConfig+0x26c>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800104e:	2001      	movs	r0, #1
 8001050:	f000 fafe 	bl	8001650 <RCC_Delay>
 8001054:	e01c      	b.n	8001090 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_RCC_OscConfig+0x274>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105c:	f7ff fc20 	bl	80008a0 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001062:	e00f      	b.n	8001084 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001064:	f7ff fc1c 	bl	80008a0 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d908      	bls.n	8001084 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e146      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
 800107c:	42420000 	.word	0x42420000
 8001080:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001084:	4b92      	ldr	r3, [pc, #584]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1e9      	bne.n	8001064 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a6 	beq.w	80011ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a2:	4b8b      	ldr	r3, [pc, #556]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10d      	bne.n	80010ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a87      	ldr	r2, [pc, #540]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b85      	ldr	r3, [pc, #532]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c6:	2301      	movs	r3, #1
 80010c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ca:	4b82      	ldr	r3, [pc, #520]	; (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d118      	bne.n	8001108 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d6:	4b7f      	ldr	r3, [pc, #508]	; (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a7e      	ldr	r2, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fbdd 	bl	80008a0 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ea:	f7ff fbd9 	bl	80008a0 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b64      	cmp	r3, #100	; 0x64
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e103      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fc:	4b75      	ldr	r3, [pc, #468]	; (80012d4 <HAL_RCC_OscConfig+0x4c8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x312>
 8001110:	4b6f      	ldr	r3, [pc, #444]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	4a6e      	ldr	r2, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6213      	str	r3, [r2, #32]
 800111c:	e02d      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x334>
 8001126:	4b6a      	ldr	r3, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f023 0301 	bic.w	r3, r3, #1
 8001130:	6213      	str	r3, [r2, #32]
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a66      	ldr	r2, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0304 	bic.w	r3, r3, #4
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	e01c      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b05      	cmp	r3, #5
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_OscConfig+0x356>
 8001148:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	4a60      	ldr	r2, [pc, #384]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6213      	str	r3, [r2, #32]
 8001154:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6213      	str	r3, [r2, #32]
 8001160:	e00b      	b.n	800117a <HAL_RCC_OscConfig+0x36e>
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a5a      	ldr	r2, [pc, #360]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0301 	bic.w	r3, r3, #1
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	4b58      	ldr	r3, [pc, #352]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f023 0304 	bic.w	r3, r3, #4
 8001178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d015      	beq.n	80011ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001182:	f7ff fb8d 	bl	80008a0 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001188:	e00a      	b.n	80011a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118a:	f7ff fb89 	bl	80008a0 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e0b1      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	4b4b      	ldr	r3, [pc, #300]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d0ee      	beq.n	800118a <HAL_RCC_OscConfig+0x37e>
 80011ac:	e014      	b.n	80011d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ae:	f7ff fb77 	bl	80008a0 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b4:	e00a      	b.n	80011cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f7ff fb73 	bl	80008a0 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e09b      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011cc:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1ee      	bne.n	80011b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d105      	bne.n	80011ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011de:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a3b      	ldr	r2, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8087 	beq.w	8001302 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f4:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d061      	beq.n	80012c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d146      	bne.n	8001296 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_RCC_OscConfig+0x4cc>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fb47 	bl	80008a0 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001216:	f7ff fb43 	bl	80008a0 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e06d      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001228:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d108      	bne.n	8001250 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123e:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	4921      	ldr	r1, [pc, #132]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a19      	ldr	r1, [r3, #32]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	430b      	orrs	r3, r1
 8001262:	491b      	ldr	r1, [pc, #108]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_RCC_OscConfig+0x4cc>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb17 	bl	80008a0 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff fb13 	bl	80008a0 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e03d      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f0      	beq.n	8001276 <HAL_RCC_OscConfig+0x46a>
 8001294:	e035      	b.n	8001302 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_OscConfig+0x4cc>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb00 	bl	80008a0 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff fafc 	bl	80008a0 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e026      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x498>
 80012c2:	e01e      	b.n	8001302 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d107      	bne.n	80012dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e019      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40007000 	.word	0x40007000
 80012d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x500>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d106      	bne.n	80012fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000

08001310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0d0      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001324:	4b6a      	ldr	r3, [pc, #424]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d910      	bls.n	8001354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001332:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 0207 	bic.w	r2, r3, #7
 800133a:	4965      	ldr	r1, [pc, #404]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0b8      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136c:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001376:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800138e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	494d      	ldr	r1, [pc, #308]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d040      	beq.n	8001430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d115      	bne.n	80013ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ce:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e073      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06b      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f023 0203 	bic.w	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4936      	ldr	r1, [pc, #216]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001400:	f7ff fa4e 	bl	80008a0 <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001406:	e00a      	b.n	800141e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001408:	f7ff fa4a 	bl	80008a0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f241 3288 	movw	r2, #5000	; 0x1388
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e053      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 020c 	and.w	r2, r3, #12
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	429a      	cmp	r2, r3
 800142e:	d1eb      	bne.n	8001408 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d210      	bcs.n	8001460 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4922      	ldr	r1, [pc, #136]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e032      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4916      	ldr	r1, [pc, #88]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	490e      	ldr	r1, [pc, #56]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800149e:	f000 f821 	bl	80014e4 <HAL_RCC_GetSysClockFreq>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	490a      	ldr	r1, [pc, #40]	; (80014d8 <HAL_RCC_ClockConfig+0x1c8>)
 80014b0:	5ccb      	ldrb	r3, [r1, r3]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1cc>)
 80014b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1d0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f908 	bl	80006d4 <HAL_InitTick>

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	08003520 	.word	0x08003520
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_RCC_GetSysClockFreq+0x94>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b04      	cmp	r3, #4
 800150c:	d002      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x30>
 800150e:	2b08      	cmp	r3, #8
 8001510:	d003      	beq.n	800151a <HAL_RCC_GetSysClockFreq+0x36>
 8001512:	e027      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	613b      	str	r3, [r7, #16]
      break;
 8001518:	e027      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d010      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_RCC_GetSysClockFreq+0x94>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0c5b      	lsrs	r3, r3, #17
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	4a11      	ldr	r2, [pc, #68]	; (8001584 <HAL_RCC_GetSysClockFreq+0xa0>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_RCC_GetSysClockFreq+0x98>)
 8001546:	fb03 f202 	mul.w	r2, r3, r2
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e004      	b.n	800155e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	613b      	str	r3, [r7, #16]
      break;
 8001562:	e002      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_RCC_GetSysClockFreq+0x98>)
 8001566:	613b      	str	r3, [r7, #16]
      break;
 8001568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800156a:	693b      	ldr	r3, [r7, #16]
}
 800156c:	4618      	mov	r0, r3
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	007a1200 	.word	0x007a1200
 8001580:	08003538 	.word	0x08003538
 8001584:	08003548 	.word	0x08003548
 8001588:	003d0900 	.word	0x003d0900

0800158c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001590:	4b02      	ldr	r3, [pc, #8]	; (800159c <HAL_RCC_GetHCLKFreq+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000000 	.word	0x20000000

080015a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015a4:	f7ff fff2 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	4903      	ldr	r1, [pc, #12]	; (80015c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40021000 	.word	0x40021000
 80015c4:	08003530 	.word	0x08003530

080015c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015cc:	f7ff ffde 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	0adb      	lsrs	r3, r3, #11
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	4903      	ldr	r1, [pc, #12]	; (80015ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08003530 	.word	0x08003530

080015f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	220f      	movs	r2, #15
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCC_GetClockConfig+0x58>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_RCC_GetClockConfig+0x58>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_GetClockConfig+0x58>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_RCC_GetClockConfig+0x58>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_RCC_GetClockConfig+0x5c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0207 	and.w	r2, r3, #7
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000
 800164c:	40022000 	.word	0x40022000

08001650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <RCC_Delay+0x34>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <RCC_Delay+0x38>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0a5b      	lsrs	r3, r3, #9
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800166c:	bf00      	nop
  }
  while (Delay --);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	60fa      	str	r2, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f9      	bne.n	800166c <RCC_Delay+0x1c>
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000000 	.word	0x20000000
 8001688:	10624dd3 	.word	0x10624dd3

0800168c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e041      	b.n	8001722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f839 	bl	800172a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4610      	mov	r0, r2
 80016cc:	f000 f9b4 	bl	8001a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d001      	beq.n	8001754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e03a      	b.n	80017ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f042 0201 	orr.w	r2, r2, #1
 800176a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_TIM_Base_Start_IT+0x98>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00e      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x58>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177e:	d009      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x58>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_TIM_Base_Start_IT+0x58>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <HAL_TIM_Base_Start_IT+0xa0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d111      	bne.n	80017b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d010      	beq.n	80017c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b6:	e007      	b.n	80017c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40012c00 	.word	0x40012c00
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40000800 	.word	0x40000800

080017e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d122      	bne.n	800183c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d11b      	bne.n	800183c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0202 	mvn.w	r2, #2
 800180c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8ed 	bl	8001a02 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f8e0 	bl	80019f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f8ef 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b04      	cmp	r3, #4
 8001848:	d122      	bne.n	8001890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11b      	bne.n	8001890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 0204 	mvn.w	r2, #4
 8001860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8c3 	bl	8001a02 <HAL_TIM_IC_CaptureCallback>
 800187c:	e005      	b.n	800188a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8b6 	bl	80019f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f8c5 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b08      	cmp	r3, #8
 800189c:	d122      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d11b      	bne.n	80018e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0208 	mvn.w	r2, #8
 80018b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2204      	movs	r2, #4
 80018ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f899 	bl	8001a02 <HAL_TIM_IC_CaptureCallback>
 80018d0:	e005      	b.n	80018de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f88c 	bl	80019f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f89b 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d122      	bne.n	8001938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d11b      	bne.n	8001938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f06f 0210 	mvn.w	r2, #16
 8001908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2208      	movs	r2, #8
 800190e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f86f 	bl	8001a02 <HAL_TIM_IC_CaptureCallback>
 8001924:	e005      	b.n	8001932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f862 	bl	80019f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f871 	bl	8001a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10e      	bne.n	8001964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d107      	bne.n	8001964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0201 	mvn.w	r2, #1
 800195c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7fe fde4 	bl	800052c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196e:	2b80      	cmp	r3, #128	; 0x80
 8001970:	d10e      	bne.n	8001990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197c:	2b80      	cmp	r3, #128	; 0x80
 800197e:	d107      	bne.n	8001990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f8bf 	bl	8001b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199a:	2b40      	cmp	r3, #64	; 0x40
 800199c:	d10e      	bne.n	80019bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a8:	2b40      	cmp	r3, #64	; 0x40
 80019aa:	d107      	bne.n	80019bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f835 	bl	8001a26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d10e      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d107      	bne.n	80019e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0220 	mvn.w	r2, #32
 80019e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f88a 	bl	8001afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a29      	ldr	r2, [pc, #164]	; (8001af0 <TIM_Base_SetConfig+0xb8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d00b      	beq.n	8001a68 <TIM_Base_SetConfig+0x30>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a56:	d007      	beq.n	8001a68 <TIM_Base_SetConfig+0x30>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <TIM_Base_SetConfig+0xbc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d003      	beq.n	8001a68 <TIM_Base_SetConfig+0x30>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <TIM_Base_SetConfig+0xc0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d108      	bne.n	8001a7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <TIM_Base_SetConfig+0xb8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00b      	beq.n	8001a9a <TIM_Base_SetConfig+0x62>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d007      	beq.n	8001a9a <TIM_Base_SetConfig+0x62>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <TIM_Base_SetConfig+0xbc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d003      	beq.n	8001a9a <TIM_Base_SetConfig+0x62>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a18      	ldr	r2, [pc, #96]	; (8001af8 <TIM_Base_SetConfig+0xc0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d108      	bne.n	8001aac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <TIM_Base_SetConfig+0xb8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d103      	bne.n	8001ae0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	615a      	str	r2, [r3, #20]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40000400 	.word	0x40000400
 8001af8:	40000800 	.word	0x40000800

08001afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e042      	b.n	8001bb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fd40 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f91d 	bl	8001da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d16d      	bne.n	8001cbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <HAL_UART_Transmit+0x2c>
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e066      	b.n	8001cbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2221      	movs	r2, #33	; 0x21
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe fe4f 	bl	80008a0 <HAL_GetTick>
 8001c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	88fa      	ldrh	r2, [r7, #6]
 8001c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c18:	d108      	bne.n	8001c2c <HAL_UART_Transmit+0x6c>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	e003      	b.n	8001c34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c34:	e02a      	b.n	8001c8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	68f8      	ldr	r0, [r7, #12]
 8001c42:	f000 f840 	bl	8001cc6 <UART_WaitOnFlagUntilTimeout>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e036      	b.n	8001cbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10b      	bne.n	8001c6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	e007      	b.n	8001c7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1cf      	bne.n	8001c36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2140      	movs	r1, #64	; 0x40
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f810 	bl	8001cc6 <UART_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e006      	b.n	8001cbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b090      	sub	sp, #64	; 0x40
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd6:	e050      	b.n	8001d7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cde:	d04c      	beq.n	8001d7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d007      	beq.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ce6:	f7fe fddb 	bl	80008a0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d241      	bcs.n	8001d7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	e853 3f00 	ldrex	r3, [r3]
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	330c      	adds	r3, #12
 8001d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d16:	637a      	str	r2, [r7, #52]	; 0x34
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d1e:	e841 2300 	strex	r3, r2, [r1]
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1e5      	bne.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	3314      	adds	r3, #20
 8001d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	e853 3f00 	ldrex	r3, [r3]
 8001d38:	613b      	str	r3, [r7, #16]
   return(result);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3314      	adds	r3, #20
 8001d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d4a:	623a      	str	r2, [r7, #32]
 8001d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4e:	69f9      	ldr	r1, [r7, #28]
 8001d50:	6a3a      	ldr	r2, [r7, #32]
 8001d52:	e841 2300 	strex	r3, r2, [r1]
 8001d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1e5      	bne.n	8001d2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e00f      	b.n	8001d9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	bf0c      	ite	eq
 8001d8a:	2301      	moveq	r3, #1
 8001d8c:	2300      	movne	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d09f      	beq.n	8001cd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3740      	adds	r7, #64	; 0x40
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dde:	f023 030c 	bic.w	r3, r3, #12
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	430b      	orrs	r3, r1
 8001dea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <UART_SetConfig+0x114>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d103      	bne.n	8001e14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e0c:	f7ff fbdc 	bl	80015c8 <HAL_RCC_GetPCLK2Freq>
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	e002      	b.n	8001e1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e14:	f7ff fbc4 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8001e18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	009a      	lsls	r2, r3, #2
 8001e24:	441a      	add	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <UART_SetConfig+0x118>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	0119      	lsls	r1, r3, #4
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009a      	lsls	r2, r3, #2
 8001e44:	441a      	add	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <UART_SetConfig+0x118>)
 8001e52:	fba3 0302 	umull	r0, r3, r3, r2
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2064      	movs	r0, #100	; 0x64
 8001e5a:	fb00 f303 	mul.w	r3, r0, r3
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	3332      	adds	r3, #50	; 0x32
 8001e64:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <UART_SetConfig+0x118>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e70:	4419      	add	r1, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <UART_SetConfig+0x118>)
 8001e8a:	fba3 0302 	umull	r0, r3, r3, r2
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	fb00 f303 	mul.w	r3, r0, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	3332      	adds	r3, #50	; 0x32
 8001e9c:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <UART_SetConfig+0x118>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	440a      	add	r2, r1
 8001eae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	51eb851f 	.word	0x51eb851f

08001ec0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed2:	2b84      	cmp	r3, #132	; 0x84
 8001ed4:	d005      	beq.n	8001ee2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001ed6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	3303      	adds	r3, #3
 8001ee0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001ef2:	f000 fae7 	bl	80024c4 <vTaskStartScheduler>
  
  return osOK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}

08001efc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af04      	add	r7, sp, #16
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d020      	beq.n	8001f50 <osThreadCreate+0x54>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d01c      	beq.n	8001f50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685c      	ldr	r4, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691e      	ldr	r6, [r3, #16]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ffc9 	bl	8001ec0 <makeFreeRtosPriority>
 8001f2e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f38:	9202      	str	r2, [sp, #8]
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	9100      	str	r1, [sp, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	4632      	mov	r2, r6
 8001f42:	4629      	mov	r1, r5
 8001f44:	4620      	mov	r0, r4
 8001f46:	f000 f8e8 	bl	800211a <xTaskCreateStatic>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e01c      	b.n	8001f8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685c      	ldr	r4, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f5c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ffab 	bl	8001ec0 <makeFreeRtosPriority>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	9200      	str	r2, [sp, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4632      	mov	r2, r6
 8001f78:	4629      	mov	r1, r5
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f000 f929 	bl	80021d2 <xTaskCreate>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f94 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <osDelay+0x16>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	e000      	b.n	8001fac <osDelay+0x18>
 8001faa:	2301      	movs	r3, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 fa55 	bl	800245c <vTaskDelay>
  
  return osOK;
 8001fb2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f103 0208 	add.w	r2, r3, #8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f103 0208 	add.w	r2, r3, #8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f103 0208 	add.w	r2, r3, #8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d103      	bne.n	8002078 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e00c      	b.n	8002092 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3308      	adds	r3, #8
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	e002      	b.n	8002086 <vListInsert+0x2e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	429a      	cmp	r2, r3
 8002090:	d2f6      	bcs.n	8002080 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6892      	ldr	r2, [r2, #8]
 80020de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6852      	ldr	r2, [r2, #4]
 80020e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d103      	bne.n	80020fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	1e5a      	subs	r2, r3, #1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800211a:	b580      	push	{r7, lr}
 800211c:	b08e      	sub	sp, #56	; 0x38
 800211e:	af04      	add	r7, sp, #16
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10a      	bne.n	8002144 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002140:	bf00      	nop
 8002142:	e7fe      	b.n	8002142 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <xTaskCreateStatic+0x46>
	__asm volatile
 800214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214e:	f383 8811 	msr	BASEPRI, r3
 8002152:	f3bf 8f6f 	isb	sy
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	61fb      	str	r3, [r7, #28]
}
 800215c:	bf00      	nop
 800215e:	e7fe      	b.n	800215e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002160:	23a0      	movs	r3, #160	; 0xa0
 8002162:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2ba0      	cmp	r3, #160	; 0xa0
 8002168:	d00a      	beq.n	8002180 <xTaskCreateStatic+0x66>
	__asm volatile
 800216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
 800217a:	61bb      	str	r3, [r7, #24]
}
 800217c:	bf00      	nop
 800217e:	e7fe      	b.n	800217e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	2b00      	cmp	r3, #0
 8002184:	d01e      	beq.n	80021c4 <xTaskCreateStatic+0xaa>
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800218c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2202      	movs	r2, #2
 800219a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800219e:	2300      	movs	r3, #0
 80021a0:	9303      	str	r3, [sp, #12]
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	9302      	str	r3, [sp, #8]
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f850 	bl	800225c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80021bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021be:	f000 f8e3 	bl	8002388 <prvAddNewTaskToReadyList>
 80021c2:	e001      	b.n	80021c8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80021c8:	697b      	ldr	r3, [r7, #20]
	}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b08c      	sub	sp, #48	; 0x30
 80021d6:	af04      	add	r7, sp, #16
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fe9a 	bl	8002f20 <pvPortMalloc>
 80021ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00e      	beq.n	8002212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80021f4:	20a0      	movs	r0, #160	; 0xa0
 80021f6:	f000 fe93 	bl	8002f20 <pvPortMalloc>
 80021fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
 8002208:	e005      	b.n	8002216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f000 ff4c 	bl	80030a8 <vPortFree>
 8002210:	e001      	b.n	8002216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	2300      	movs	r3, #0
 8002228:	9303      	str	r3, [sp, #12]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	9302      	str	r3, [sp, #8]
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f80e 	bl	800225c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002240:	69f8      	ldr	r0, [r7, #28]
 8002242:	f000 f8a1 	bl	8002388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	e002      	b.n	8002252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
 8002250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002252:	69bb      	ldr	r3, [r7, #24]
	}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002274:	3b01      	subs	r3, #1
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	f023 0307 	bic.w	r3, r3, #7
 8002282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002292:	f383 8811 	msr	BASEPRI, r3
 8002296:	f3bf 8f6f 	isb	sy
 800229a:	f3bf 8f4f 	dsb	sy
 800229e:	617b      	str	r3, [r7, #20]
}
 80022a0:	bf00      	nop
 80022a2:	e7fe      	b.n	80022a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	e012      	b.n	80022d0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	7819      	ldrb	r1, [r3, #0]
 80022b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	3334      	adds	r3, #52	; 0x34
 80022ba:	460a      	mov	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d9e9      	bls.n	80022aa <prvInitialiseNewTask+0x4e>
 80022d6:	e000      	b.n	80022da <prvInitialiseNewTask+0x7e>
		{
			break;
 80022d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e4:	2b06      	cmp	r3, #6
 80022e6:	d901      	bls.n	80022ec <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022e8:	2306      	movs	r3, #6
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	2200      	movs	r2, #0
 80022fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	3304      	adds	r3, #4
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fe79 	bl	8001ffa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	3318      	adds	r3, #24
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe74 	bl	8001ffa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	f1c3 0207 	rsb	r2, r3, #7
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	2200      	movs	r2, #0
 800232c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	2200      	movs	r2, #0
 8002334:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	334c      	adds	r3, #76	; 0x4c
 800233c:	224c      	movs	r2, #76	; 0x4c
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f000 ffc5 	bl	80032d0 <memset>
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	4a0c      	ldr	r2, [pc, #48]	; (800237c <prvInitialiseNewTask+0x120>)
 800234a:	651a      	str	r2, [r3, #80]	; 0x50
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <prvInitialiseNewTask+0x124>)
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <prvInitialiseNewTask+0x128>)
 8002356:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	69b8      	ldr	r0, [r7, #24]
 800235e:	f000 fc29 	bl	8002bb4 <pxPortInitialiseStack>
 8002362:	4602      	mov	r2, r0
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002372:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002374:	bf00      	nop
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000115c 	.word	0x2000115c
 8002380:	200011c4 	.word	0x200011c4
 8002384:	2000122c 	.word	0x2000122c

08002388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002390:	f000 fd04 	bl	8002d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <prvAddNewTaskToReadyList+0xb8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3301      	adds	r3, #1
 800239a:	4a29      	ldr	r2, [pc, #164]	; (8002440 <prvAddNewTaskToReadyList+0xb8>)
 800239c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <prvAddNewTaskToReadyList+0xbc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80023a6:	4a27      	ldr	r2, [pc, #156]	; (8002444 <prvAddNewTaskToReadyList+0xbc>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80023ac:	4b24      	ldr	r3, [pc, #144]	; (8002440 <prvAddNewTaskToReadyList+0xb8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d110      	bne.n	80023d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80023b4:	f000 fad2 	bl	800295c <prvInitialiseTaskLists>
 80023b8:	e00d      	b.n	80023d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <prvAddNewTaskToReadyList+0xc0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <prvAddNewTaskToReadyList+0xbc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d802      	bhi.n	80023d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80023d0:	4a1c      	ldr	r2, [pc, #112]	; (8002444 <prvAddNewTaskToReadyList+0xbc>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <prvAddNewTaskToReadyList+0xc4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <prvAddNewTaskToReadyList+0xc4>)
 80023de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2201      	movs	r2, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <prvAddNewTaskToReadyList+0xc8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <prvAddNewTaskToReadyList+0xc8>)
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4a15      	ldr	r2, [pc, #84]	; (8002454 <prvAddNewTaskToReadyList+0xcc>)
 8002400:	441a      	add	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff fe02 	bl	8002012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800240e:	f000 fcf5 	bl	8002dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002412:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <prvAddNewTaskToReadyList+0xc0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00e      	beq.n	8002438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <prvAddNewTaskToReadyList+0xbc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <prvAddNewTaskToReadyList+0xd0>)
 800242a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000510 	.word	0x20000510
 8002444:	20000410 	.word	0x20000410
 8002448:	2000051c 	.word	0x2000051c
 800244c:	2000052c 	.word	0x2000052c
 8002450:	20000518 	.word	0x20000518
 8002454:	20000414 	.word	0x20000414
 8002458:	e000ed04 	.word	0xe000ed04

0800245c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d017      	beq.n	800249e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <vTaskDelay+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <vTaskDelay+0x30>
	__asm volatile
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	60bb      	str	r3, [r7, #8]
}
 8002488:	bf00      	nop
 800248a:	e7fe      	b.n	800248a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800248c:	f000 f884 	bl	8002598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002490:	2100      	movs	r1, #0
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fb28 	bl	8002ae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002498:	f000 f88c 	bl	80025b4 <xTaskResumeAll>
 800249c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <vTaskDelay+0x64>)
 80024a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000538 	.word	0x20000538
 80024c0:	e000ed04 	.word	0xe000ed04

080024c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80024d2:	463a      	mov	r2, r7
 80024d4:	1d39      	adds	r1, r7, #4
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fd fe38 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	9202      	str	r2, [sp, #8]
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2300      	movs	r3, #0
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	2300      	movs	r3, #0
 80024f0:	460a      	mov	r2, r1
 80024f2:	4921      	ldr	r1, [pc, #132]	; (8002578 <vTaskStartScheduler+0xb4>)
 80024f4:	4821      	ldr	r0, [pc, #132]	; (800257c <vTaskStartScheduler+0xb8>)
 80024f6:	f7ff fe10 	bl	800211a <xTaskCreateStatic>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <vTaskStartScheduler+0xbc>)
 80024fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002500:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <vTaskStartScheduler+0xbc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002508:	2301      	movs	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e001      	b.n	8002512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11b      	bne.n	8002550 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	613b      	str	r3, [r7, #16]
}
 800252a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <vTaskStartScheduler+0xc0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	334c      	adds	r3, #76	; 0x4c
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <vTaskStartScheduler+0xc4>)
 8002534:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <vTaskStartScheduler+0xc8>)
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <vTaskStartScheduler+0xcc>)
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <vTaskStartScheduler+0xd0>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800254a:	f000 fbb5 	bl	8002cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800254e:	e00e      	b.n	800256e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002556:	d10a      	bne.n	800256e <vTaskStartScheduler+0xaa>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	60fb      	str	r3, [r7, #12]
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <vTaskStartScheduler+0xa8>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	08003518 	.word	0x08003518
 800257c:	0800292d 	.word	0x0800292d
 8002580:	20000534 	.word	0x20000534
 8002584:	20000410 	.word	0x20000410
 8002588:	2000005c 	.word	0x2000005c
 800258c:	20000530 	.word	0x20000530
 8002590:	2000051c 	.word	0x2000051c
 8002594:	20000514 	.word	0x20000514

08002598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <vTaskSuspendAll+0x18>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3301      	adds	r3, #1
 80025a2:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <vTaskSuspendAll+0x18>)
 80025a4:	6013      	str	r3, [r2, #0]
}
 80025a6:	bf00      	nop
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000538 	.word	0x20000538

080025b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <xTaskResumeAll+0x114>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	603b      	str	r3, [r7, #0]
}
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80025e0:	f000 fbdc 	bl	8002d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <xTaskResumeAll+0x114>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <xTaskResumeAll+0x114>)
 80025ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <xTaskResumeAll+0x114>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d161      	bne.n	80026ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025f6:	4b35      	ldr	r3, [pc, #212]	; (80026cc <xTaskResumeAll+0x118>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d05d      	beq.n	80026ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025fe:	e02e      	b.n	800265e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002600:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <xTaskResumeAll+0x11c>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3318      	adds	r3, #24
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fd5b 	bl	80020c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3304      	adds	r3, #4
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fd56 	bl	80020c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2201      	movs	r2, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <xTaskResumeAll+0x120>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <xTaskResumeAll+0x120>)
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <xTaskResumeAll+0x124>)
 800263c:	441a      	add	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7ff fce4 	bl	8002012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <xTaskResumeAll+0x128>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <xTaskResumeAll+0x12c>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <xTaskResumeAll+0x11c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cc      	bne.n	8002600 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800266c:	f000 fa18 	bl	8002aa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <xTaskResumeAll+0x130>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800267c:	f000 f836 	bl	80026ec <xTaskIncrementTick>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <xTaskResumeAll+0x12c>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f1      	bne.n	800267c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <xTaskResumeAll+0x130>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <xTaskResumeAll+0x12c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80026a6:	2301      	movs	r3, #1
 80026a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <xTaskResumeAll+0x134>)
 80026ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026ba:	f000 fb9f 	bl	8002dfc <vPortExitCritical>

	return xAlreadyYielded;
 80026be:	68bb      	ldr	r3, [r7, #8]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000538 	.word	0x20000538
 80026cc:	20000510 	.word	0x20000510
 80026d0:	200004d0 	.word	0x200004d0
 80026d4:	20000518 	.word	0x20000518
 80026d8:	20000414 	.word	0x20000414
 80026dc:	20000410 	.word	0x20000410
 80026e0:	20000524 	.word	0x20000524
 80026e4:	20000520 	.word	0x20000520
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026f6:	4b51      	ldr	r3, [pc, #324]	; (800283c <xTaskIncrementTick+0x150>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 808d 	bne.w	800281a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002700:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <xTaskIncrementTick+0x154>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002708:	4a4d      	ldr	r2, [pc, #308]	; (8002840 <xTaskIncrementTick+0x154>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d120      	bne.n	8002756 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <xTaskIncrementTick+0x158>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <xTaskIncrementTick+0x48>
	__asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	603b      	str	r3, [r7, #0]
}
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <xTaskIncrementTick+0x46>
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <xTaskIncrementTick+0x158>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <xTaskIncrementTick+0x15c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a41      	ldr	r2, [pc, #260]	; (8002844 <xTaskIncrementTick+0x158>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4a41      	ldr	r2, [pc, #260]	; (8002848 <xTaskIncrementTick+0x15c>)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b40      	ldr	r3, [pc, #256]	; (800284c <xTaskIncrementTick+0x160>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a3f      	ldr	r2, [pc, #252]	; (800284c <xTaskIncrementTick+0x160>)
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	f000 f9a5 	bl	8002aa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002756:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <xTaskIncrementTick+0x164>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d34d      	bcc.n	80027fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <xTaskIncrementTick+0x158>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <xTaskIncrementTick+0x82>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <xTaskIncrementTick+0x84>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <xTaskIncrementTick+0x164>)
 8002776:	f04f 32ff 	mov.w	r2, #4294967295
 800277a:	601a      	str	r2, [r3, #0]
					break;
 800277c:	e03e      	b.n	80027fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800277e:	4b31      	ldr	r3, [pc, #196]	; (8002844 <xTaskIncrementTick+0x158>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d203      	bcs.n	800279e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002796:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <xTaskIncrementTick+0x164>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6013      	str	r3, [r2, #0]
						break;
 800279c:	e02e      	b.n	80027fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3304      	adds	r3, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fc90 	bl	80020c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d004      	beq.n	80027ba <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3318      	adds	r3, #24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff fc87 	bl	80020c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	2201      	movs	r2, #1
 80027c0:	409a      	lsls	r2, r3
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <xTaskIncrementTick+0x168>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	4a22      	ldr	r2, [pc, #136]	; (8002854 <xTaskIncrementTick+0x168>)
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <xTaskIncrementTick+0x16c>)
 80027da:	441a      	add	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3304      	adds	r3, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	4610      	mov	r0, r2
 80027e4:	f7ff fc15 	bl	8002012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <xTaskIncrementTick+0x170>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d3b4      	bcc.n	8002760 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027fa:	e7b1      	b.n	8002760 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <xTaskIncrementTick+0x170>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002802:	4915      	ldr	r1, [pc, #84]	; (8002858 <xTaskIncrementTick+0x16c>)
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d907      	bls.n	8002824 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002814:	2301      	movs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	e004      	b.n	8002824 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <xTaskIncrementTick+0x174>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	4a0f      	ldr	r2, [pc, #60]	; (8002860 <xTaskIncrementTick+0x174>)
 8002822:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <xTaskIncrementTick+0x178>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800282c:	2301      	movs	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002830:	697b      	ldr	r3, [r7, #20]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000538 	.word	0x20000538
 8002840:	20000514 	.word	0x20000514
 8002844:	200004c8 	.word	0x200004c8
 8002848:	200004cc 	.word	0x200004cc
 800284c:	20000528 	.word	0x20000528
 8002850:	20000530 	.word	0x20000530
 8002854:	20000518 	.word	0x20000518
 8002858:	20000414 	.word	0x20000414
 800285c:	20000410 	.word	0x20000410
 8002860:	20000520 	.word	0x20000520
 8002864:	20000524 	.word	0x20000524

08002868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800286e:	4b29      	ldr	r3, [pc, #164]	; (8002914 <vTaskSwitchContext+0xac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <vTaskSwitchContext+0xb0>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800287c:	e044      	b.n	8002908 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <vTaskSwitchContext+0xb0>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <vTaskSwitchContext+0xb4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	f1c3 031f 	rsb	r3, r3, #31
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	4921      	ldr	r1, [pc, #132]	; (8002920 <vTaskSwitchContext+0xb8>)
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	607b      	str	r3, [r7, #4]
}
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <vTaskSwitchContext+0x5a>
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4a14      	ldr	r2, [pc, #80]	; (8002920 <vTaskSwitchContext+0xb8>)
 80028d0:	4413      	add	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	3308      	adds	r3, #8
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d104      	bne.n	80028f4 <vTaskSwitchContext+0x8c>
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <vTaskSwitchContext+0xbc>)
 80028fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <vTaskSwitchContext+0xbc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	334c      	adds	r3, #76	; 0x4c
 8002904:	4a08      	ldr	r2, [pc, #32]	; (8002928 <vTaskSwitchContext+0xc0>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000538 	.word	0x20000538
 8002918:	20000524 	.word	0x20000524
 800291c:	20000518 	.word	0x20000518
 8002920:	20000414 	.word	0x20000414
 8002924:	20000410 	.word	0x20000410
 8002928:	2000005c 	.word	0x2000005c

0800292c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002934:	f000 f852 	bl	80029dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <prvIdleTask+0x28>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d9f9      	bls.n	8002934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002940:	4b05      	ldr	r3, [pc, #20]	; (8002958 <prvIdleTask+0x2c>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002950:	e7f0      	b.n	8002934 <prvIdleTask+0x8>
 8002952:	bf00      	nop
 8002954:	20000414 	.word	0x20000414
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	e00c      	b.n	8002982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <prvInitialiseTaskLists+0x60>)
 8002974:	4413      	add	r3, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fb20 	bl	8001fbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3301      	adds	r3, #1
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d9ef      	bls.n	8002968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <prvInitialiseTaskLists+0x64>)
 800298a:	f7ff fb17 	bl	8001fbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <prvInitialiseTaskLists+0x68>)
 8002990:	f7ff fb14 	bl	8001fbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <prvInitialiseTaskLists+0x6c>)
 8002996:	f7ff fb11 	bl	8001fbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800299a:	480c      	ldr	r0, [pc, #48]	; (80029cc <prvInitialiseTaskLists+0x70>)
 800299c:	f7ff fb0e 	bl	8001fbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029a0:	480b      	ldr	r0, [pc, #44]	; (80029d0 <prvInitialiseTaskLists+0x74>)
 80029a2:	f7ff fb0b 	bl	8001fbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <prvInitialiseTaskLists+0x78>)
 80029a8:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <prvInitialiseTaskLists+0x64>)
 80029aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <prvInitialiseTaskLists+0x7c>)
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <prvInitialiseTaskLists+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000414 	.word	0x20000414
 80029c0:	200004a0 	.word	0x200004a0
 80029c4:	200004b4 	.word	0x200004b4
 80029c8:	200004d0 	.word	0x200004d0
 80029cc:	200004e4 	.word	0x200004e4
 80029d0:	200004fc 	.word	0x200004fc
 80029d4:	200004c8 	.word	0x200004c8
 80029d8:	200004cc 	.word	0x200004cc

080029dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029e2:	e019      	b.n	8002a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80029e4:	f000 f9da 	bl	8002d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <prvCheckTasksWaitingTermination+0x50>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fb67 	bl	80020c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <prvCheckTasksWaitingTermination+0x54>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <prvCheckTasksWaitingTermination+0x54>)
 8002a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <prvCheckTasksWaitingTermination+0x58>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <prvCheckTasksWaitingTermination+0x58>)
 8002a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a0e:	f000 f9f5 	bl	8002dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f810 	bl	8002a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <prvCheckTasksWaitingTermination+0x58>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e1      	bne.n	80029e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200004e4 	.word	0x200004e4
 8002a30:	20000510 	.word	0x20000510
 8002a34:	200004f8 	.word	0x200004f8

08002a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	334c      	adds	r3, #76	; 0x4c
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fc4b 	bl	80032e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d108      	bne.n	8002a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fb25 	bl	80030a8 <vPortFree>
				vPortFree( pxTCB );
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fb22 	bl	80030a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a64:	e018      	b.n	8002a98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d103      	bne.n	8002a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fb19 	bl	80030a8 <vPortFree>
	}
 8002a76:	e00f      	b.n	8002a98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d00a      	beq.n	8002a98 <prvDeleteTCB+0x60>
	__asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	60fb      	str	r3, [r7, #12]
}
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <prvDeleteTCB+0x5e>
	}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <prvResetNextTaskUnblockTime+0x40>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <prvResetNextTaskUnblockTime+0x14>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <prvResetNextTaskUnblockTime+0x16>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <prvResetNextTaskUnblockTime+0x44>)
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ac2:	e008      	b.n	8002ad6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <prvResetNextTaskUnblockTime+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <prvResetNextTaskUnblockTime+0x44>)
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	200004c8 	.word	0x200004c8
 8002ae4:	20000530 	.word	0x20000530

08002ae8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3304      	adds	r3, #4
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fae2 	bl	80020c8 <uxListRemove>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2201      	movs	r2, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43da      	mvns	r2, r3
 8002b18:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	4a20      	ldr	r2, [pc, #128]	; (8002ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d10a      	bne.n	8002b40 <prvAddCurrentTaskToDelayedList+0x58>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3304      	adds	r3, #4
 8002b36:	4619      	mov	r1, r3
 8002b38:	481a      	ldr	r0, [pc, #104]	; (8002ba4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b3a:	f7ff fa6a 	bl	8002012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b3e:	e026      	b.n	8002b8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d209      	bcs.n	8002b6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b58:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3304      	adds	r3, #4
 8002b62:	4619      	mov	r1, r3
 8002b64:	4610      	mov	r0, r2
 8002b66:	f7ff fa77 	bl	8002058 <vListInsert>
}
 8002b6a:	e010      	b.n	8002b8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3304      	adds	r3, #4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f7ff fa6d 	bl	8002058 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d202      	bcs.n	8002b8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002b88:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6013      	str	r3, [r2, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000514 	.word	0x20000514
 8002b9c:	20000410 	.word	0x20000410
 8002ba0:	20000518 	.word	0x20000518
 8002ba4:	200004fc 	.word	0x200004fc
 8002ba8:	200004cc 	.word	0x200004cc
 8002bac:	200004c8 	.word	0x200004c8
 8002bb0:	20000530 	.word	0x20000530

08002bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3b04      	subs	r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3b04      	subs	r3, #4
 8002bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f023 0201 	bic.w	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3b04      	subs	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002be4:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <pxPortInitialiseStack+0x54>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3b14      	subs	r3, #20
 8002bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	3b20      	subs	r3, #32
 8002bfa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	08002c0d 	.word	0x08002c0d

08002c0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <prvTaskExitError+0x54>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d00a      	beq.n	8002c36 <prvTaskExitError+0x2a>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	60fb      	str	r3, [r7, #12]
}
 8002c32:	bf00      	nop
 8002c34:	e7fe      	b.n	8002c34 <prvTaskExitError+0x28>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	60bb      	str	r3, [r7, #8]
}
 8002c48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002c4a:	bf00      	nop
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0fc      	beq.n	8002c4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002c52:	bf00      	nop
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2000000c 	.word	0x2000000c
	...

08002c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <pxCurrentTCBConst2>)
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	6808      	ldr	r0, [r1, #0]
 8002c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002c7a:	f380 8809 	msr	PSP, r0
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f380 8811 	msr	BASEPRI, r0
 8002c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002c8e:	4770      	bx	lr

08002c90 <pxCurrentTCBConst2>:
 8002c90:	20000410 	.word	0x20000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop

08002c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002c98:	4806      	ldr	r0, [pc, #24]	; (8002cb4 <prvPortStartFirstTask+0x1c>)
 8002c9a:	6800      	ldr	r0, [r0, #0]
 8002c9c:	6800      	ldr	r0, [r0, #0]
 8002c9e:	f380 8808 	msr	MSP, r0
 8002ca2:	b662      	cpsie	i
 8002ca4:	b661      	cpsie	f
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	df00      	svc	0
 8002cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002cb2:	bf00      	nop
 8002cb4:	e000ed08 	.word	0xe000ed08

08002cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cbe:	4b32      	ldr	r3, [pc, #200]	; (8002d88 <xPortStartScheduler+0xd0>)
 8002cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	22ff      	movs	r2, #255	; 0xff
 8002cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b2a      	ldr	r3, [pc, #168]	; (8002d8c <xPortStartScheduler+0xd4>)
 8002ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cec:	e009      	b.n	8002d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d0ef      	beq.n	8002cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f1c3 0307 	rsb	r3, r3, #7
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00a      	beq.n	8002d30 <xPortStartScheduler+0x78>
	__asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	60bb      	str	r3, [r7, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	e7fe      	b.n	8002d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d30:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <xPortStartScheduler+0xd8>)
 8002d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <xPortStartScheduler+0xdc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a10      	ldr	r2, [pc, #64]	; (8002d94 <xPortStartScheduler+0xdc>)
 8002d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <xPortStartScheduler+0xdc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <xPortStartScheduler+0xdc>)
 8002d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002d66:	f000 f8b9 	bl	8002edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <xPortStartScheduler+0xe0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002d70:	f7ff ff92 	bl	8002c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002d74:	f7ff fd78 	bl	8002868 <vTaskSwitchContext>
	prvTaskExitError();
 8002d78:	f7ff ff48 	bl	8002c0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e400 	.word	0xe000e400
 8002d8c:	2000053c 	.word	0x2000053c
 8002d90:	20000540 	.word	0x20000540
 8002d94:	e000ed20 	.word	0xe000ed20
 8002d98:	2000000c 	.word	0x2000000c

08002d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	607b      	str	r3, [r7, #4]
}
 8002db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <vPortEnterCritical+0x58>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <vPortEnterCritical+0x58>)
 8002dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <vPortEnterCritical+0x58>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d10f      	bne.n	8002de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <vPortEnterCritical+0x5c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	603b      	str	r3, [r7, #0]
}
 8002de4:	bf00      	nop
 8002de6:	e7fe      	b.n	8002de6 <vPortEnterCritical+0x4a>
	}
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	2000000c 	.word	0x2000000c
 8002df8:	e000ed04 	.word	0xe000ed04

08002dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <vPortExitCritical+0x4c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10a      	bne.n	8002e20 <vPortExitCritical+0x24>
	__asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	607b      	str	r3, [r7, #4]
}
 8002e1c:	bf00      	nop
 8002e1e:	e7fe      	b.n	8002e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002e20:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <vPortExitCritical+0x4c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <vPortExitCritical+0x4c>)
 8002e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <vPortExitCritical+0x4c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d105      	bne.n	8002e3e <vPortExitCritical+0x42>
 8002e32:	2300      	movs	r3, #0
 8002e34:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	2000000c 	.word	0x2000000c
 8002e4c:	00000000 	.word	0x00000000

08002e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002e50:	f3ef 8009 	mrs	r0, PSP
 8002e54:	f3bf 8f6f 	isb	sy
 8002e58:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <pxCurrentTCBConst>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e60:	6010      	str	r0, [r2, #0]
 8002e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002e6a:	f380 8811 	msr	BASEPRI, r0
 8002e6e:	f7ff fcfb 	bl	8002868 <vTaskSwitchContext>
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f380 8811 	msr	BASEPRI, r0
 8002e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e7e:	6819      	ldr	r1, [r3, #0]
 8002e80:	6808      	ldr	r0, [r1, #0]
 8002e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e86:	f380 8809 	msr	PSP, r0
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	4770      	bx	lr

08002e90 <pxCurrentTCBConst>:
 8002e90:	20000410 	.word	0x20000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop

08002e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	607b      	str	r3, [r7, #4]
}
 8002eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002eb2:	f7ff fc1b 	bl	80026ec <xTaskIncrementTick>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <SysTick_Handler+0x40>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f383 8811 	msr	BASEPRI, r3
}
 8002ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <vPortSetupTimerInterrupt+0x30>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <vPortSetupTimerInterrupt+0x34>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <vPortSetupTimerInterrupt+0x38>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <vPortSetupTimerInterrupt+0x3c>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <vPortSetupTimerInterrupt+0x40>)
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002efe:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <vPortSetupTimerInterrupt+0x30>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	e000e010 	.word	0xe000e010
 8002f10:	e000e018 	.word	0xe000e018
 8002f14:	20000000 	.word	0x20000000
 8002f18:	10624dd3 	.word	0x10624dd3
 8002f1c:	e000e014 	.word	0xe000e014

08002f20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f2c:	f7ff fb34 	bl	8002598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f30:	4b58      	ldr	r3, [pc, #352]	; (8003094 <pvPortMalloc+0x174>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f38:	f000 f910 	bl	800315c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f3c:	4b56      	ldr	r3, [pc, #344]	; (8003098 <pvPortMalloc+0x178>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f040 808e 	bne.w	8003066 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01d      	beq.n	8002f8c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f50:	2208      	movs	r2, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d014      	beq.n	8002f8c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	3308      	adds	r3, #8
 8002f6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <pvPortMalloc+0x6c>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	617b      	str	r3, [r7, #20]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d069      	beq.n	8003066 <pvPortMalloc+0x146>
 8002f92:	4b42      	ldr	r3, [pc, #264]	; (800309c <pvPortMalloc+0x17c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d864      	bhi.n	8003066 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f9c:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <pvPortMalloc+0x180>)
 8002f9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002fa0:	4b3f      	ldr	r3, [pc, #252]	; (80030a0 <pvPortMalloc+0x180>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fa6:	e004      	b.n	8002fb2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d903      	bls.n	8002fc4 <pvPortMalloc+0xa4>
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f1      	bne.n	8002fa8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002fc4:	4b33      	ldr	r3, [pc, #204]	; (8003094 <pvPortMalloc+0x174>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d04b      	beq.n	8003066 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	4413      	add	r3, r2
 8002fd6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	2308      	movs	r3, #8
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d91f      	bls.n	8003030 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <pvPortMalloc+0xf8>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	613b      	str	r3, [r7, #16]
}
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	1ad2      	subs	r2, r2, r3
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800302a:	69b8      	ldr	r0, [r7, #24]
 800302c:	f000 f8f8 	bl	8003220 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <pvPortMalloc+0x17c>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	4a18      	ldr	r2, [pc, #96]	; (800309c <pvPortMalloc+0x17c>)
 800303c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <pvPortMalloc+0x17c>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <pvPortMalloc+0x184>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d203      	bcs.n	8003052 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <pvPortMalloc+0x17c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <pvPortMalloc+0x184>)
 8003050:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <pvPortMalloc+0x178>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	431a      	orrs	r2, r3
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003066:	f7ff faa5 	bl	80025b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <pvPortMalloc+0x16a>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60fb      	str	r3, [r7, #12]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <pvPortMalloc+0x168>
	return pvReturn;
 800308a:	69fb      	ldr	r3, [r7, #28]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	2000114c 	.word	0x2000114c
 8003098:	20001158 	.word	0x20001158
 800309c:	20001150 	.word	0x20001150
 80030a0:	20001144 	.word	0x20001144
 80030a4:	20001154 	.word	0x20001154

080030a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d048      	beq.n	800314c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030ba:	2308      	movs	r3, #8
 80030bc:	425b      	negs	r3, r3
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4413      	add	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <vPortFree+0xac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <vPortFree+0x44>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	60fb      	str	r3, [r7, #12]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <vPortFree+0x62>
	__asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60bb      	str	r3, [r7, #8]
}
 8003106:	bf00      	nop
 8003108:	e7fe      	b.n	8003108 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <vPortFree+0xac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d019      	beq.n	800314c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d115      	bne.n	800314c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <vPortFree+0xac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003130:	f7ff fa32 	bl	8002598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <vPortFree+0xb0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4413      	add	r3, r2
 800313e:	4a06      	ldr	r2, [pc, #24]	; (8003158 <vPortFree+0xb0>)
 8003140:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003142:	6938      	ldr	r0, [r7, #16]
 8003144:	f000 f86c 	bl	8003220 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003148:	f7ff fa34 	bl	80025b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800314c:	bf00      	nop
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20001158 	.word	0x20001158
 8003158:	20001150 	.word	0x20001150

0800315c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003162:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003166:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <prvHeapInit+0xac>)
 800316a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3307      	adds	r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0307 	bic.w	r3, r3, #7
 8003182:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <prvHeapInit+0xac>)
 800318c:	4413      	add	r3, r2
 800318e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <prvHeapInit+0xb0>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <prvHeapInit+0xb0>)
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031a8:	2208      	movs	r2, #8
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0307 	bic.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a15      	ldr	r2, [pc, #84]	; (8003210 <prvHeapInit+0xb4>)
 80031bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <prvHeapInit+0xb4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <prvHeapInit+0xb4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <prvHeapInit+0xb4>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	; (8003214 <prvHeapInit+0xb8>)
 80031ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	4a09      	ldr	r2, [pc, #36]	; (8003218 <prvHeapInit+0xbc>)
 80031f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <prvHeapInit+0xc0>)
 80031f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031fa:	601a      	str	r2, [r3, #0]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000544 	.word	0x20000544
 800320c:	20001144 	.word	0x20001144
 8003210:	2000114c 	.word	0x2000114c
 8003214:	20001154 	.word	0x20001154
 8003218:	20001150 	.word	0x20001150
 800321c:	20001158 	.word	0x20001158

08003220 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <prvInsertBlockIntoFreeList+0xa8>)
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e002      	b.n	8003234 <prvInsertBlockIntoFreeList+0x14>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d8f7      	bhi.n	800322e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d108      	bne.n	8003262 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	441a      	add	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	441a      	add	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d118      	bne.n	80032a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <prvInsertBlockIntoFreeList+0xac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d00d      	beq.n	800329e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	e008      	b.n	80032b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <prvInsertBlockIntoFreeList+0xac>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e003      	b.n	80032b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d002      	beq.n	80032be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20001144 	.word	0x20001144
 80032cc:	2000114c 	.word	0x2000114c

080032d0 <memset>:
 80032d0:	4603      	mov	r3, r0
 80032d2:	4402      	add	r2, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <_reclaim_reent>:
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <_reclaim_reent+0xa8>)
 80032e2:	b570      	push	{r4, r5, r6, lr}
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4604      	mov	r4, r0
 80032e8:	4283      	cmp	r3, r0
 80032ea:	d04b      	beq.n	8003384 <_reclaim_reent+0xa4>
 80032ec:	69c3      	ldr	r3, [r0, #28]
 80032ee:	b143      	cbz	r3, 8003302 <_reclaim_reent+0x22>
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d144      	bne.n	8003380 <_reclaim_reent+0xa0>
 80032f6:	69e3      	ldr	r3, [r4, #28]
 80032f8:	6819      	ldr	r1, [r3, #0]
 80032fa:	b111      	cbz	r1, 8003302 <_reclaim_reent+0x22>
 80032fc:	4620      	mov	r0, r4
 80032fe:	f000 f86b 	bl	80033d8 <_free_r>
 8003302:	6961      	ldr	r1, [r4, #20]
 8003304:	b111      	cbz	r1, 800330c <_reclaim_reent+0x2c>
 8003306:	4620      	mov	r0, r4
 8003308:	f000 f866 	bl	80033d8 <_free_r>
 800330c:	69e1      	ldr	r1, [r4, #28]
 800330e:	b111      	cbz	r1, 8003316 <_reclaim_reent+0x36>
 8003310:	4620      	mov	r0, r4
 8003312:	f000 f861 	bl	80033d8 <_free_r>
 8003316:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003318:	b111      	cbz	r1, 8003320 <_reclaim_reent+0x40>
 800331a:	4620      	mov	r0, r4
 800331c:	f000 f85c 	bl	80033d8 <_free_r>
 8003320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003322:	b111      	cbz	r1, 800332a <_reclaim_reent+0x4a>
 8003324:	4620      	mov	r0, r4
 8003326:	f000 f857 	bl	80033d8 <_free_r>
 800332a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800332c:	b111      	cbz	r1, 8003334 <_reclaim_reent+0x54>
 800332e:	4620      	mov	r0, r4
 8003330:	f000 f852 	bl	80033d8 <_free_r>
 8003334:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003336:	b111      	cbz	r1, 800333e <_reclaim_reent+0x5e>
 8003338:	4620      	mov	r0, r4
 800333a:	f000 f84d 	bl	80033d8 <_free_r>
 800333e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003340:	b111      	cbz	r1, 8003348 <_reclaim_reent+0x68>
 8003342:	4620      	mov	r0, r4
 8003344:	f000 f848 	bl	80033d8 <_free_r>
 8003348:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800334a:	b111      	cbz	r1, 8003352 <_reclaim_reent+0x72>
 800334c:	4620      	mov	r0, r4
 800334e:	f000 f843 	bl	80033d8 <_free_r>
 8003352:	6a23      	ldr	r3, [r4, #32]
 8003354:	b1b3      	cbz	r3, 8003384 <_reclaim_reent+0xa4>
 8003356:	4620      	mov	r0, r4
 8003358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800335c:	4718      	bx	r3
 800335e:	5949      	ldr	r1, [r1, r5]
 8003360:	b941      	cbnz	r1, 8003374 <_reclaim_reent+0x94>
 8003362:	3504      	adds	r5, #4
 8003364:	69e3      	ldr	r3, [r4, #28]
 8003366:	2d80      	cmp	r5, #128	; 0x80
 8003368:	68d9      	ldr	r1, [r3, #12]
 800336a:	d1f8      	bne.n	800335e <_reclaim_reent+0x7e>
 800336c:	4620      	mov	r0, r4
 800336e:	f000 f833 	bl	80033d8 <_free_r>
 8003372:	e7c0      	b.n	80032f6 <_reclaim_reent+0x16>
 8003374:	680e      	ldr	r6, [r1, #0]
 8003376:	4620      	mov	r0, r4
 8003378:	f000 f82e 	bl	80033d8 <_free_r>
 800337c:	4631      	mov	r1, r6
 800337e:	e7ef      	b.n	8003360 <_reclaim_reent+0x80>
 8003380:	2500      	movs	r5, #0
 8003382:	e7ef      	b.n	8003364 <_reclaim_reent+0x84>
 8003384:	bd70      	pop	{r4, r5, r6, pc}
 8003386:	bf00      	nop
 8003388:	2000005c 	.word	0x2000005c

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	2600      	movs	r6, #0
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <__libc_init_array+0x38>)
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <__libc_init_array+0x3c>)
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	f000 f870 	bl	8003480 <_init>
 80033a0:	2600      	movs	r6, #0
 80033a2:	4d0a      	ldr	r5, [pc, #40]	; (80033cc <__libc_init_array+0x40>)
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <__libc_init_array+0x44>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	0800354c 	.word	0x0800354c
 80033c8:	0800354c 	.word	0x0800354c
 80033cc:	0800354c 	.word	0x0800354c
 80033d0:	08003550 	.word	0x08003550

080033d4 <__retarget_lock_acquire_recursive>:
 80033d4:	4770      	bx	lr

080033d6 <__retarget_lock_release_recursive>:
 80033d6:	4770      	bx	lr

080033d8 <_free_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4605      	mov	r5, r0
 80033dc:	2900      	cmp	r1, #0
 80033de:	d040      	beq.n	8003462 <_free_r+0x8a>
 80033e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e4:	1f0c      	subs	r4, r1, #4
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfb8      	it	lt
 80033ea:	18e4      	addlt	r4, r4, r3
 80033ec:	f000 f83c 	bl	8003468 <__malloc_lock>
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <_free_r+0x8c>)
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	b933      	cbnz	r3, 8003404 <_free_r+0x2c>
 80033f6:	6063      	str	r3, [r4, #4]
 80033f8:	6014      	str	r4, [r2, #0]
 80033fa:	4628      	mov	r0, r5
 80033fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003400:	f000 b838 	b.w	8003474 <__malloc_unlock>
 8003404:	42a3      	cmp	r3, r4
 8003406:	d908      	bls.n	800341a <_free_r+0x42>
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	1821      	adds	r1, r4, r0
 800340c:	428b      	cmp	r3, r1
 800340e:	bf01      	itttt	eq
 8003410:	6819      	ldreq	r1, [r3, #0]
 8003412:	685b      	ldreq	r3, [r3, #4]
 8003414:	1809      	addeq	r1, r1, r0
 8003416:	6021      	streq	r1, [r4, #0]
 8003418:	e7ed      	b.n	80033f6 <_free_r+0x1e>
 800341a:	461a      	mov	r2, r3
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	b10b      	cbz	r3, 8003424 <_free_r+0x4c>
 8003420:	42a3      	cmp	r3, r4
 8003422:	d9fa      	bls.n	800341a <_free_r+0x42>
 8003424:	6811      	ldr	r1, [r2, #0]
 8003426:	1850      	adds	r0, r2, r1
 8003428:	42a0      	cmp	r0, r4
 800342a:	d10b      	bne.n	8003444 <_free_r+0x6c>
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	4401      	add	r1, r0
 8003430:	1850      	adds	r0, r2, r1
 8003432:	4283      	cmp	r3, r0
 8003434:	6011      	str	r1, [r2, #0]
 8003436:	d1e0      	bne.n	80033fa <_free_r+0x22>
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4408      	add	r0, r1
 800343e:	6010      	str	r0, [r2, #0]
 8003440:	6053      	str	r3, [r2, #4]
 8003442:	e7da      	b.n	80033fa <_free_r+0x22>
 8003444:	d902      	bls.n	800344c <_free_r+0x74>
 8003446:	230c      	movs	r3, #12
 8003448:	602b      	str	r3, [r5, #0]
 800344a:	e7d6      	b.n	80033fa <_free_r+0x22>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	1821      	adds	r1, r4, r0
 8003450:	428b      	cmp	r3, r1
 8003452:	bf01      	itttt	eq
 8003454:	6819      	ldreq	r1, [r3, #0]
 8003456:	685b      	ldreq	r3, [r3, #4]
 8003458:	1809      	addeq	r1, r1, r0
 800345a:	6021      	streq	r1, [r4, #0]
 800345c:	6063      	str	r3, [r4, #4]
 800345e:	6054      	str	r4, [r2, #4]
 8003460:	e7cb      	b.n	80033fa <_free_r+0x22>
 8003462:	bd38      	pop	{r3, r4, r5, pc}
 8003464:	20001298 	.word	0x20001298

08003468 <__malloc_lock>:
 8003468:	4801      	ldr	r0, [pc, #4]	; (8003470 <__malloc_lock+0x8>)
 800346a:	f7ff bfb3 	b.w	80033d4 <__retarget_lock_acquire_recursive>
 800346e:	bf00      	nop
 8003470:	20001294 	.word	0x20001294

08003474 <__malloc_unlock>:
 8003474:	4801      	ldr	r0, [pc, #4]	; (800347c <__malloc_unlock+0x8>)
 8003476:	f7ff bfae 	b.w	80033d6 <__retarget_lock_release_recursive>
 800347a:	bf00      	nop
 800347c:	20001294 	.word	0x20001294

08003480 <_init>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	bf00      	nop
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr

0800348c <_fini>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr
