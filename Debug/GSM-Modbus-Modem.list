
GSM-Modbus-Modem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d10  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed4  08003ed4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003ed4  08003ed4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ed4  08003ed4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b0  20000018  08003ef4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  08003ef4  000210c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010871  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1f  00000000  00000000  000308f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00033318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf1  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001874e  00000000  00000000  000350a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127ad  00000000  00000000  0004d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091eec  00000000  00000000  0005ffa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044b4  00000000  00000000  000f1e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000f6344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e08 	.word	0x08003e08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08003e08 	.word	0x08003e08

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000034 	.word	0x20000034
 800017c:	20000088 	.word	0x20000088

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fbb5 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f84d 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8e5 	bl	800035c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f88f 	bl	80002b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000196:	f000 f8b7 	bl	8000308 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <main+0x90>)
 800019c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001a0:	461d      	mov	r5, r3
 80001a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f002 fc3d 	bl	8002a34 <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a15      	ldr	r2, [pc, #84]	; (8000214 <main+0x94>)
 80001be:	6013      	str	r3, [r2, #0]

  /* definition and creation of modbusMastertas */
  osThreadDef(modbusMastertas, modbusMasterSend, osPriorityNormal, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x98>)
 80001c2:	f107 0420 	add.w	r4, r7, #32
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  modbusMastertasHandle = osThreadCreate(osThread(modbusMastertas), NULL);
 80001d4:	f107 0320 	add.w	r3, r7, #32
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 fc2a 	bl	8002a34 <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a0e      	ldr	r2, [pc, #56]	; (800021c <main+0x9c>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of modbusMaster */
  osThreadDef(modbusMaster, modbusMasterReception, osPriorityNormal, 0, 128);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <main+0xa0>)
 80001e8:	1d3c      	adds	r4, r7, #4
 80001ea:	461d      	mov	r5, r3
 80001ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  modbusMasterHandle = osThreadCreate(osThread(modbusMaster), NULL);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 fc19 	bl	8002a34 <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0xa4>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000208:	f002 fc0d 	bl	8002a26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x8c>
 800020e:	bf00      	nop
 8000210:	08003e2c 	.word	0x08003e2c
 8000214:	20000318 	.word	0x20000318
 8000218:	08003e58 	.word	0x08003e58
 800021c:	2000031c 	.word	0x2000031c
 8000220:	08003e84 	.word	0x08003e84
 8000224:	20000320 	.word	0x20000320

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f003 fdba 	bl	8003db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f000 feb7 	bl	8000fe4 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f99c 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 f924 	bl	80014e8 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f987 	bl	80005b8 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	; 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART1_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002d2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002dc:	220c      	movs	r2, #12
 80002de:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ee:	f001 fd03 	bl	8001cf8 <HAL_UART_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80002f8:	f000 f95e 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000288 	.word	0x20000288
 8000304:	40013800 	.word	0x40013800

08000308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_USART2_UART_Init+0x50>)
 8000310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800032e:	220c      	movs	r2, #12
 8000330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 800033a:	2200      	movs	r2, #0
 800033c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_USART2_UART_Init+0x4c>)
 8000340:	f001 fcda 	bl	8001cf8 <HAL_UART_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800034a:	f000 f935 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200002d0 	.word	0x200002d0
 8000358:	40004400 	.word	0x40004400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000370:	4b3b      	ldr	r3, [pc, #236]	; (8000460 <MX_GPIO_Init+0x104>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a3a      	ldr	r2, [pc, #232]	; (8000460 <MX_GPIO_Init+0x104>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b38      	ldr	r3, [pc, #224]	; (8000460 <MX_GPIO_Init+0x104>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b35      	ldr	r3, [pc, #212]	; (8000460 <MX_GPIO_Init+0x104>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a34      	ldr	r2, [pc, #208]	; (8000460 <MX_GPIO_Init+0x104>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b32      	ldr	r3, [pc, #200]	; (8000460 <MX_GPIO_Init+0x104>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b2f      	ldr	r3, [pc, #188]	; (8000460 <MX_GPIO_Init+0x104>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a2e      	ldr	r2, [pc, #184]	; (8000460 <MX_GPIO_Init+0x104>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b2c      	ldr	r3, [pc, #176]	; (8000460 <MX_GPIO_Init+0x104>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <MX_GPIO_Init+0x104>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a28      	ldr	r2, [pc, #160]	; (8000460 <MX_GPIO_Init+0x104>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b26      	ldr	r3, [pc, #152]	; (8000460 <MX_GPIO_Init+0x104>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	4823      	ldr	r0, [pc, #140]	; (8000464 <MX_GPIO_Init+0x108>)
 80003d8:	f000 fdeb 	bl	8000fb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	21e0      	movs	r1, #224	; 0xe0
 80003e0:	4821      	ldr	r0, [pc, #132]	; (8000468 <MX_GPIO_Init+0x10c>)
 80003e2:	f000 fde6 	bl	8000fb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ec:	481f      	ldr	r0, [pc, #124]	; (800046c <MX_GPIO_Init+0x110>)
 80003ee:	f000 fde0 	bl	8000fb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2302      	movs	r3, #2
 8000402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	4816      	ldr	r0, [pc, #88]	; (8000464 <MX_GPIO_Init+0x108>)
 800040c:	f000 fc36 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000410:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	480f      	ldr	r0, [pc, #60]	; (8000468 <MX_GPIO_Init+0x10c>)
 800042a:	f000 fc27 	bl	8000c7c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <MX_GPIO_Init+0x10c>)
 8000436:	f000 fdbc 	bl	8000fb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800043a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_GPIO_Init+0x110>)
 8000454:	f000 fc12 	bl	8000c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000
 8000464:	40011000 	.word	0x40011000
 8000468:	40010800 	.word	0x40010800
 800046c:	40010c00 	.word	0x40010c00

08000470 <StartDefaultTask>:
	HAL_Delay(5);
	HAL_UART_Transmit(&huart, (uint8_t*)"AT+CIPSEND=11", 13, 5);
}*/

void StartDefaultTask(void const * argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	480a      	ldr	r0, [pc, #40]	; (80004a8 <StartDefaultTask+0x38>)
 8000480:	f000 fd97 	bl	8000fb2 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f002 fb20 	bl	8002acc <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <StartDefaultTask+0x38>)
 8000494:	f000 fd8d 	bl	8000fb2 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049c:	f002 fb16 	bl	8002acc <osDelay>
	  osDelay(1);
 80004a0:	2001      	movs	r0, #1
 80004a2:	f002 fb13 	bl	8002acc <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004a6:	e7e7      	b.n	8000478 <StartDefaultTask+0x8>
 80004a8:	40011000 	.word	0x40011000

080004ac <modbusMasterSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_modbusMasterSend */
void modbusMasterSend(void const * argument)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN modbusMasterSend */
  /* Infinite loop */
	for(;;)
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1){
 80004b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004b8:	482c      	ldr	r0, [pc, #176]	; (800056c <modbusMasterSend+0xc0>)
 80004ba:	f000 fd63 	bl	8000f84 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d14e      	bne.n	8000562 <modbusMasterSend+0xb6>
			osDelay(50);
 80004c4:	2032      	movs	r0, #50	; 0x32
 80004c6:	f002 fb01 	bl	8002acc <osDelay>
			for (int i = 0; i < 8; i++){
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	e00d      	b.n	80004ec <modbusMasterSend+0x40>
				HAL_UART_Transmit(&huart1, &buffer[i], 1, 1);
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	4a27      	ldr	r2, [pc, #156]	; (8000570 <modbusMasterSend+0xc4>)
 80004d4:	1899      	adds	r1, r3, r2
 80004d6:	2301      	movs	r3, #1
 80004d8:	2201      	movs	r2, #1
 80004da:	4826      	ldr	r0, [pc, #152]	; (8000574 <modbusMasterSend+0xc8>)
 80004dc:	f001 fc5c 	bl	8001d98 <HAL_UART_Transmit>
				osDelay(1);
 80004e0:	2001      	movs	r0, #1
 80004e2:	f002 faf3 	bl	8002acc <osDelay>
			for (int i = 0; i < 8; i++){
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	2b07      	cmp	r3, #7
 80004f0:	ddee      	ble.n	80004d0 <modbusMasterSend+0x24>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f8:	481c      	ldr	r0, [pc, #112]	; (800056c <modbusMasterSend+0xc0>)
 80004fa:	f000 fd5a 	bl	8000fb2 <HAL_GPIO_WritePin>
			HAL_UART_Receive_IT(&huart1, receiveBuffer, 11);
 80004fe:	220b      	movs	r2, #11
 8000500:	491d      	ldr	r1, [pc, #116]	; (8000578 <modbusMasterSend+0xcc>)
 8000502:	481c      	ldr	r0, [pc, #112]	; (8000574 <modbusMasterSend+0xc8>)
 8000504:	f001 fccb 	bl	8001e9e <HAL_UART_Receive_IT>
			osDelay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f002 fadf 	bl	8002acc <osDelay>
			HAL_UART_Transmit(&huart2, &receiveBuffer, 11, 5);
 800050e:	2305      	movs	r3, #5
 8000510:	220b      	movs	r2, #11
 8000512:	4919      	ldr	r1, [pc, #100]	; (8000578 <modbusMasterSend+0xcc>)
 8000514:	4819      	ldr	r0, [pc, #100]	; (800057c <modbusMasterSend+0xd0>)
 8000516:	f001 fc3f 	bl	8001d98 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000520:	4812      	ldr	r0, [pc, #72]	; (800056c <modbusMasterSend+0xc0>)
 8000522:	f000 fd46 	bl	8000fb2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	4814      	ldr	r0, [pc, #80]	; (8000580 <modbusMasterSend+0xd4>)
 800052e:	f000 fd40 	bl	8000fb2 <HAL_GPIO_WritePin>
			osDelay(1000);
 8000532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000536:	f002 fac9 	bl	8002acc <osDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <modbusMasterSend+0xd4>)
 8000542:	f000 fd36 	bl	8000fb2 <HAL_GPIO_WritePin>
			osDelay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f002 fabf 	bl	8002acc <osDelay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	480a      	ldr	r0, [pc, #40]	; (8000580 <modbusMasterSend+0xd4>)
 8000556:	f000 fd2c 	bl	8000fb2 <HAL_GPIO_WritePin>
			osDelay(1000);
 800055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055e:	f002 fab5 	bl	8002acc <osDelay>
		}
		osDelay(1);
 8000562:	2001      	movs	r0, #1
 8000564:	f002 fab2 	bl	8002acc <osDelay>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1){
 8000568:	e7a4      	b.n	80004b4 <modbusMasterSend+0x8>
 800056a:	bf00      	nop
 800056c:	40010800 	.word	0x40010800
 8000570:	20000000 	.word	0x20000000
 8000574:	20000288 	.word	0x20000288
 8000578:	20000324 	.word	0x20000324
 800057c:	200002d0 	.word	0x200002d0
 8000580:	40010c00 	.word	0x40010c00

08000584 <modbusMasterReception>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_modbusMasterReception */
void modbusMasterReception(void const * argument)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN modbusMasterReception */
  /* Infinite loop */
	for(;;)
	{

		osDelay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f002 fa9d 	bl	8002acc <osDelay>
 8000592:	e7fb      	b.n	800058c <modbusMasterReception+0x8>

08000594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005a6:	f000 f9bb 	bl	8000920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40000400 	.word	0x40000400

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <Error_Handler+0x8>
	...

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <HAL_MspInit+0x68>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <HAL_MspInit+0x68>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x68>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x68>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <HAL_MspInit+0x68>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x68>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	210f      	movs	r1, #15
 80005fe:	f06f 0001 	mvn.w	r0, #1
 8000602:	f000 fa5e 	bl	8000ac2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x6c>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x6c>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a3b      	ldr	r2, [pc, #236]	; (800073c <HAL_UART_MspInit+0x108>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d13a      	bne.n	80006ca <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000654:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <HAL_UART_MspInit+0x10c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a39      	ldr	r2, [pc, #228]	; (8000740 <HAL_UART_MspInit+0x10c>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b37      	ldr	r3, [pc, #220]	; (8000740 <HAL_UART_MspInit+0x10c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b34      	ldr	r3, [pc, #208]	; (8000740 <HAL_UART_MspInit+0x10c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a33      	ldr	r2, [pc, #204]	; (8000740 <HAL_UART_MspInit+0x10c>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b31      	ldr	r3, [pc, #196]	; (8000740 <HAL_UART_MspInit+0x10c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4619      	mov	r1, r3
 8000698:	482a      	ldr	r0, [pc, #168]	; (8000744 <HAL_UART_MspInit+0x110>)
 800069a:	f000 faef 	bl	8000c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	4619      	mov	r1, r3
 80006b2:	4824      	ldr	r0, [pc, #144]	; (8000744 <HAL_UART_MspInit+0x110>)
 80006b4:	f000 fae2 	bl	8000c7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2105      	movs	r1, #5
 80006bc:	2025      	movs	r0, #37	; 0x25
 80006be:	f000 fa00 	bl	8000ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006c2:	2025      	movs	r0, #37	; 0x25
 80006c4:	f000 fa19 	bl	8000afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c8:	e034      	b.n	8000734 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <HAL_UART_MspInit+0x114>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d12f      	bne.n	8000734 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	4a19      	ldr	r2, [pc, #100]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006de:	61d3      	str	r3, [r2, #28]
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006e2:	69db      	ldr	r3, [r3, #28]
 80006e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <HAL_UART_MspInit+0x10c>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000704:	2304      	movs	r3, #4
 8000706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070c:	2303      	movs	r3, #3
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	4619      	mov	r1, r3
 8000716:	480b      	ldr	r0, [pc, #44]	; (8000744 <HAL_UART_MspInit+0x110>)
 8000718:	f000 fab0 	bl	8000c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800071c:	2308      	movs	r3, #8
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4619      	mov	r1, r3
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <HAL_UART_MspInit+0x110>)
 8000730:	f000 faa4 	bl	8000c7c <HAL_GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3728      	adds	r7, #40	; 0x28
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40004400 	.word	0x40004400

0800074c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <HAL_InitTick+0xe8>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a33      	ldr	r2, [pc, #204]	; (8000834 <HAL_InitTick+0xe8>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <HAL_InitTick+0xe8>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800077a:	f107 0210 	add.w	r2, r7, #16
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f001 f81f 	bl	80017c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800078a:	6a3b      	ldr	r3, [r7, #32]
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000794:	f000 fff0 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 8000798:	6378      	str	r0, [r7, #52]	; 0x34
 800079a:	e004      	b.n	80007a6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800079c:	f000 ffec 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 80007a0:	4603      	mov	r3, r0
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a8:	4a23      	ldr	r2, [pc, #140]	; (8000838 <HAL_InitTick+0xec>)
 80007aa:	fba2 2303 	umull	r2, r3, r2, r3
 80007ae:	0c9b      	lsrs	r3, r3, #18
 80007b0:	3b01      	subs	r3, #1
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <HAL_InitTick+0xf0>)
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <HAL_InitTick+0xf4>)
 80007b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <HAL_InitTick+0xf0>)
 80007bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <HAL_InitTick+0xf0>)
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_InitTick+0xf0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <HAL_InitTick+0xf0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_InitTick+0xf0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <HAL_InitTick+0xf0>)
 80007dc:	f001 f842 	bl	8001864 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d11b      	bne.n	8000826 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80007ee:	4813      	ldr	r0, [pc, #76]	; (800083c <HAL_InitTick+0xf0>)
 80007f0:	f001 f890 	bl	8001914 <HAL_TIM_Base_Start_IT>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d111      	bne.n	8000826 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000802:	201d      	movs	r0, #29
 8000804:	f000 f979 	bl	8000afa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b0f      	cmp	r3, #15
 800080c:	d808      	bhi.n	8000820 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800080e:	2200      	movs	r2, #0
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	201d      	movs	r0, #29
 8000814:	f000 f955 	bl	8000ac2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_InitTick+0xf8>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e002      	b.n	8000826 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000826:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800082a:	4618      	mov	r0, r3
 800082c:	3738      	adds	r7, #56	; 0x38
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000
 8000838:	431bde83 	.word	0x431bde83
 800083c:	20000330 	.word	0x20000330
 8000840:	40000400 	.word	0x40000400
 8000844:	2000000c 	.word	0x2000000c

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
	...

08000874 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <TIM3_IRQHandler+0x10>)
 800087a:	f001 f89d 	bl	80019b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000330 	.word	0x20000330

08000888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <USART1_IRQHandler+0x10>)
 800088e:	f001 fb2b 	bl	8001ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000288 	.word	0x20000288

0800089c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a8:	f7ff fff8 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ae:	490c      	ldr	r1, [pc, #48]	; (80008e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008c4:	4c09      	ldr	r4, [pc, #36]	; (80008ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f003 fa75 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d6:	f7ff fc53 	bl	8000180 <main>
  bx lr
 80008da:	4770      	bx	lr
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80008e4:	08003edc 	.word	0x08003edc
  ldr r2, =_sbss
 80008e8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80008ec:	200010c8 	.word	0x200010c8

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x28>)
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f8d1 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	200f      	movs	r0, #15
 800090c:	f7ff ff1e 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff fe58 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	; (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000010 	.word	0x20000010
 8000940:	20000378 	.word	0x20000378

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000378 	.word	0x20000378

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	db0b      	blt.n	80009e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	f003 021f 	and.w	r2, r3, #31
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <__NVIC_EnableIRQ+0x34>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	095b      	lsrs	r3, r3, #5
 80009dc:	2001      	movs	r0, #1
 80009de:	fa00 f202 	lsl.w	r2, r0, r2
 80009e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff4f 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff64 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ffb2 	bl	8000a48 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff81 	bl	80009f4 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff57 	bl	80009bc <__NVIC_EnableIRQ>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b085      	sub	sp, #20
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d008      	beq.n	8000b40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2204      	movs	r2, #4
 8000b32:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e020      	b.n	8000b82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 020e 	bic.w	r2, r2, #14
 8000b4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f022 0201 	bic.w	r2, r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d005      	beq.n	8000bb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e051      	b.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 020e 	bic.w	r2, r2, #14
 8000bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f022 0201 	bic.w	r2, r2, #1
 8000bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <HAL_DMA_Abort_IT+0xd4>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d029      	beq.n	8000c2e <HAL_DMA_Abort_IT+0xa2>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <HAL_DMA_Abort_IT+0xd8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d022      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x9e>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_DMA_Abort_IT+0xdc>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01a      	beq.n	8000c24 <HAL_DMA_Abort_IT+0x98>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <HAL_DMA_Abort_IT+0xe0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d012      	beq.n	8000c1e <HAL_DMA_Abort_IT+0x92>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_DMA_Abort_IT+0xe4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d00a      	beq.n	8000c18 <HAL_DMA_Abort_IT+0x8c>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <HAL_DMA_Abort_IT+0xe8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d102      	bne.n	8000c12 <HAL_DMA_Abort_IT+0x86>
 8000c0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c10:	e00e      	b.n	8000c30 <HAL_DMA_Abort_IT+0xa4>
 8000c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c16:	e00b      	b.n	8000c30 <HAL_DMA_Abort_IT+0xa4>
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	e008      	b.n	8000c30 <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c22:	e005      	b.n	8000c30 <HAL_DMA_Abort_IT+0xa4>
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	e002      	b.n	8000c30 <HAL_DMA_Abort_IT+0xa4>
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	e000      	b.n	8000c30 <HAL_DMA_Abort_IT+0xa4>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_DMA_Abort_IT+0xec>)
 8000c32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	4798      	blx	r3
    } 
  }
  return status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020008 	.word	0x40020008
 8000c64:	4002001c 	.word	0x4002001c
 8000c68:	40020030 	.word	0x40020030
 8000c6c:	40020044 	.word	0x40020044
 8000c70:	40020058 	.word	0x40020058
 8000c74:	4002006c 	.word	0x4002006c
 8000c78:	40020000 	.word	0x40020000

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8e:	e169      	b.n	8000f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c90:	2201      	movs	r2, #1
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f040 8158 	bne.w	8000f5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a9a      	ldr	r2, [pc, #616]	; (8000f1c <HAL_GPIO_Init+0x2a0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d05e      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cb8:	4a98      	ldr	r2, [pc, #608]	; (8000f1c <HAL_GPIO_Init+0x2a0>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d875      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cbe:	4a98      	ldr	r2, [pc, #608]	; (8000f20 <HAL_GPIO_Init+0x2a4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d058      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a96      	ldr	r2, [pc, #600]	; (8000f20 <HAL_GPIO_Init+0x2a4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d86f      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cca:	4a96      	ldr	r2, [pc, #600]	; (8000f24 <HAL_GPIO_Init+0x2a8>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d052      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a94      	ldr	r2, [pc, #592]	; (8000f24 <HAL_GPIO_Init+0x2a8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d869      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cd6:	4a94      	ldr	r2, [pc, #592]	; (8000f28 <HAL_GPIO_Init+0x2ac>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d04c      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a92      	ldr	r2, [pc, #584]	; (8000f28 <HAL_GPIO_Init+0x2ac>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d863      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000ce2:	4a92      	ldr	r2, [pc, #584]	; (8000f2c <HAL_GPIO_Init+0x2b0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d046      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a90      	ldr	r2, [pc, #576]	; (8000f2c <HAL_GPIO_Init+0x2b0>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d85d      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cee:	2b12      	cmp	r3, #18
 8000cf0:	d82a      	bhi.n	8000d48 <HAL_GPIO_Init+0xcc>
 8000cf2:	2b12      	cmp	r3, #18
 8000cf4:	d859      	bhi.n	8000daa <HAL_GPIO_Init+0x12e>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <HAL_GPIO_Init+0x80>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d77 	.word	0x08000d77
 8000d00:	08000d51 	.word	0x08000d51
 8000d04:	08000d63 	.word	0x08000d63
 8000d08:	08000da5 	.word	0x08000da5
 8000d0c:	08000dab 	.word	0x08000dab
 8000d10:	08000dab 	.word	0x08000dab
 8000d14:	08000dab 	.word	0x08000dab
 8000d18:	08000dab 	.word	0x08000dab
 8000d1c:	08000dab 	.word	0x08000dab
 8000d20:	08000dab 	.word	0x08000dab
 8000d24:	08000dab 	.word	0x08000dab
 8000d28:	08000dab 	.word	0x08000dab
 8000d2c:	08000dab 	.word	0x08000dab
 8000d30:	08000dab 	.word	0x08000dab
 8000d34:	08000dab 	.word	0x08000dab
 8000d38:	08000dab 	.word	0x08000dab
 8000d3c:	08000dab 	.word	0x08000dab
 8000d40:	08000d59 	.word	0x08000d59
 8000d44:	08000d6d 	.word	0x08000d6d
 8000d48:	4a79      	ldr	r2, [pc, #484]	; (8000f30 <HAL_GPIO_Init+0x2b4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d4e:	e02c      	b.n	8000daa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e029      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e024      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	3308      	adds	r3, #8
 8000d68:	623b      	str	r3, [r7, #32]
          break;
 8000d6a:	e01f      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	330c      	adds	r3, #12
 8000d72:	623b      	str	r3, [r7, #32]
          break;
 8000d74:	e01a      	b.n	8000dac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	623b      	str	r3, [r7, #32]
          break;
 8000d82:	e013      	b.n	8000dac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d105      	bne.n	8000d98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	611a      	str	r2, [r3, #16]
          break;
 8000d96:	e009      	b.n	8000dac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	615a      	str	r2, [r3, #20]
          break;
 8000da2:	e003      	b.n	8000dac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
          break;
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x130>
          break;
 8000daa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2bff      	cmp	r3, #255	; 0xff
 8000db0:	d801      	bhi.n	8000db6 <HAL_GPIO_Init+0x13a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	e001      	b.n	8000dba <HAL_GPIO_Init+0x13e>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3304      	adds	r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	2bff      	cmp	r3, #255	; 0xff
 8000dc0:	d802      	bhi.n	8000dc8 <HAL_GPIO_Init+0x14c>
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	e002      	b.n	8000dce <HAL_GPIO_Init+0x152>
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	3b08      	subs	r3, #8
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	401a      	ands	r2, r3
 8000de0:	6a39      	ldr	r1, [r7, #32]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	431a      	orrs	r2, r3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80b1 	beq.w	8000f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dfc:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a4c      	ldr	r2, [pc, #304]	; (8000f34 <HAL_GPIO_Init+0x2b8>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e14:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_GPIO_Init+0x2bc>)
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HAL_GPIO_Init+0x2c0>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x1ec>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a3f      	ldr	r2, [pc, #252]	; (8000f40 <HAL_GPIO_Init+0x2c4>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00d      	beq.n	8000e64 <HAL_GPIO_Init+0x1e8>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a3e      	ldr	r2, [pc, #248]	; (8000f44 <HAL_GPIO_Init+0x2c8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d007      	beq.n	8000e60 <HAL_GPIO_Init+0x1e4>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a3d      	ldr	r2, [pc, #244]	; (8000f48 <HAL_GPIO_Init+0x2cc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d101      	bne.n	8000e5c <HAL_GPIO_Init+0x1e0>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e006      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e004      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e002      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <HAL_GPIO_Init+0x1ee>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7a:	492f      	ldr	r1, [pc, #188]	; (8000f38 <HAL_GPIO_Init+0x2bc>)
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	492c      	ldr	r1, [pc, #176]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	4928      	ldr	r1, [pc, #160]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d006      	beq.n	8000eca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ebc:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	4922      	ldr	r1, [pc, #136]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60cb      	str	r3, [r1, #12]
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	491e      	ldr	r1, [pc, #120]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d006      	beq.n	8000ef2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4918      	ldr	r1, [pc, #96]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
 8000ef0:	e006      	b.n	8000f00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4914      	ldr	r1, [pc, #80]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d021      	beq.n	8000f50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	490e      	ldr	r1, [pc, #56]	; (8000f4c <HAL_GPIO_Init+0x2d0>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e021      	b.n	8000f5e <HAL_GPIO_Init+0x2e2>
 8000f1a:	bf00      	nop
 8000f1c:	10320000 	.word	0x10320000
 8000f20:	10310000 	.word	0x10310000
 8000f24:	10220000 	.word	0x10220000
 8000f28:	10210000 	.word	0x10210000
 8000f2c:	10120000 	.word	0x10120000
 8000f30:	10110000 	.word	0x10110000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40010c00 	.word	0x40010c00
 8000f44:	40011000 	.word	0x40011000
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	4909      	ldr	r1, [pc, #36]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	3301      	adds	r3, #1
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f47f ae8e 	bne.w	8000c90 <HAL_GPIO_Init+0x14>
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	372c      	adds	r7, #44	; 0x2c
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc2:	787b      	ldrb	r3, [r7, #1]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fce:	e003      	b.n	8000fd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	041a      	lsls	r2, r3, #16
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e272      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8087 	beq.w	8001112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001004:	4b92      	ldr	r3, [pc, #584]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b04      	cmp	r3, #4
 800100e:	d00c      	beq.n	800102a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001010:	4b8f      	ldr	r3, [pc, #572]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d112      	bne.n	8001042 <HAL_RCC_OscConfig+0x5e>
 800101c:	4b8c      	ldr	r3, [pc, #560]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001028:	d10b      	bne.n	8001042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102a:	4b89      	ldr	r3, [pc, #548]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06c      	beq.n	8001110 <HAL_RCC_OscConfig+0x12c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d168      	bne.n	8001110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e24c      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800104a:	d106      	bne.n	800105a <HAL_RCC_OscConfig+0x76>
 800104c:	4b80      	ldr	r3, [pc, #512]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a7f      	ldr	r2, [pc, #508]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e02e      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x98>
 8001062:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a7a      	ldr	r2, [pc, #488]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b78      	ldr	r3, [pc, #480]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a77      	ldr	r2, [pc, #476]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0xbc>
 8001086:	4b72      	ldr	r3, [pc, #456]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a71      	ldr	r2, [pc, #452]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6f      	ldr	r3, [pc, #444]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 80010a0:	4b6b      	ldr	r3, [pc, #428]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a6a      	ldr	r2, [pc, #424]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b68      	ldr	r3, [pc, #416]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a67      	ldr	r2, [pc, #412]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc40 	bl	8000944 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fc3c 	bl	8000944 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	; 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e200      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5d      	ldr	r3, [pc, #372]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xe4>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc2c 	bl	8000944 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc28 	bl	8000944 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1ec      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x10c>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111e:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x18c>
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c0      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4939      	ldr	r1, [pc, #228]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fbe1 	bl	8000944 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fbdd 	bl	8000944 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a1      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4927      	ldr	r1, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_RCC_OscConfig+0x270>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbc0 	bl	8000944 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbbc 	bl	8000944 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e180      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03a      	beq.n	8001268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_RCC_OscConfig+0x274>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fba0 	bl	8000944 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fb9c 	bl	8000944 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e160      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_RCC_OscConfig+0x26c>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 fafe 	bl	8001828 <RCC_Delay>
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_RCC_OscConfig+0x274>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001234:	f7ff fb86 	bl	8000944 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123a:	e00f      	b.n	800125c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fb82 	bl	8000944 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d908      	bls.n	800125c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e146      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	42420000 	.word	0x42420000
 8001258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1e9      	bne.n	800123c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a6 	beq.w	80013c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10d      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b88      	ldr	r3, [pc, #544]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a87      	ldr	r2, [pc, #540]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b85      	ldr	r3, [pc, #532]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b82      	ldr	r3, [pc, #520]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d118      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ae:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a7e      	ldr	r2, [pc, #504]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb43 	bl	8000944 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c2:	f7ff fb3f 	bl	8000944 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e103      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x312>
 80012e8:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	e02d      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x334>
 80012fe:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a69      	ldr	r2, [pc, #420]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a66      	ldr	r2, [pc, #408]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	e01c      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0x356>
 8001320:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a60      	ldr	r2, [pc, #384]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a5d      	ldr	r2, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	e00b      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a5a      	ldr	r2, [pc, #360]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a57      	ldr	r2, [pc, #348]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d015      	beq.n	8001386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff faf3 	bl	8000944 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff faef 	bl	8000944 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e0b1      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0ee      	beq.n	8001362 <HAL_RCC_OscConfig+0x37e>
 8001384:	e014      	b.n	80013b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fadd 	bl	8000944 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fad9 	bl	8000944 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	; 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e09b      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d105      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a3b      	ldr	r2, [pc, #236]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013cc:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d061      	beq.n	800149c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d146      	bne.n	800146e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff faad 	bl	8000944 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff faa9 	bl	8000944 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e06d      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d108      	bne.n	8001428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001416:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4921      	ldr	r1, [pc, #132]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001428:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a19      	ldr	r1, [r3, #32]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	430b      	orrs	r3, r1
 800143a:	491b      	ldr	r1, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fa7d 	bl	8000944 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fa79 	bl	8000944 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e03d      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x46a>
 800146c:	e035      	b.n	80014da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fa66 	bl	8000944 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fa62 	bl	8000944 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e026      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x498>
 800149a:	e01e      	b.n	80014da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e019      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x500>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0d0      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b67      	ldr	r3, [pc, #412]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4965      	ldr	r1, [pc, #404]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0b8      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001544:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800154e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	4b53      	ldr	r3, [pc, #332]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	494d      	ldr	r1, [pc, #308]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d040      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07f      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b41      	ldr	r3, [pc, #260]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e073      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3d      	ldr	r3, [pc, #244]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06b      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b39      	ldr	r3, [pc, #228]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4936      	ldr	r1, [pc, #216]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f9b4 	bl	8000944 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f9b0 	bl	8000944 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e053      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d210      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0207 	bic.w	r2, r3, #7
 800161e:	4922      	ldr	r1, [pc, #136]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4916      	ldr	r1, [pc, #88]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	490e      	ldr	r1, [pc, #56]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001676:	f000 f821 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167a:	4602      	mov	r2, r0
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	490a      	ldr	r1, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	5ccb      	ldrb	r3, [r1, r3]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f858 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08003ea8 	.word	0x08003ea8
 80016b4:	20000008 	.word	0x20000008
 80016b8:	2000000c 	.word	0x2000000c

080016bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <HAL_RCC_GetSysClockFreq+0x94>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x30>
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0x36>
 80016ea:	e027      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ee:	613b      	str	r3, [r7, #16]
      break;
 80016f0:	e027      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0c9b      	lsrs	r3, r3, #18
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_RCC_GetSysClockFreq+0x94>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0c5b      	lsrs	r3, r3, #17
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_RCC_GetSysClockFreq+0x98>)
 800171e:	fb03 f202 	mul.w	r2, r3, r2
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e004      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	613b      	str	r3, [r7, #16]
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_GetSysClockFreq+0x98>)
 800173e:	613b      	str	r3, [r7, #16]
      break;
 8001740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001742:	693b      	ldr	r3, [r7, #16]
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	007a1200 	.word	0x007a1200
 8001758:	08003ec0 	.word	0x08003ec0
 800175c:	08003ed0 	.word	0x08003ed0
 8001760:	003d0900 	.word	0x003d0900

08001764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <HAL_RCC_GetHCLKFreq+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800177c:	f7ff fff2 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 8001780:	4602      	mov	r2, r0
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4903      	ldr	r1, [pc, #12]	; (800179c <HAL_RCC_GetPCLK1Freq+0x24>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	08003eb8 	.word	0x08003eb8

080017a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017a4:	f7ff ffde 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	0adb      	lsrs	r3, r3, #11
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	4903      	ldr	r1, [pc, #12]	; (80017c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000
 80017c4:	08003eb8 	.word	0x08003eb8

080017c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	220f      	movs	r2, #15
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_GetClockConfig+0x58>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_RCC_GetClockConfig+0x58>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_GetClockConfig+0x58>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_RCC_GetClockConfig+0x58>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_GetClockConfig+0x5c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0207 	and.w	r2, r3, #7
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40022000 	.word	0x40022000

08001828 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <RCC_Delay+0x34>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <RCC_Delay+0x38>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001844:	bf00      	nop
  }
  while (Delay --);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	60fa      	str	r2, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f9      	bne.n	8001844 <RCC_Delay+0x1c>
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000008 	.word	0x20000008
 8001860:	10624dd3 	.word	0x10624dd3

08001864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e041      	b.n	80018fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f839 	bl	8001902 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f000 f9b4 	bl	8001c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d001      	beq.n	800192c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e03a      	b.n	80019a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_TIM_Base_Start_IT+0x98>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00e      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x58>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001956:	d009      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x58>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <HAL_TIM_Base_Start_IT+0x58>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d010      	beq.n	80019a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198e:	e007      	b.n	80019a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40000800 	.word	0x40000800

080019b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0202 	mvn.w	r2, #2
 80019e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f8ed 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8e0 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f8ef 	bl	8001bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0204 	mvn.w	r2, #4
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f8c3 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f8b6 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f8c5 	bl	8001bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0208 	mvn.w	r2, #8
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2204      	movs	r2, #4
 8001a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f899 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f88c 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f89b 	bl	8001bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b10      	cmp	r3, #16
 8001ac8:	d122      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b10      	cmp	r3, #16
 8001ad6:	d11b      	bne.n	8001b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0210 	mvn.w	r2, #16
 8001ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f86f 	bl	8001bda <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f862 	bl	8001bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f871 	bl	8001bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10e      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f06f 0201 	mvn.w	r2, #1
 8001b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fd2c 	bl	8000594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	2b80      	cmp	r3, #128	; 0x80
 8001b48:	d10e      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b54:	2b80      	cmp	r3, #128	; 0x80
 8001b56:	d107      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8bf 	bl	8001ce6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d10e      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b80:	2b40      	cmp	r3, #64	; 0x40
 8001b82:	d107      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f835 	bl	8001bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d107      	bne.n	8001bc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0220 	mvn.w	r2, #32
 8001bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f88a 	bl	8001cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <TIM_Base_SetConfig+0xb8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00b      	beq.n	8001c40 <TIM_Base_SetConfig+0x30>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2e:	d007      	beq.n	8001c40 <TIM_Base_SetConfig+0x30>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <TIM_Base_SetConfig+0xbc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d003      	beq.n	8001c40 <TIM_Base_SetConfig+0x30>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a25      	ldr	r2, [pc, #148]	; (8001cd0 <TIM_Base_SetConfig+0xc0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d108      	bne.n	8001c52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <TIM_Base_SetConfig+0xb8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00b      	beq.n	8001c72 <TIM_Base_SetConfig+0x62>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d007      	beq.n	8001c72 <TIM_Base_SetConfig+0x62>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <TIM_Base_SetConfig+0xbc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d003      	beq.n	8001c72 <TIM_Base_SetConfig+0x62>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <TIM_Base_SetConfig+0xc0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d108      	bne.n	8001c84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <TIM_Base_SetConfig+0xb8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d103      	bne.n	8001cb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	615a      	str	r2, [r3, #20]
}
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000800 	.word	0x40000800

08001cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e042      	b.n	8001d90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7fe fc88 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2224      	movs	r2, #36	; 0x24
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fdcd 	bl	80028dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d16d      	bne.n	8001e94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_UART_Transmit+0x2c>
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e066      	b.n	8001e96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2221      	movs	r2, #33	; 0x21
 8001dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd6:	f7fe fdb5 	bl	8000944 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df0:	d108      	bne.n	8001e04 <HAL_UART_Transmit+0x6c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d104      	bne.n	8001e04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e003      	b.n	8001e0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e0c:	e02a      	b.n	8001e64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2200      	movs	r2, #0
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fb1d 	bl	8002458 <UART_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e036      	b.n	8001e96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10b      	bne.n	8001e46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	3302      	adds	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	e007      	b.n	8001e56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	3301      	adds	r3, #1
 8001e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1cf      	bne.n	8001e0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 faed 	bl	8002458 <UART_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e006      	b.n	8001e96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d112      	bne.n	8001ede <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_UART_Receive_IT+0x26>
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e00b      	b.n	8001ee0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68b9      	ldr	r1, [r7, #8]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 fb2d 	bl	8002534 <UART_Start_Receive_IT>
 8001eda:	4603      	mov	r3, r0
 8001edc:	e000      	b.n	8001ee0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
  }
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0ba      	sub	sp, #232	; 0xe8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10f      	bne.n	8001f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_UART_IRQHandler+0x66>
 8001f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fc0a 	bl	8002760 <UART_Receive_IT>
      return;
 8001f4c:	e25b      	b.n	8002406 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80de 	beq.w	8002114 <HAL_UART_IRQHandler+0x22c>
 8001f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80d1 	beq.w	8002114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_UART_IRQHandler+0xae>
 8001f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_UART_IRQHandler+0xd2>
 8001fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_UART_IRQHandler+0xf6>
 8001fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f043 0204 	orr.w	r2, r3, #4
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <HAL_UART_IRQHandler+0x126>
 8001fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d105      	bne.n	8002002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f043 0208 	orr.w	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 81f2 	beq.w	80023fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_UART_IRQHandler+0x14e>
 8002024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fb95 	bl	8002760 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <HAL_UART_IRQHandler+0x17a>
 800205a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d04f      	beq.n	8002102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fa9f 	bl	80025a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d041      	beq.n	80020fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3314      	adds	r3, #20
 800207c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002084:	e853 3f00 	ldrex	r3, [r3]
 8002088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800208c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3314      	adds	r3, #20
 800209e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020b2:	e841 2300 	strex	r3, r2, [r1]
 80020b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1d9      	bne.n	8002076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d013      	beq.n	80020f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	4a7e      	ldr	r2, [pc, #504]	; (80022c8 <HAL_UART_IRQHandler+0x3e0>)
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fd58 	bl	8000b8c <HAL_DMA_Abort_IT>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d016      	beq.n	8002110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020ec:	4610      	mov	r0, r2
 80020ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	e00e      	b.n	8002110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f99c 	bl	8002430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f8:	e00a      	b.n	8002110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f998 	bl	8002430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002100:	e006      	b.n	8002110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f994 	bl	8002430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800210e:	e175      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002110:	bf00      	nop
    return;
 8002112:	e173      	b.n	80023fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	2b01      	cmp	r3, #1
 800211a:	f040 814f 	bne.w	80023bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800211e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8148 	beq.w	80023bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800212c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 8141 	beq.w	80023bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 80b6 	beq.w	80022cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800216c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8145 	beq.w	8002400 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800217a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800217e:	429a      	cmp	r2, r3
 8002180:	f080 813e 	bcs.w	8002400 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800218a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b20      	cmp	r3, #32
 8002194:	f000 8088 	beq.w	80022a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021a6:	e853 3f00 	ldrex	r3, [r3]
 80021aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021d4:	e841 2300 	strex	r3, r2, [r1]
 80021d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1d9      	bne.n	8002198 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3314      	adds	r3, #20
 80021ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ee:	e853 3f00 	ldrex	r3, [r3]
 80021f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80021f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	3314      	adds	r3, #20
 8002204:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002208:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800220c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002210:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002214:	e841 2300 	strex	r3, r2, [r1]
 8002218:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800221a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e1      	bne.n	80021e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3314      	adds	r3, #20
 8002226:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800222a:	e853 3f00 	ldrex	r3, [r3]
 800222e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3314      	adds	r3, #20
 8002240:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002244:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002248:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800224a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800224c:	e841 2300 	strex	r3, r2, [r1]
 8002250:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e3      	bne.n	8002220 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	330c      	adds	r3, #12
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002278:	f023 0310 	bic.w	r3, r3, #16
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	330c      	adds	r3, #12
 8002286:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800228a:	65ba      	str	r2, [r7, #88]	; 0x58
 800228c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e3      	bne.n	8002266 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fc37 	bl	8000b16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8bf 	bl	8002442 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022c4:	e09c      	b.n	8002400 <HAL_UART_IRQHandler+0x518>
 80022c6:	bf00      	nop
 80022c8:	0800266b 	.word	0x0800266b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 808e 	beq.w	8002404 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8089 	beq.w	8002404 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	330c      	adds	r3, #12
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	e853 3f00 	ldrex	r3, [r3]
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	330c      	adds	r3, #12
 8002312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002316:	647a      	str	r2, [r7, #68]	; 0x44
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800231c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e3      	bne.n	80022f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3314      	adds	r3, #20
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	623b      	str	r3, [r7, #32]
   return(result);
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800234e:	633a      	str	r2, [r7, #48]	; 0x30
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e3      	bne.n	800232a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	330c      	adds	r3, #12
 8002376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002394:	61fa      	str	r2, [r7, #28]
 8002396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	e841 2300 	strex	r3, r2, [r1]
 80023a0:	617b      	str	r3, [r7, #20]
   return(result);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e3      	bne.n	8002370 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f844 	bl	8002442 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023ba:	e023      	b.n	8002404 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_UART_IRQHandler+0x4f4>
 80023c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f95c 	bl	8002692 <UART_Transmit_IT>
    return;
 80023da:	e014      	b.n	8002406 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <HAL_UART_IRQHandler+0x51e>
 80023e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f99b 	bl	8002730 <UART_EndTransmit_IT>
    return;
 80023fa:	e004      	b.n	8002406 <HAL_UART_IRQHandler+0x51e>
    return;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <HAL_UART_IRQHandler+0x51e>
      return;
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <HAL_UART_IRQHandler+0x51e>
      return;
 8002404:	bf00      	nop
  }
}
 8002406:	37e8      	adds	r7, #232	; 0xe8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b090      	sub	sp, #64	; 0x40
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002468:	e050      	b.n	800250c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d04c      	beq.n	800250c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <UART_WaitOnFlagUntilTimeout+0x30>
 8002478:	f7fe fa64 	bl	8000944 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002484:	429a      	cmp	r2, r3
 8002486:	d241      	bcs.n	800250c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	330c      	adds	r3, #12
 80024a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a8:	637a      	str	r2, [r7, #52]	; 0x34
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024b0:	e841 2300 	strex	r3, r2, [r1]
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e5      	bne.n	8002488 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3314      	adds	r3, #20
 80024c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	e853 3f00 	ldrex	r3, [r3]
 80024ca:	613b      	str	r3, [r7, #16]
   return(result);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	3314      	adds	r3, #20
 80024da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024dc:	623a      	str	r2, [r7, #32]
 80024de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e0:	69f9      	ldr	r1, [r7, #28]
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	e841 2300 	strex	r3, r2, [r1]
 80024e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e5      	bne.n	80024bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e00f      	b.n	800252c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4013      	ands	r3, r2
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	429a      	cmp	r2, r3
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	429a      	cmp	r2, r3
 8002528:	d09f      	beq.n	800246a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3740      	adds	r7, #64	; 0x40
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2222      	movs	r2, #34	; 0x22
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002578:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0220 	orr.w	r2, r2, #32
 8002598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b095      	sub	sp, #84	; 0x54
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	330c      	adds	r3, #12
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ce:	643a      	str	r2, [r7, #64]	; 0x40
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025d6:	e841 2300 	strex	r3, r2, [r1]
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1e5      	bne.n	80025ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3314      	adds	r3, #20
 80025e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	e853 3f00 	ldrex	r3, [r3]
 80025f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3314      	adds	r3, #20
 8002600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002602:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e5      	bne.n	80025e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	2b01      	cmp	r3, #1
 800261c:	d119      	bne.n	8002652 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	60bb      	str	r3, [r7, #8]
   return(result);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f023 0310 	bic.w	r3, r3, #16
 8002634:	647b      	str	r3, [r7, #68]	; 0x44
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	330c      	adds	r3, #12
 800263c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800263e:	61ba      	str	r2, [r7, #24]
 8002640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002642:	6979      	ldr	r1, [r7, #20]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	613b      	str	r3, [r7, #16]
   return(result);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e5      	bne.n	800261e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2220      	movs	r2, #32
 8002656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002660:	bf00      	nop
 8002662:	3754      	adds	r7, #84	; 0x54
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff fed3 	bl	8002430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b21      	cmp	r3, #33	; 0x21
 80026a4:	d13e      	bne.n	8002724 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	d114      	bne.n	80026da <UART_Transmit_IT+0x48>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d110      	bne.n	80026da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	1c9a      	adds	r2, r3, #2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	621a      	str	r2, [r3, #32]
 80026d8:	e008      	b.n	80026ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6211      	str	r1, [r2, #32]
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4619      	mov	r1, r3
 80026fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10f      	bne.n	8002720 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e000      	b.n	8002726 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002746:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fe5b 	bl	800240c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b22      	cmp	r3, #34	; 0x22
 8002772:	f040 80ae 	bne.w	80028d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	d117      	bne.n	80027b0 <UART_Receive_IT+0x50>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d113      	bne.n	80027b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	b29b      	uxth	r3, r3
 800279a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279e:	b29a      	uxth	r2, r3
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	1c9a      	adds	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28
 80027ae:	e026      	b.n	80027fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d007      	beq.n	80027d4 <UART_Receive_IT+0x74>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <UART_Receive_IT+0x82>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d106      	bne.n	80027e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e008      	b.n	80027f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4619      	mov	r1, r3
 800280c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800280e:	2b00      	cmp	r3, #0
 8002810:	d15d      	bne.n	80028ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0220 	bic.w	r2, r2, #32
 8002820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002830:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	2b01      	cmp	r3, #1
 8002856:	d135      	bne.n	80028c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	613b      	str	r3, [r7, #16]
   return(result);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f023 0310 	bic.w	r3, r3, #16
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	623a      	str	r2, [r7, #32]
 8002880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	69f9      	ldr	r1, [r7, #28]
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	e841 2300 	strex	r3, r2, [r1]
 800288a:	61bb      	str	r3, [r7, #24]
   return(result);
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1e5      	bne.n	800285e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b10      	cmp	r3, #16
 800289e:	d10a      	bne.n	80028b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fdc0 	bl	8002442 <HAL_UARTEx_RxEventCallback>
 80028c2:	e002      	b.n	80028ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff fdaa 	bl	800241e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e002      	b.n	80028d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3730      	adds	r7, #48	; 0x30
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002916:	f023 030c 	bic.w	r3, r3, #12
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	430b      	orrs	r3, r1
 8002922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2c      	ldr	r2, [pc, #176]	; (80029f0 <UART_SetConfig+0x114>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d103      	bne.n	800294c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7fe ff2c 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	e002      	b.n	8002952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800294c:	f7fe ff14 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 8002950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <UART_SetConfig+0x118>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	0119      	lsls	r1, r3, #4
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009a      	lsls	r2, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fbb2 f2f3 	udiv	r2, r2, r3
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <UART_SetConfig+0x118>)
 800298a:	fba3 0302 	umull	r0, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <UART_SetConfig+0x118>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029a8:	4419      	add	r1, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	009a      	lsls	r2, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <UART_SetConfig+0x118>)
 80029c2:	fba3 0302 	umull	r0, r3, r3, r2
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2064      	movs	r0, #100	; 0x64
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	3332      	adds	r3, #50	; 0x32
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <UART_SetConfig+0x118>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	440a      	add	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40013800 	.word	0x40013800
 80029f4:	51eb851f 	.word	0x51eb851f

080029f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0a:	2b84      	cmp	r3, #132	; 0x84
 8002a0c:	d005      	beq.n	8002a1a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a0e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4413      	add	r3, r2
 8002a16:	3303      	adds	r3, #3
 8002a18:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a2a:	f000 fad1 	bl	8002fd0 <vTaskStartScheduler>
  
  return osOK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d020      	beq.n	8002a88 <osThreadCreate+0x54>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01c      	beq.n	8002a88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685c      	ldr	r4, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691e      	ldr	r6, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ffc9 	bl	80029f8 <makeFreeRtosPriority>
 8002a66:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a70:	9202      	str	r2, [sp, #8]
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	9100      	str	r1, [sp, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4632      	mov	r2, r6
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 f8e8 	bl	8002c52 <xTaskCreateStatic>
 8002a82:	4603      	mov	r3, r0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e01c      	b.n	8002ac2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685c      	ldr	r4, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a94:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffab 	bl	80029f8 <makeFreeRtosPriority>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	9200      	str	r2, [sp, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4632      	mov	r2, r6
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f000 f929 	bl	8002d0a <xTaskCreate>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002acc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <osDelay+0x16>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	e000      	b.n	8002ae4 <osDelay+0x18>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fa3f 	bl	8002f68 <vTaskDelay>
  
  return osOK;
 8002aea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0208 	add.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f103 0208 	add.w	r2, r3, #8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0208 	add.w	r2, r3, #8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba6:	d103      	bne.n	8002bb0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e00c      	b.n	8002bca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e002      	b.n	8002bbe <vListInsert+0x2e>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d2f6      	bcs.n	8002bb8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6852      	ldr	r2, [r2, #4]
 8002c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d103      	bne.n	8002c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b08e      	sub	sp, #56	; 0x38
 8002c56:	af04      	add	r7, sp, #16
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c78:	bf00      	nop
 8002c7a:	e7fe      	b.n	8002c7a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	61fb      	str	r3, [r7, #28]
}
 8002c94:	bf00      	nop
 8002c96:	e7fe      	b.n	8002c96 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c98:	2354      	movs	r3, #84	; 0x54
 8002c9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b54      	cmp	r3, #84	; 0x54
 8002ca0:	d00a      	beq.n	8002cb8 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	61bb      	str	r3, [r7, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01e      	beq.n	8002cfc <xTaskCreateStatic+0xaa>
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01b      	beq.n	8002cfc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	9301      	str	r3, [sp, #4]
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f850 	bl	8002d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cf6:	f000 f8cd 	bl	8002e94 <prvAddNewTaskToReadyList>
 8002cfa:	e001      	b.n	8002d00 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d00:	697b      	ldr	r3, [r7, #20]
	}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b08c      	sub	sp, #48	; 0x30
 8002d0e:	af04      	add	r7, sp, #16
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fe6e 	bl	8003a00 <pvPortMalloc>
 8002d24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d2c:	2054      	movs	r0, #84	; 0x54
 8002d2e:	f000 fe67 	bl	8003a00 <pvPortMalloc>
 8002d32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d40:	e005      	b.n	8002d4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d42:	6978      	ldr	r0, [r7, #20]
 8002d44:	f000 ff20 	bl	8003b88 <vPortFree>
 8002d48:	e001      	b.n	8002d4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d017      	beq.n	8002d84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9303      	str	r3, [sp, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f80e 	bl	8002d94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d78:	69f8      	ldr	r0, [r7, #28]
 8002d7a:	f000 f88b 	bl	8002e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e002      	b.n	8002d8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
	}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dac:	3b01      	subs	r3, #1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f023 0307 	bic.w	r3, r3, #7
 8002dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <prvInitialiseNewTask+0x48>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	617b      	str	r3, [r7, #20]
}
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e012      	b.n	8002e08 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	4413      	add	r3, r2
 8002de8:	7819      	ldrb	r1, [r3, #0]
 8002dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4413      	add	r3, r2
 8002df0:	3334      	adds	r3, #52	; 0x34
 8002df2:	460a      	mov	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	d9e9      	bls.n	8002de2 <prvInitialiseNewTask+0x4e>
 8002e0e:	e000      	b.n	8002e12 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002e10:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	2b06      	cmp	r3, #6
 8002e1e:	d901      	bls.n	8002e24 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e20:	2306      	movs	r3, #6
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e38:	3304      	adds	r3, #4
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fe79 	bl	8002b32 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	3318      	adds	r3, #24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fe74 	bl	8002b32 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	f1c3 0207 	rsb	r2, r3, #7
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	2200      	movs	r2, #0
 8002e64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	69b8      	ldr	r0, [r7, #24]
 8002e74:	f000 fc0e 	bl	8003694 <pxPortInitialiseStack>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e8a:	bf00      	nop
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e9c:	f000 fcee 	bl	800387c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <prvAddNewTaskToReadyList+0xb8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	4a29      	ldr	r2, [pc, #164]	; (8002f4c <prvAddNewTaskToReadyList+0xb8>)
 8002ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002eaa:	4b29      	ldr	r3, [pc, #164]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <prvAddNewTaskToReadyList+0xb8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d110      	bne.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ec0:	f000 fac0 	bl	8003444 <prvInitialiseTaskLists>
 8002ec4:	e00d      	b.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ec6:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <prvAddNewTaskToReadyList+0xc0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d802      	bhi.n	8002ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002edc:	4a1c      	ldr	r2, [pc, #112]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <prvAddNewTaskToReadyList+0xc4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <prvAddNewTaskToReadyList+0xc4>)
 8002eea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <prvAddNewTaskToReadyList+0xc8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4a18      	ldr	r2, [pc, #96]	; (8002f5c <prvAddNewTaskToReadyList+0xc8>)
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <prvAddNewTaskToReadyList+0xcc>)
 8002f0c:	441a      	add	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f7ff fe18 	bl	8002b4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f1a:	f000 fcdf 	bl	80038dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f1e:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <prvAddNewTaskToReadyList+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <prvAddNewTaskToReadyList+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <prvAddNewTaskToReadyList+0xd0>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	2000047c 	.word	0x2000047c
 8002f50:	2000037c 	.word	0x2000037c
 8002f54:	20000488 	.word	0x20000488
 8002f58:	20000498 	.word	0x20000498
 8002f5c:	20000484 	.word	0x20000484
 8002f60:	20000380 	.word	0x20000380
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d017      	beq.n	8002faa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <vTaskDelay+0x60>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <vTaskDelay+0x30>
	__asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	60bb      	str	r3, [r7, #8]
}
 8002f94:	bf00      	nop
 8002f96:	e7fe      	b.n	8002f96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f98:	f000 f87a 	bl	8003090 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fb12 	bl	80035c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002fa4:	f000 f882 	bl	80030ac <xTaskResumeAll>
 8002fa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d107      	bne.n	8002fc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <vTaskDelay+0x64>)
 8002fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200004a4 	.word	0x200004a4
 8002fcc:	e000ed04 	.word	0xe000ed04

08002fd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fde:	463a      	mov	r2, r7
 8002fe0:	1d39      	adds	r1, r7, #4
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd f8b2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	9202      	str	r2, [sp, #8]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	491e      	ldr	r1, [pc, #120]	; (8003078 <vTaskStartScheduler+0xa8>)
 8003000:	481e      	ldr	r0, [pc, #120]	; (800307c <vTaskStartScheduler+0xac>)
 8003002:	f7ff fe26 	bl	8002c52 <xTaskCreateStatic>
 8003006:	4603      	mov	r3, r0
 8003008:	4a1d      	ldr	r2, [pc, #116]	; (8003080 <vTaskStartScheduler+0xb0>)
 800300a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800300c:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <vTaskStartScheduler+0xb0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003014:	2301      	movs	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	e001      	b.n	800301e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d116      	bne.n	8003052 <vTaskStartScheduler+0x82>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <vTaskStartScheduler+0xb4>)
 800303a:	f04f 32ff 	mov.w	r2, #4294967295
 800303e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <vTaskStartScheduler+0xb8>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003046:	4b11      	ldr	r3, [pc, #68]	; (800308c <vTaskStartScheduler+0xbc>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800304c:	f000 fba4 	bl	8003798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003050:	e00e      	b.n	8003070 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d10a      	bne.n	8003070 <vTaskStartScheduler+0xa0>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60fb      	str	r3, [r7, #12]
}
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vTaskStartScheduler+0x9e>
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	08003ea0 	.word	0x08003ea0
 800307c:	08003415 	.word	0x08003415
 8003080:	200004a0 	.word	0x200004a0
 8003084:	2000049c 	.word	0x2000049c
 8003088:	20000488 	.word	0x20000488
 800308c:	20000480 	.word	0x20000480

08003090 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <vTaskSuspendAll+0x18>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <vTaskSuspendAll+0x18>)
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	200004a4 	.word	0x200004a4

080030ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <xTaskResumeAll+0x114>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10a      	bne.n	80030d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	603b      	str	r3, [r7, #0]
}
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030d8:	f000 fbd0 	bl	800387c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <xTaskResumeAll+0x114>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <xTaskResumeAll+0x114>)
 80030e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030e6:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <xTaskResumeAll+0x114>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d161      	bne.n	80031b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030ee:	4b35      	ldr	r3, [pc, #212]	; (80031c4 <xTaskResumeAll+0x118>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d05d      	beq.n	80031b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f6:	e02e      	b.n	8003156 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030f8:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <xTaskResumeAll+0x11c>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3318      	adds	r3, #24
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fd7b 	bl	8002c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3304      	adds	r3, #4
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fd76 	bl	8002c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2201      	movs	r2, #1
 800311a:	409a      	lsls	r2, r3
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <xTaskResumeAll+0x120>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <xTaskResumeAll+0x120>)
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <xTaskResumeAll+0x124>)
 8003134:	441a      	add	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f7ff fd04 	bl	8002b4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <xTaskResumeAll+0x128>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <xTaskResumeAll+0x12c>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <xTaskResumeAll+0x11c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1cc      	bne.n	80030f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003164:	f000 fa0c 	bl	8003580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003168:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <xTaskResumeAll+0x130>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003174:	f000 f836 	bl	80031e4 <xTaskIncrementTick>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <xTaskResumeAll+0x12c>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f1      	bne.n	8003174 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <xTaskResumeAll+0x130>)
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <xTaskResumeAll+0x12c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <xTaskResumeAll+0x134>)
 80031a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031b2:	f000 fb93 	bl	80038dc <vPortExitCritical>

	return xAlreadyYielded;
 80031b6:	68bb      	ldr	r3, [r7, #8]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200004a4 	.word	0x200004a4
 80031c4:	2000047c 	.word	0x2000047c
 80031c8:	2000043c 	.word	0x2000043c
 80031cc:	20000484 	.word	0x20000484
 80031d0:	20000380 	.word	0x20000380
 80031d4:	2000037c 	.word	0x2000037c
 80031d8:	20000490 	.word	0x20000490
 80031dc:	2000048c 	.word	0x2000048c
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <xTaskIncrementTick+0x150>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f040 808d 	bne.w	8003312 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031f8:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <xTaskIncrementTick+0x154>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003200:	4a4d      	ldr	r2, [pc, #308]	; (8003338 <xTaskIncrementTick+0x154>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d120      	bne.n	800324e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800320c:	4b4b      	ldr	r3, [pc, #300]	; (800333c <xTaskIncrementTick+0x158>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <xTaskIncrementTick+0x48>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	603b      	str	r3, [r7, #0]
}
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <xTaskIncrementTick+0x46>
 800322c:	4b43      	ldr	r3, [pc, #268]	; (800333c <xTaskIncrementTick+0x158>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b43      	ldr	r3, [pc, #268]	; (8003340 <xTaskIncrementTick+0x15c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a41      	ldr	r2, [pc, #260]	; (800333c <xTaskIncrementTick+0x158>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4a41      	ldr	r2, [pc, #260]	; (8003340 <xTaskIncrementTick+0x15c>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b40      	ldr	r3, [pc, #256]	; (8003344 <xTaskIncrementTick+0x160>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <xTaskIncrementTick+0x160>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	f000 f999 	bl	8003580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800324e:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <xTaskIncrementTick+0x164>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d34d      	bcc.n	80032f4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <xTaskIncrementTick+0x158>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xTaskIncrementTick+0x82>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xTaskIncrementTick+0x84>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <xTaskIncrementTick+0x164>)
 800326e:	f04f 32ff 	mov.w	r2, #4294967295
 8003272:	601a      	str	r2, [r3, #0]
					break;
 8003274:	e03e      	b.n	80032f4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <xTaskIncrementTick+0x158>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d203      	bcs.n	8003296 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800328e:	4a2e      	ldr	r2, [pc, #184]	; (8003348 <xTaskIncrementTick+0x164>)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6013      	str	r3, [r2, #0]
						break;
 8003294:	e02e      	b.n	80032f4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	3304      	adds	r3, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fcb0 	bl	8002c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3318      	adds	r3, #24
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fca7 	bl	8002c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	2201      	movs	r2, #1
 80032b8:	409a      	lsls	r2, r3
 80032ba:	4b24      	ldr	r3, [pc, #144]	; (800334c <xTaskIncrementTick+0x168>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <xTaskIncrementTick+0x168>)
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <xTaskIncrementTick+0x16c>)
 80032d2:	441a      	add	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7ff fc35 	bl	8002b4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <xTaskIncrementTick+0x170>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d3b4      	bcc.n	8003258 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80032ee:	2301      	movs	r3, #1
 80032f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f2:	e7b1      	b.n	8003258 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <xTaskIncrementTick+0x170>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fa:	4915      	ldr	r1, [pc, #84]	; (8003350 <xTaskIncrementTick+0x16c>)
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d907      	bls.n	800331c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e004      	b.n	800331c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <xTaskIncrementTick+0x174>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <xTaskIncrementTick+0x174>)
 800331a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <xTaskIncrementTick+0x178>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003328:	697b      	ldr	r3, [r7, #20]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	200004a4 	.word	0x200004a4
 8003338:	20000480 	.word	0x20000480
 800333c:	20000434 	.word	0x20000434
 8003340:	20000438 	.word	0x20000438
 8003344:	20000494 	.word	0x20000494
 8003348:	2000049c 	.word	0x2000049c
 800334c:	20000484 	.word	0x20000484
 8003350:	20000380 	.word	0x20000380
 8003354:	2000037c 	.word	0x2000037c
 8003358:	2000048c 	.word	0x2000048c
 800335c:	20000490 	.word	0x20000490

08003360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <vTaskSwitchContext+0xa0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800336e:	4b25      	ldr	r3, [pc, #148]	; (8003404 <vTaskSwitchContext+0xa4>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003374:	e03f      	b.n	80033f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <vTaskSwitchContext+0xa4>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800337c:	4b22      	ldr	r3, [pc, #136]	; (8003408 <vTaskSwitchContext+0xa8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800338a:	7afb      	ldrb	r3, [r7, #11]
 800338c:	f1c3 031f 	rsb	r3, r3, #31
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	491e      	ldr	r1, [pc, #120]	; (800340c <vTaskSwitchContext+0xac>)
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	607b      	str	r3, [r7, #4]
}
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <vTaskSwitchContext+0x5a>
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4a11      	ldr	r2, [pc, #68]	; (800340c <vTaskSwitchContext+0xac>)
 80033c8:	4413      	add	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	3308      	adds	r3, #8
 80033de:	429a      	cmp	r2, r3
 80033e0:	d104      	bne.n	80033ec <vTaskSwitchContext+0x8c>
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <vTaskSwitchContext+0xb0>)
 80033f4:	6013      	str	r3, [r2, #0]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	200004a4 	.word	0x200004a4
 8003404:	20000490 	.word	0x20000490
 8003408:	20000484 	.word	0x20000484
 800340c:	20000380 	.word	0x20000380
 8003410:	2000037c 	.word	0x2000037c

08003414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800341c:	f000 f852 	bl	80034c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <prvIdleTask+0x28>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d9f9      	bls.n	800341c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <prvIdleTask+0x2c>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003438:	e7f0      	b.n	800341c <prvIdleTask+0x8>
 800343a:	bf00      	nop
 800343c:	20000380 	.word	0x20000380
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	e00c      	b.n	800346a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <prvInitialiseTaskLists+0x60>)
 800345c:	4413      	add	r3, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fb48 	bl	8002af4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3301      	adds	r3, #1
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b06      	cmp	r3, #6
 800346e:	d9ef      	bls.n	8003450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003470:	480d      	ldr	r0, [pc, #52]	; (80034a8 <prvInitialiseTaskLists+0x64>)
 8003472:	f7ff fb3f 	bl	8002af4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003476:	480d      	ldr	r0, [pc, #52]	; (80034ac <prvInitialiseTaskLists+0x68>)
 8003478:	f7ff fb3c 	bl	8002af4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800347c:	480c      	ldr	r0, [pc, #48]	; (80034b0 <prvInitialiseTaskLists+0x6c>)
 800347e:	f7ff fb39 	bl	8002af4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003482:	480c      	ldr	r0, [pc, #48]	; (80034b4 <prvInitialiseTaskLists+0x70>)
 8003484:	f7ff fb36 	bl	8002af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <prvInitialiseTaskLists+0x74>)
 800348a:	f7ff fb33 	bl	8002af4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <prvInitialiseTaskLists+0x78>)
 8003490:	4a05      	ldr	r2, [pc, #20]	; (80034a8 <prvInitialiseTaskLists+0x64>)
 8003492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <prvInitialiseTaskLists+0x7c>)
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <prvInitialiseTaskLists+0x68>)
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000380 	.word	0x20000380
 80034a8:	2000040c 	.word	0x2000040c
 80034ac:	20000420 	.word	0x20000420
 80034b0:	2000043c 	.word	0x2000043c
 80034b4:	20000450 	.word	0x20000450
 80034b8:	20000468 	.word	0x20000468
 80034bc:	20000434 	.word	0x20000434
 80034c0:	20000438 	.word	0x20000438

080034c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ca:	e019      	b.n	8003500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034cc:	f000 f9d6 	bl	800387c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <prvCheckTasksWaitingTermination+0x50>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fb8f 	bl	8002c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <prvCheckTasksWaitingTermination+0x54>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <prvCheckTasksWaitingTermination+0x54>)
 80034ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <prvCheckTasksWaitingTermination+0x58>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <prvCheckTasksWaitingTermination+0x58>)
 80034f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034f6:	f000 f9f1 	bl	80038dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f810 	bl	8003520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <prvCheckTasksWaitingTermination+0x58>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e1      	bne.n	80034cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000450 	.word	0x20000450
 8003518:	2000047c 	.word	0x2000047c
 800351c:	20000464 	.word	0x20000464

08003520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fb26 	bl	8003b88 <vPortFree>
				vPortFree( pxTCB );
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb23 	bl	8003b88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003542:	e018      	b.n	8003576 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800354a:	2b01      	cmp	r3, #1
 800354c:	d103      	bne.n	8003556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fb1a 	bl	8003b88 <vPortFree>
	}
 8003554:	e00f      	b.n	8003576 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800355c:	2b02      	cmp	r3, #2
 800355e:	d00a      	beq.n	8003576 <prvDeleteTCB+0x56>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	60fb      	str	r3, [r7, #12]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <prvDeleteTCB+0x54>
	}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <prvResetNextTaskUnblockTime+0x40>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <prvResetNextTaskUnblockTime+0x14>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <prvResetNextTaskUnblockTime+0x16>
 8003594:	2300      	movs	r3, #0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <prvResetNextTaskUnblockTime+0x44>)
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80035a2:	e008      	b.n	80035b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <prvResetNextTaskUnblockTime+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <prvResetNextTaskUnblockTime+0x44>)
 80035b4:	6013      	str	r3, [r2, #0]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	20000434 	.word	0x20000434
 80035c4:	2000049c 	.word	0x2000049c

080035c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <prvAddCurrentTaskToDelayedList+0xb0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035d8:	4b28      	ldr	r3, [pc, #160]	; (800367c <prvAddCurrentTaskToDelayedList+0xb4>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3304      	adds	r3, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fb0e 	bl	8002c00 <uxListRemove>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	2201      	movs	r2, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	4b21      	ldr	r3, [pc, #132]	; (8003680 <prvAddCurrentTaskToDelayedList+0xb8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4013      	ands	r3, r2
 80035fe:	4a20      	ldr	r2, [pc, #128]	; (8003680 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003600:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d10a      	bne.n	8003620 <prvAddCurrentTaskToDelayedList+0x58>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3304      	adds	r3, #4
 8003616:	4619      	mov	r1, r3
 8003618:	481a      	ldr	r0, [pc, #104]	; (8003684 <prvAddCurrentTaskToDelayedList+0xbc>)
 800361a:	f7ff fa96 	bl	8002b4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800361e:	e026      	b.n	800366e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <prvAddCurrentTaskToDelayedList+0xb4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	429a      	cmp	r2, r3
 8003636:	d209      	bcs.n	800364c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <prvAddCurrentTaskToDelayedList+0xc0>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <prvAddCurrentTaskToDelayedList+0xb4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f7ff faa3 	bl	8002b90 <vListInsert>
}
 800364a:	e010      	b.n	800366e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <prvAddCurrentTaskToDelayedList+0xc4>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7ff fa99 	bl	8002b90 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d202      	bcs.n	800366e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003668:	4a09      	ldr	r2, [pc, #36]	; (8003690 <prvAddCurrentTaskToDelayedList+0xc8>)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6013      	str	r3, [r2, #0]
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000480 	.word	0x20000480
 800367c:	2000037c 	.word	0x2000037c
 8003680:	20000484 	.word	0x20000484
 8003684:	20000468 	.word	0x20000468
 8003688:	20000438 	.word	0x20000438
 800368c:	20000434 	.word	0x20000434
 8003690:	2000049c 	.word	0x2000049c

08003694 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3b04      	subs	r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3b04      	subs	r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	3b04      	subs	r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <pxPortInitialiseStack+0x54>)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3b14      	subs	r3, #20
 80036ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3b20      	subs	r3, #32
 80036da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	080036ed 	.word	0x080036ed

080036ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <prvTaskExitError+0x54>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d00a      	beq.n	8003716 <prvTaskExitError+0x2a>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	60fb      	str	r3, [r7, #12]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <prvTaskExitError+0x28>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60bb      	str	r3, [r7, #8]
}
 8003728:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800372a:	bf00      	nop
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0fc      	beq.n	800372c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000014 	.word	0x20000014
	...

08003750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003750:	4b07      	ldr	r3, [pc, #28]	; (8003770 <pxCurrentTCBConst2>)
 8003752:	6819      	ldr	r1, [r3, #0]
 8003754:	6808      	ldr	r0, [r1, #0]
 8003756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800375a:	f380 8809 	msr	PSP, r0
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f380 8811 	msr	BASEPRI, r0
 800376a:	f04e 0e0d 	orr.w	lr, lr, #13
 800376e:	4770      	bx	lr

08003770 <pxCurrentTCBConst2>:
 8003770:	2000037c 	.word	0x2000037c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop

08003778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003778:	4806      	ldr	r0, [pc, #24]	; (8003794 <prvPortStartFirstTask+0x1c>)
 800377a:	6800      	ldr	r0, [r0, #0]
 800377c:	6800      	ldr	r0, [r0, #0]
 800377e:	f380 8808 	msr	MSP, r0
 8003782:	b662      	cpsie	i
 8003784:	b661      	cpsie	f
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	df00      	svc	0
 8003790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003792:	bf00      	nop
 8003794:	e000ed08 	.word	0xe000ed08

08003798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800379e:	4b32      	ldr	r3, [pc, #200]	; (8003868 <xPortStartScheduler+0xd0>)
 80037a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <xPortStartScheduler+0xd4>)
 80037c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037c6:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <xPortStartScheduler+0xd8>)
 80037c8:	2207      	movs	r2, #7
 80037ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037cc:	e009      	b.n	80037e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80037ce:	4b28      	ldr	r3, [pc, #160]	; (8003870 <xPortStartScheduler+0xd8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	4a26      	ldr	r2, [pc, #152]	; (8003870 <xPortStartScheduler+0xd8>)
 80037d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d0ef      	beq.n	80037ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <xPortStartScheduler+0xd8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d00a      	beq.n	8003810 <xPortStartScheduler+0x78>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003810:	4b17      	ldr	r3, [pc, #92]	; (8003870 <xPortStartScheduler+0xd8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	4a16      	ldr	r2, [pc, #88]	; (8003870 <xPortStartScheduler+0xd8>)
 8003818:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <xPortStartScheduler+0xd8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <xPortStartScheduler+0xd8>)
 8003824:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <xPortStartScheduler+0xdc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <xPortStartScheduler+0xdc>)
 8003834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003838:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <xPortStartScheduler+0xdc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <xPortStartScheduler+0xdc>)
 8003840:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003844:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003846:	f000 f8b9 	bl	80039bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <xPortStartScheduler+0xe0>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003850:	f7ff ff92 	bl	8003778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003854:	f7ff fd84 	bl	8003360 <vTaskSwitchContext>
	prvTaskExitError();
 8003858:	f7ff ff48 	bl	80036ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000e400 	.word	0xe000e400
 800386c:	200004a8 	.word	0x200004a8
 8003870:	200004ac 	.word	0x200004ac
 8003874:	e000ed20 	.word	0xe000ed20
 8003878:	20000014 	.word	0x20000014

0800387c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
	__asm volatile
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	607b      	str	r3, [r7, #4]
}
 8003894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003896:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <vPortEnterCritical+0x58>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	4a0d      	ldr	r2, [pc, #52]	; (80038d4 <vPortEnterCritical+0x58>)
 800389e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <vPortEnterCritical+0x58>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10f      	bne.n	80038c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <vPortEnterCritical+0x5c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	603b      	str	r3, [r7, #0]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <vPortEnterCritical+0x4a>
	}
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000014 	.word	0x20000014
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <vPortExitCritical+0x4c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10a      	bne.n	8003900 <vPortExitCritical+0x24>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	607b      	str	r3, [r7, #4]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <vPortExitCritical+0x4c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3b01      	subs	r3, #1
 8003906:	4a08      	ldr	r2, [pc, #32]	; (8003928 <vPortExitCritical+0x4c>)
 8003908:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <vPortExitCritical+0x4c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d105      	bne.n	800391e <vPortExitCritical+0x42>
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800391c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	20000014 	.word	0x20000014
 800392c:	00000000 	.word	0x00000000

08003930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003930:	f3ef 8009 	mrs	r0, PSP
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <pxCurrentTCBConst>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003940:	6010      	str	r0, [r2, #0]
 8003942:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003946:	f04f 0050 	mov.w	r0, #80	; 0x50
 800394a:	f380 8811 	msr	BASEPRI, r0
 800394e:	f7ff fd07 	bl	8003360 <vTaskSwitchContext>
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8811 	msr	BASEPRI, r0
 800395a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	6808      	ldr	r0, [r1, #0]
 8003962:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003966:	f380 8809 	msr	PSP, r0
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	4770      	bx	lr

08003970 <pxCurrentTCBConst>:
 8003970:	2000037c 	.word	0x2000037c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	607b      	str	r3, [r7, #4]
}
 8003990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003992:	f7ff fc27 	bl	80031e4 <xTaskIncrementTick>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <SysTick_Handler+0x40>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f383 8811 	msr	BASEPRI, r3
}
 80039ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <vPortSetupTimerInterrupt+0x30>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <vPortSetupTimerInterrupt+0x34>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039cc:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <vPortSetupTimerInterrupt+0x38>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a09      	ldr	r2, [pc, #36]	; (80039f8 <vPortSetupTimerInterrupt+0x3c>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	099b      	lsrs	r3, r3, #6
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <vPortSetupTimerInterrupt+0x40>)
 80039da:	3b01      	subs	r3, #1
 80039dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039de:	4b03      	ldr	r3, [pc, #12]	; (80039ec <vPortSetupTimerInterrupt+0x30>)
 80039e0:	2207      	movs	r2, #7
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr
 80039ec:	e000e010 	.word	0xe000e010
 80039f0:	e000e018 	.word	0xe000e018
 80039f4:	20000008 	.word	0x20000008
 80039f8:	10624dd3 	.word	0x10624dd3
 80039fc:	e000e014 	.word	0xe000e014

08003a00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a0c:	f7ff fb40 	bl	8003090 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a10:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <pvPortMalloc+0x174>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a18:	f000 f910 	bl	8003c3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a1c:	4b56      	ldr	r3, [pc, #344]	; (8003b78 <pvPortMalloc+0x178>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f040 808e 	bne.w	8003b46 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01d      	beq.n	8003a6c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003a30:	2208      	movs	r2, #8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d014      	beq.n	8003a6c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f023 0307 	bic.w	r3, r3, #7
 8003a48:	3308      	adds	r3, #8
 8003a4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <pvPortMalloc+0x6c>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	617b      	str	r3, [r7, #20]
}
 8003a68:	bf00      	nop
 8003a6a:	e7fe      	b.n	8003a6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d069      	beq.n	8003b46 <pvPortMalloc+0x146>
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <pvPortMalloc+0x17c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d864      	bhi.n	8003b46 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a7c:	4b40      	ldr	r3, [pc, #256]	; (8003b80 <pvPortMalloc+0x180>)
 8003a7e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <pvPortMalloc+0x180>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a86:	e004      	b.n	8003a92 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d903      	bls.n	8003aa4 <pvPortMalloc+0xa4>
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f1      	bne.n	8003a88 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003aa4:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <pvPortMalloc+0x174>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d04b      	beq.n	8003b46 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	4413      	add	r3, r2
 8003ab6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	1ad2      	subs	r2, r2, r3
 8003ac8:	2308      	movs	r3, #8
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d91f      	bls.n	8003b10 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <pvPortMalloc+0xf8>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	613b      	str	r3, [r7, #16]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b0a:	69b8      	ldr	r0, [r7, #24]
 8003b0c:	f000 f8f8 	bl	8003d00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <pvPortMalloc+0x17c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <pvPortMalloc+0x17c>)
 8003b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <pvPortMalloc+0x17c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b18      	ldr	r3, [pc, #96]	; (8003b84 <pvPortMalloc+0x184>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d203      	bcs.n	8003b32 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <pvPortMalloc+0x17c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <pvPortMalloc+0x184>)
 8003b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <pvPortMalloc+0x178>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b46:	f7ff fab1 	bl	80030ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <pvPortMalloc+0x16a>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <pvPortMalloc+0x168>
	return pvReturn;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200010b8 	.word	0x200010b8
 8003b78:	200010c4 	.word	0x200010c4
 8003b7c:	200010bc 	.word	0x200010bc
 8003b80:	200010b0 	.word	0x200010b0
 8003b84:	200010c0 	.word	0x200010c0

08003b88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d048      	beq.n	8003c2c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	425b      	negs	r3, r3
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <vPortFree+0xac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <vPortFree+0x44>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60fb      	str	r3, [r7, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <vPortFree+0x62>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	60bb      	str	r3, [r7, #8]
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <vPortFree+0xac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d019      	beq.n	8003c2c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d115      	bne.n	8003c2c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <vPortFree+0xac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c10:	f7ff fa3e 	bl	8003090 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <vPortFree+0xb0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <vPortFree+0xb0>)
 8003c20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f000 f86c 	bl	8003d00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c28:	f7ff fa40 	bl	80030ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c2c:	bf00      	nop
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200010c4 	.word	0x200010c4
 8003c38:	200010bc 	.word	0x200010bc

08003c3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <prvHeapInit+0xac>)
 8003c4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3307      	adds	r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0307 	bic.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <prvHeapInit+0xac>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c74:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <prvHeapInit+0xb0>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <prvHeapInit+0xb0>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4413      	add	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c88:	2208      	movs	r2, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0307 	bic.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <prvHeapInit+0xb4>)
 8003c9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <prvHeapInit+0xb4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <prvHeapInit+0xb4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <prvHeapInit+0xb4>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <prvHeapInit+0xb8>)
 8003cca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <prvHeapInit+0xbc>)
 8003cd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <prvHeapInit+0xc0>)
 8003cd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cda:	601a      	str	r2, [r3, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	200004b0 	.word	0x200004b0
 8003cec:	200010b0 	.word	0x200010b0
 8003cf0:	200010b8 	.word	0x200010b8
 8003cf4:	200010c0 	.word	0x200010c0
 8003cf8:	200010bc 	.word	0x200010bc
 8003cfc:	200010c4 	.word	0x200010c4

08003d00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <prvInsertBlockIntoFreeList+0xa8>)
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e002      	b.n	8003d14 <prvInsertBlockIntoFreeList+0x14>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d8f7      	bhi.n	8003d0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d108      	bne.n	8003d42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d118      	bne.n	8003d88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <prvInsertBlockIntoFreeList+0xac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d00d      	beq.n	8003d7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	441a      	add	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e008      	b.n	8003d90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <prvInsertBlockIntoFreeList+0xac>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e003      	b.n	8003d90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d002      	beq.n	8003d9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	200010b0 	.word	0x200010b0
 8003dac:	200010b8 	.word	0x200010b8

08003db0 <memset>:
 8003db0:	4603      	mov	r3, r0
 8003db2:	4402      	add	r2, r0
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d100      	bne.n	8003dba <memset+0xa>
 8003db8:	4770      	bx	lr
 8003dba:	f803 1b01 	strb.w	r1, [r3], #1
 8003dbe:	e7f9      	b.n	8003db4 <memset+0x4>

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	2600      	movs	r6, #0
 8003dc4:	4d0c      	ldr	r5, [pc, #48]	; (8003df8 <__libc_init_array+0x38>)
 8003dc6:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc8:	1b64      	subs	r4, r4, r5
 8003dca:	10a4      	asrs	r4, r4, #2
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	f000 f81a 	bl	8003e08 <_init>
 8003dd4:	2600      	movs	r6, #0
 8003dd6:	4d0a      	ldr	r5, [pc, #40]	; (8003e00 <__libc_init_array+0x40>)
 8003dd8:	4c0a      	ldr	r4, [pc, #40]	; (8003e04 <__libc_init_array+0x44>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08003ed4 	.word	0x08003ed4
 8003dfc:	08003ed4 	.word	0x08003ed4
 8003e00:	08003ed4 	.word	0x08003ed4
 8003e04:	08003ed8 	.word	0x08003ed8

08003e08 <_init>:
 8003e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0a:	bf00      	nop
 8003e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0e:	bc08      	pop	{r3}
 8003e10:	469e      	mov	lr, r3
 8003e12:	4770      	bx	lr

08003e14 <_fini>:
 8003e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e16:	bf00      	nop
 8003e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e1a:	bc08      	pop	{r3}
 8003e1c:	469e      	mov	lr, r3
 8003e1e:	4770      	bx	lr
